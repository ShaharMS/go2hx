package stdgo.time_test;
import stdgo.time.Time;
import stdgo.time.Time;
import stdgo.time.Time;
import stdgo.time.Time;
import stdgo.time.Time;
import stdgo.StdGoTypes;
import stdgo.Error;
import stdgo.Go;
import stdgo.GoString;
import stdgo.Pointer;
import stdgo.Slice;
import stdgo.GoArray;
import stdgo.GoMap;
import stdgo.Chan;
var _nextStdChunkTests : Slice<GoString> = ((new Slice<GoString>(((((("(2006)-(01)-(02)T(15):(04):(05)(Z07:00)" : GoString))) : GoString)), ((((("(2006)-(01)-(02) (002) (15):(04):(05)" : GoString))) : GoString)), ((((("(2006)-(01) (002) (15):(04):(05)" : GoString))) : GoString)), ((((("(2006)-(002) (15):(04):(05)" : GoString))) : GoString)), ((((("(2006)(002)(01) (15):(04):(05)" : GoString))) : GoString)), ((((("(2006)(002)(04) (15):(04):(05)" : GoString))) : GoString))) : Slice<GoString>));
var _rfc3339Formats : Slice<stdgo.time_test.Time_test.TimeFormatTest> = ((new Slice<stdgo.time_test.Time_test.TimeFormatTest>(((new stdgo.time_test.Time_test.TimeFormatTest((date(((2008 : GoInt)), ((9 : Month)), ((17 : GoInt)), ((20 : GoInt)), ((4 : GoInt)), ((26 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((2008 : GoInt)), ((9 : Month)), ((17 : GoInt)), ((20 : GoInt)), ((4 : GoInt)), ((26 : GoInt)), ((0 : GoInt)), utc).__copy__()), ((((("2008-09-17T20:04:26Z" : GoString))) : GoString))) : stdgo.time_test.Time_test.TimeFormatTest)), ((new stdgo.time_test.Time_test.TimeFormatTest((date(((1994 : GoInt)), ((9 : Month)), ((17 : GoInt)), ((20 : GoInt)), ((4 : GoInt)), ((26 : GoInt)), ((0 : GoInt)), fixedZone(((((("EST" : GoString))) : GoString)), ((-18000 : GoInt)))) == null ? null : date(((1994 : GoInt)), ((9 : Month)), ((17 : GoInt)), ((20 : GoInt)), ((4 : GoInt)), ((26 : GoInt)), ((0 : GoInt)), fixedZone(((((("EST" : GoString))) : GoString)), ((-18000 : GoInt)))).__copy__()), ((((("1994-09-17T20:04:26-05:00" : GoString))) : GoString))) : stdgo.time_test.Time_test.TimeFormatTest)), ((new stdgo.time_test.Time_test.TimeFormatTest((date(((2000 : GoInt)), ((12 : Month)), ((26 : GoInt)), ((1 : GoInt)), ((15 : GoInt)), ((6 : GoInt)), ((0 : GoInt)), fixedZone(((((("OTO" : GoString))) : GoString)), ((15600 : GoInt)))) == null ? null : date(((2000 : GoInt)), ((12 : Month)), ((26 : GoInt)), ((1 : GoInt)), ((15 : GoInt)), ((6 : GoInt)), ((0 : GoInt)), fixedZone(((((("OTO" : GoString))) : GoString)), ((15600 : GoInt)))).__copy__()), ((((("2000-12-26T01:15:06+04:20" : GoString))) : GoString))) : stdgo.time_test.Time_test.TimeFormatTest))) : Slice<stdgo.time_test.Time_test.TimeFormatTest>));
var _formatTests : Slice<stdgo.time_test.Time_test.FormatTest> = ((new Slice<stdgo.time_test.Time_test.FormatTest>(
((new stdgo.time_test.Time_test.FormatTest(((((("ANSIC" : GoString))) : GoString)), ((((("Mon Jan _2 15:04:05 2006" : GoString))) : GoString)), ((((("Wed Feb  4 21:00:57 2009" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest)),
((new stdgo.time_test.Time_test.FormatTest(((((("UnixDate" : GoString))) : GoString)), ((((("Mon Jan _2 15:04:05 MST 2006" : GoString))) : GoString)), ((((("Wed Feb  4 21:00:57 PST 2009" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest)),
((new stdgo.time_test.Time_test.FormatTest(((((("RubyDate" : GoString))) : GoString)), ((((("Mon Jan 02 15:04:05 -0700 2006" : GoString))) : GoString)), ((((("Wed Feb 04 21:00:57 -0800 2009" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest)),
((new stdgo.time_test.Time_test.FormatTest(((((("RFC822" : GoString))) : GoString)), ((((("02 Jan 06 15:04 MST" : GoString))) : GoString)), ((((("04 Feb 09 21:00 PST" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest)),
((new stdgo.time_test.Time_test.FormatTest(((((("RFC850" : GoString))) : GoString)), ((((("Monday, 02-Jan-06 15:04:05 MST" : GoString))) : GoString)), ((((("Wednesday, 04-Feb-09 21:00:57 PST" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest)),
((new stdgo.time_test.Time_test.FormatTest(((((("RFC1123" : GoString))) : GoString)), ((((("Mon, 02 Jan 2006 15:04:05 MST" : GoString))) : GoString)), ((((("Wed, 04 Feb 2009 21:00:57 PST" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest)),
((new stdgo.time_test.Time_test.FormatTest(((((("RFC1123Z" : GoString))) : GoString)), ((((("Mon, 02 Jan 2006 15:04:05 -0700" : GoString))) : GoString)), ((((("Wed, 04 Feb 2009 21:00:57 -0800" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest)),
((new stdgo.time_test.Time_test.FormatTest(((((("RFC3339" : GoString))) : GoString)), ((((("2006-01-02T15:04:05Z07:00" : GoString))) : GoString)), ((((("2009-02-04T21:00:57-08:00" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest)),
((new stdgo.time_test.Time_test.FormatTest(((((("RFC3339Nano" : GoString))) : GoString)), ((((("2006-01-02T15:04:05.999999999Z07:00" : GoString))) : GoString)), ((((("2009-02-04T21:00:57.0123456-08:00" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest)),
((new stdgo.time_test.Time_test.FormatTest(((((("Kitchen" : GoString))) : GoString)), ((((("3:04PM" : GoString))) : GoString)), ((((("9:00PM" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest)),
((new stdgo.time_test.Time_test.FormatTest(((((("am/pm" : GoString))) : GoString)), ((((("3pm" : GoString))) : GoString)), ((((("9pm" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest)),
((new stdgo.time_test.Time_test.FormatTest(((((("AM/PM" : GoString))) : GoString)), ((((("3PM" : GoString))) : GoString)), ((((("9PM" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest)),
((new stdgo.time_test.Time_test.FormatTest(((((("two-digit year" : GoString))) : GoString)), ((((("06 01 02" : GoString))) : GoString)), ((((("09 02 04" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest)),
((new stdgo.time_test.Time_test.FormatTest(((((("Janet" : GoString))) : GoString)), ((((("Hi Janet, the Month is January" : GoString))) : GoString)), ((((("Hi Janet, the Month is February" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest)),
((new stdgo.time_test.Time_test.FormatTest(((((("Stamp" : GoString))) : GoString)), ((((("Jan _2 15:04:05" : GoString))) : GoString)), ((((("Feb  4 21:00:57" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest)),
((new stdgo.time_test.Time_test.FormatTest(((((("StampMilli" : GoString))) : GoString)), ((((("Jan _2 15:04:05.000" : GoString))) : GoString)), ((((("Feb  4 21:00:57.012" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest)),
((new stdgo.time_test.Time_test.FormatTest(((((("StampMicro" : GoString))) : GoString)), ((((("Jan _2 15:04:05.000000" : GoString))) : GoString)), ((((("Feb  4 21:00:57.012345" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest)),
((new stdgo.time_test.Time_test.FormatTest(((((("StampNano" : GoString))) : GoString)), ((((("Jan _2 15:04:05.000000000" : GoString))) : GoString)), ((((("Feb  4 21:00:57.012345600" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest)),
((new stdgo.time_test.Time_test.FormatTest(((((("YearDay" : GoString))) : GoString)), ((((("Jan  2 002 __2 2" : GoString))) : GoString)), ((((("Feb  4 035  35 4" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest)),
((new stdgo.time_test.Time_test.FormatTest(((((("Year" : GoString))) : GoString)), ((((("2006 6 06 _6 __6 ___6" : GoString))) : GoString)), ((((("2009 6 09 _6 __6 ___6" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest)),
((new stdgo.time_test.Time_test.FormatTest(((((("Month" : GoString))) : GoString)), ((((("Jan January 1 01 _1" : GoString))) : GoString)), ((((("Feb February 2 02 _2" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest)),
((new stdgo.time_test.Time_test.FormatTest(((((("DayOfMonth" : GoString))) : GoString)), ((((("2 02 _2 __2" : GoString))) : GoString)), ((((("4 04  4  35" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest)),
((new stdgo.time_test.Time_test.FormatTest(((((("DayOfWeek" : GoString))) : GoString)), ((((("Mon Monday" : GoString))) : GoString)), ((((("Wed Wednesday" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest)),
((new stdgo.time_test.Time_test.FormatTest(((((("Hour" : GoString))) : GoString)), ((((("15 3 03 _3" : GoString))) : GoString)), ((((("21 9 09 _9" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest)),
((new stdgo.time_test.Time_test.FormatTest(((((("Minute" : GoString))) : GoString)), ((((("4 04 _4" : GoString))) : GoString)), ((((("0 00 _0" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest)),
((new stdgo.time_test.Time_test.FormatTest(((((("Second" : GoString))) : GoString)), ((((("5 05 _5" : GoString))) : GoString)), ((((("57 57 _57" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest))) : Slice<stdgo.time_test.Time_test.FormatTest>));
var _goStringTests : Slice<T__struct_0> = ((new Slice<T__struct_0>((({ _in : (date(((2009 : GoInt)), ((2 : Month)), ((5 : GoInt)), ((5 : GoInt)), ((0 : GoInt)), ((57 : GoInt)), ((12345600 : GoInt)), utc) == null ? null : date(((2009 : GoInt)), ((2 : Month)), ((5 : GoInt)), ((5 : GoInt)), ((0 : GoInt)), ((57 : GoInt)), ((12345600 : GoInt)), utc).__copy__()), _want : ((((("time.Date(2009, time.February, 5, 5, 0, 57, 12345600, time.UTC)" : GoString))) : GoString)) } : T__struct_0)), (({ _in : (date(((2009 : GoInt)), ((2 : Month)), ((5 : GoInt)), ((5 : GoInt)), ((0 : GoInt)), ((57 : GoInt)), ((12345600 : GoInt)), local) == null ? null : date(((2009 : GoInt)), ((2 : Month)), ((5 : GoInt)), ((5 : GoInt)), ((0 : GoInt)), ((57 : GoInt)), ((12345600 : GoInt)), local).__copy__()), _want : ((((("time.Date(2009, time.February, 5, 5, 0, 57, 12345600, time.Local)" : GoString))) : GoString)) } : T__struct_0)), (({ _in : (date(((2009 : GoInt)), ((2 : Month)), ((5 : GoInt)), ((5 : GoInt)), ((0 : GoInt)), ((57 : GoInt)), ((12345600 : GoInt)), fixedZone(((((("Europe/Berlin" : GoString))) : GoString)), ((10800 : GoInt)))) == null ? null : date(((2009 : GoInt)), ((2 : Month)), ((5 : GoInt)), ((5 : GoInt)), ((0 : GoInt)), ((57 : GoInt)), ((12345600 : GoInt)), fixedZone(((((("Europe/Berlin" : GoString))) : GoString)), ((10800 : GoInt)))).__copy__()), _want : (("time.Date(2009, time.February, 5, 5, 0, 57, 12345600, time.Location(\"Europe/Berlin\"))" : GoString)) } : T__struct_0)), (({ _in : (date(((2009 : GoInt)), ((2 : Month)), ((5 : GoInt)), ((5 : GoInt)), ((0 : GoInt)), ((57 : GoInt)), ((12345600 : GoInt)), fixedZone(((((("Non-ASCII character ⏰" : GoString))) : GoString)), ((10800 : GoInt)))) == null ? null : date(((2009 : GoInt)), ((2 : Month)), ((5 : GoInt)), ((5 : GoInt)), ((0 : GoInt)), ((57 : GoInt)), ((12345600 : GoInt)), fixedZone(((((("Non-ASCII character ⏰" : GoString))) : GoString)), ((10800 : GoInt)))).__copy__()), _want : (("time.Date(2009, time.February, 5, 5, 0, 57, 12345600, time.Location(\"Non-ASCII character \\xe2\\x8f\\xb0\"))" : GoString)) } : T__struct_0))) : Slice<T__struct_0>));
var _parseTests : Slice<stdgo.time_test.Time_test.ParseTest> = ((new Slice<stdgo.time_test.Time_test.ParseTest>(
((new stdgo.time_test.Time_test.ParseTest(((((("ANSIC" : GoString))) : GoString)), ((((("Mon Jan _2 15:04:05 2006" : GoString))) : GoString)), ((((("Thu Feb  4 21:00:57 2010" : GoString))) : GoString)), false, true, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("UnixDate" : GoString))) : GoString)), ((((("Mon Jan _2 15:04:05 MST 2006" : GoString))) : GoString)), ((((("Thu Feb  4 21:00:57 PST 2010" : GoString))) : GoString)), true, true, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("RubyDate" : GoString))) : GoString)), ((((("Mon Jan 02 15:04:05 -0700 2006" : GoString))) : GoString)), ((((("Thu Feb 04 21:00:57 -0800 2010" : GoString))) : GoString)), true, true, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("RFC850" : GoString))) : GoString)), ((((("Monday, 02-Jan-06 15:04:05 MST" : GoString))) : GoString)), ((((("Thursday, 04-Feb-10 21:00:57 PST" : GoString))) : GoString)), true, true, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("RFC1123" : GoString))) : GoString)), ((((("Mon, 02 Jan 2006 15:04:05 MST" : GoString))) : GoString)), ((((("Thu, 04 Feb 2010 21:00:57 PST" : GoString))) : GoString)), true, true, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("RFC1123" : GoString))) : GoString)), ((((("Mon, 02 Jan 2006 15:04:05 MST" : GoString))) : GoString)), ((((("Thu, 04 Feb 2010 22:00:57 PDT" : GoString))) : GoString)), true, true, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("RFC1123Z" : GoString))) : GoString)), ((((("Mon, 02 Jan 2006 15:04:05 -0700" : GoString))) : GoString)), ((((("Thu, 04 Feb 2010 21:00:57 -0800" : GoString))) : GoString)), true, true, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("RFC3339" : GoString))) : GoString)), ((((("2006-01-02T15:04:05Z07:00" : GoString))) : GoString)), ((((("2010-02-04T21:00:57-08:00" : GoString))) : GoString)), true, false, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("custom: \"2006-01-02 15:04:05-07\"" : GoString))) : GoString)), ((((("2006-01-02 15:04:05-07" : GoString))) : GoString)), ((((("2010-02-04 21:00:57-08" : GoString))) : GoString)), true, false, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("ANSIC" : GoString))) : GoString)), ((((("Mon Jan _2 15:04:05 2006" : GoString))) : GoString)), ((((("Thu Feb  4 21:00:57.0 2010" : GoString))) : GoString)), false, true, ((1 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("UnixDate" : GoString))) : GoString)), ((((("Mon Jan _2 15:04:05 MST 2006" : GoString))) : GoString)), ((((("Thu Feb  4 21:00:57.01 PST 2010" : GoString))) : GoString)), true, true, ((1 : GoInt)), ((2 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("RubyDate" : GoString))) : GoString)), ((((("Mon Jan 02 15:04:05 -0700 2006" : GoString))) : GoString)), ((((("Thu Feb 04 21:00:57.012 -0800 2010" : GoString))) : GoString)), true, true, ((1 : GoInt)), ((3 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("RFC850" : GoString))) : GoString)), ((((("Monday, 02-Jan-06 15:04:05 MST" : GoString))) : GoString)), ((((("Thursday, 04-Feb-10 21:00:57.0123 PST" : GoString))) : GoString)), true, true, ((1 : GoInt)), ((4 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("RFC1123" : GoString))) : GoString)), ((((("Mon, 02 Jan 2006 15:04:05 MST" : GoString))) : GoString)), ((((("Thu, 04 Feb 2010 21:00:57.01234 PST" : GoString))) : GoString)), true, true, ((1 : GoInt)), ((5 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("RFC1123Z" : GoString))) : GoString)), ((((("Mon, 02 Jan 2006 15:04:05 -0700" : GoString))) : GoString)), ((((("Thu, 04 Feb 2010 21:00:57.01234 -0800" : GoString))) : GoString)), true, true, ((1 : GoInt)), ((5 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("RFC3339" : GoString))) : GoString)), ((((("2006-01-02T15:04:05Z07:00" : GoString))) : GoString)), ((((("2010-02-04T21:00:57.012345678-08:00" : GoString))) : GoString)), true, false, ((1 : GoInt)), ((9 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("custom: \"2006-01-02 15:04:05\"" : GoString))) : GoString)), ((((("2006-01-02 15:04:05" : GoString))) : GoString)), ((((("2010-02-04 21:00:57.0" : GoString))) : GoString)), false, false, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("ANSIC" : GoString))) : GoString)), ((((("Mon Jan _2 15:04:05 2006" : GoString))) : GoString)), ((((("Thu Feb 4 21:00:57 2010" : GoString))) : GoString)), false, true, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("ANSIC" : GoString))) : GoString)), ((((("Mon Jan _2 15:04:05 2006" : GoString))) : GoString)), ((((("Thu      Feb     4     21:00:57     2010" : GoString))) : GoString)), false, true, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("ANSIC" : GoString))) : GoString)), ((((("Mon Jan _2 15:04:05 2006" : GoString))) : GoString)), ((((("THU FEB 4 21:00:57 2010" : GoString))) : GoString)), false, true, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("ANSIC" : GoString))) : GoString)), ((((("Mon Jan _2 15:04:05 2006" : GoString))) : GoString)), ((((("thu feb 4 21:00:57 2010" : GoString))) : GoString)), false, true, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("millisecond:: dot separator" : GoString))) : GoString)), ((((("Mon Jan _2 15:04:05.000 2006" : GoString))) : GoString)), ((((("Thu Feb  4 21:00:57.012 2010" : GoString))) : GoString)), false, true, ((1 : GoInt)), ((3 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("microsecond:: dot separator" : GoString))) : GoString)), ((((("Mon Jan _2 15:04:05.000000 2006" : GoString))) : GoString)), ((((("Thu Feb  4 21:00:57.012345 2010" : GoString))) : GoString)), false, true, ((1 : GoInt)), ((6 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("nanosecond:: dot separator" : GoString))) : GoString)), ((((("Mon Jan _2 15:04:05.000000000 2006" : GoString))) : GoString)), ((((("Thu Feb  4 21:00:57.012345678 2010" : GoString))) : GoString)), false, true, ((1 : GoInt)), ((9 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("millisecond:: comma separator" : GoString))) : GoString)), ((((("Mon Jan _2 15:04:05,000 2006" : GoString))) : GoString)), ((((("Thu Feb  4 21:00:57.012 2010" : GoString))) : GoString)), false, true, ((1 : GoInt)), ((3 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("microsecond:: comma separator" : GoString))) : GoString)), ((((("Mon Jan _2 15:04:05,000000 2006" : GoString))) : GoString)), ((((("Thu Feb  4 21:00:57.012345 2010" : GoString))) : GoString)), false, true, ((1 : GoInt)), ((6 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("nanosecond:: comma separator" : GoString))) : GoString)), ((((("Mon Jan _2 15:04:05,000000000 2006" : GoString))) : GoString)), ((((("Thu Feb  4 21:00:57.012345678 2010" : GoString))) : GoString)), false, true, ((1 : GoInt)), ((9 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("zero1" : GoString))) : GoString)), ((((("2006.01.02.15.04.05.0" : GoString))) : GoString)), ((((("2010.02.04.21.00.57.0" : GoString))) : GoString)), false, false, ((1 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("zero2" : GoString))) : GoString)), ((((("2006.01.02.15.04.05.00" : GoString))) : GoString)), ((((("2010.02.04.21.00.57.01" : GoString))) : GoString)), false, false, ((1 : GoInt)), ((2 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("Janet" : GoString))) : GoString)), ((((("Hi Janet, the Month is January: Jan _2 15:04:05 2006" : GoString))) : GoString)), ((((("Hi Janet, the Month is February: Feb  4 21:00:57 2010" : GoString))) : GoString)), false, true, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("GMT-8" : GoString))) : GoString)), ((((("Mon Jan _2 15:04:05 MST 2006" : GoString))) : GoString)), ((((("Fri Feb  5 05:00:57 GMT-8 2010" : GoString))) : GoString)), true, true, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("" : GoString))) : GoString)), ((((("2006-01-02 15:04:05.9999 -0700 MST" : GoString))) : GoString)), ((((("2010-02-04 21:00:57 -0800 PST" : GoString))) : GoString)), true, false, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("" : GoString))) : GoString)), ((((("2006-01-02 15:04:05.999999999 -0700 MST" : GoString))) : GoString)), ((((("2010-02-04 21:00:57 -0800 PST" : GoString))) : GoString)), true, false, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("" : GoString))) : GoString)), ((((("2006-01-02 15:04:05.9999 -0700 MST" : GoString))) : GoString)), ((((("2010-02-04 21:00:57.0123 -0800 PST" : GoString))) : GoString)), true, false, ((1 : GoInt)), ((4 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("" : GoString))) : GoString)), ((((("2006-01-02 15:04:05.999999999 -0700 MST" : GoString))) : GoString)), ((((("2010-02-04 21:00:57.0123 -0800 PST" : GoString))) : GoString)), true, false, ((1 : GoInt)), ((4 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("" : GoString))) : GoString)), ((((("2006-01-02 15:04:05.9999 -0700 MST" : GoString))) : GoString)), ((((("2010-02-04 21:00:57.012345678 -0800 PST" : GoString))) : GoString)), true, false, ((1 : GoInt)), ((9 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("" : GoString))) : GoString)), ((((("2006-01-02 15:04:05.999999999 -0700 MST" : GoString))) : GoString)), ((((("2010-02-04 21:00:57.012345678 -0800 PST" : GoString))) : GoString)), true, false, ((1 : GoInt)), ((9 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("" : GoString))) : GoString)), ((((("2006-01-02 15:04:05,9999 -0700 MST" : GoString))) : GoString)), ((((("2010-02-04 21:00:57 -0800 PST" : GoString))) : GoString)), true, false, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("" : GoString))) : GoString)), ((((("2006-01-02 15:04:05,999999999 -0700 MST" : GoString))) : GoString)), ((((("2010-02-04 21:00:57 -0800 PST" : GoString))) : GoString)), true, false, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("" : GoString))) : GoString)), ((((("2006-01-02 15:04:05,9999 -0700 MST" : GoString))) : GoString)), ((((("2010-02-04 21:00:57.0123 -0800 PST" : GoString))) : GoString)), true, false, ((1 : GoInt)), ((4 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("" : GoString))) : GoString)), ((((("2006-01-02 15:04:05,999999999 -0700 MST" : GoString))) : GoString)), ((((("2010-02-04 21:00:57.0123 -0800 PST" : GoString))) : GoString)), true, false, ((1 : GoInt)), ((4 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("" : GoString))) : GoString)), ((((("2006-01-02 15:04:05,9999 -0700 MST" : GoString))) : GoString)), ((((("2010-02-04 21:00:57.012345678 -0800 PST" : GoString))) : GoString)), true, false, ((1 : GoInt)), ((9 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("" : GoString))) : GoString)), ((((("2006-01-02 15:04:05,999999999 -0700 MST" : GoString))) : GoString)), ((((("2010-02-04 21:00:57.012345678 -0800 PST" : GoString))) : GoString)), true, false, ((1 : GoInt)), ((9 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("" : GoString))) : GoString)), ((((("Jan _2 15:04:05.000000000" : GoString))) : GoString)), ((((("Feb  4 21:00:57.012345678" : GoString))) : GoString)), false, false, ((-1 : GoInt)), ((9 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("" : GoString))) : GoString)), ((((("Jan _2 15:04:05.999" : GoString))) : GoString)), ((((("Feb  4 21:00:57.012300000" : GoString))) : GoString)), false, false, ((-1 : GoInt)), ((4 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("" : GoString))) : GoString)), ((((("Jan _2 15:04:05.999" : GoString))) : GoString)), ((((("Feb  4 21:00:57.012345678" : GoString))) : GoString)), false, false, ((-1 : GoInt)), ((9 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("" : GoString))) : GoString)), ((((("Jan _2 15:04:05.999999999" : GoString))) : GoString)), ((((("Feb  4 21:00:57.0123" : GoString))) : GoString)), false, false, ((-1 : GoInt)), ((4 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("" : GoString))) : GoString)), ((((("Jan _2 15:04:05.999999999" : GoString))) : GoString)), ((((("Feb  4 21:00:57.012345678" : GoString))) : GoString)), false, false, ((-1 : GoInt)), ((9 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("" : GoString))) : GoString)), ((((("2006-01-02 002 15:04:05" : GoString))) : GoString)), ((((("2010-02-04 035 21:00:57" : GoString))) : GoString)), false, false, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("" : GoString))) : GoString)), ((((("2006-01 002 15:04:05" : GoString))) : GoString)), ((((("2010-02 035 21:00:57" : GoString))) : GoString)), false, false, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("" : GoString))) : GoString)), ((((("2006-002 15:04:05" : GoString))) : GoString)), ((((("2010-035 21:00:57" : GoString))) : GoString)), false, false, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("" : GoString))) : GoString)), ((((("200600201 15:04:05" : GoString))) : GoString)), ((((("201003502 21:00:57" : GoString))) : GoString)), false, false, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)),
((new stdgo.time_test.Time_test.ParseTest(((((("" : GoString))) : GoString)), ((((("200600204 15:04:05" : GoString))) : GoString)), ((((("201003504 21:00:57" : GoString))) : GoString)), false, false, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest))) : Slice<stdgo.time_test.Time_test.ParseTest>));
var _dayOutOfRangeTests : Slice<T__struct_1> = ((new Slice<T__struct_1>(
(({ _date : ((((("Thu Jan 99 21:00:57 2010" : GoString))) : GoString)), _ok : false } : T__struct_1)),
(({ _date : ((((("Thu Jan 31 21:00:57 2010" : GoString))) : GoString)), _ok : true } : T__struct_1)),
(({ _date : ((((("Thu Jan 32 21:00:57 2010" : GoString))) : GoString)), _ok : false } : T__struct_1)),
(({ _date : ((((("Thu Feb 28 21:00:57 2012" : GoString))) : GoString)), _ok : true } : T__struct_1)),
(({ _date : ((((("Thu Feb 29 21:00:57 2012" : GoString))) : GoString)), _ok : true } : T__struct_1)),
(({ _date : ((((("Thu Feb 29 21:00:57 2010" : GoString))) : GoString)), _ok : false } : T__struct_1)),
(({ _date : ((((("Thu Mar 31 21:00:57 2010" : GoString))) : GoString)), _ok : true } : T__struct_1)),
(({ _date : ((((("Thu Mar 32 21:00:57 2010" : GoString))) : GoString)), _ok : false } : T__struct_1)),
(({ _date : ((((("Thu Apr 30 21:00:57 2010" : GoString))) : GoString)), _ok : true } : T__struct_1)),
(({ _date : ((((("Thu Apr 31 21:00:57 2010" : GoString))) : GoString)), _ok : false } : T__struct_1)),
(({ _date : ((((("Thu May 31 21:00:57 2010" : GoString))) : GoString)), _ok : true } : T__struct_1)),
(({ _date : ((((("Thu May 32 21:00:57 2010" : GoString))) : GoString)), _ok : false } : T__struct_1)),
(({ _date : ((((("Thu Jun 30 21:00:57 2010" : GoString))) : GoString)), _ok : true } : T__struct_1)),
(({ _date : ((((("Thu Jun 31 21:00:57 2010" : GoString))) : GoString)), _ok : false } : T__struct_1)),
(({ _date : ((((("Thu Jul 31 21:00:57 2010" : GoString))) : GoString)), _ok : true } : T__struct_1)),
(({ _date : ((((("Thu Jul 32 21:00:57 2010" : GoString))) : GoString)), _ok : false } : T__struct_1)),
(({ _date : ((((("Thu Aug 31 21:00:57 2010" : GoString))) : GoString)), _ok : true } : T__struct_1)),
(({ _date : ((((("Thu Aug 32 21:00:57 2010" : GoString))) : GoString)), _ok : false } : T__struct_1)),
(({ _date : ((((("Thu Sep 30 21:00:57 2010" : GoString))) : GoString)), _ok : true } : T__struct_1)),
(({ _date : ((((("Thu Sep 31 21:00:57 2010" : GoString))) : GoString)), _ok : false } : T__struct_1)),
(({ _date : ((((("Thu Oct 31 21:00:57 2010" : GoString))) : GoString)), _ok : true } : T__struct_1)),
(({ _date : ((((("Thu Oct 32 21:00:57 2010" : GoString))) : GoString)), _ok : false } : T__struct_1)),
(({ _date : ((((("Thu Nov 30 21:00:57 2010" : GoString))) : GoString)), _ok : true } : T__struct_1)),
(({ _date : ((((("Thu Nov 31 21:00:57 2010" : GoString))) : GoString)), _ok : false } : T__struct_1)),
(({ _date : ((((("Thu Dec 31 21:00:57 2010" : GoString))) : GoString)), _ok : true } : T__struct_1)),
(({ _date : ((((("Thu Dec 32 21:00:57 2010" : GoString))) : GoString)), _ok : false } : T__struct_1)),
(({ _date : ((((("Thu Dec 00 21:00:57 2010" : GoString))) : GoString)), _ok : false } : T__struct_1))) : Slice<T__struct_1>));
var _rubyTests : Slice<stdgo.time_test.Time_test.ParseTest> = ((new Slice<stdgo.time_test.Time_test.ParseTest>(((new stdgo.time_test.Time_test.ParseTest(((((("RubyDate" : GoString))) : GoString)), ((((("Mon Jan 02 15:04:05 -0700 2006" : GoString))) : GoString)), ((((("Thu Feb 04 21:00:57 -0800 2010" : GoString))) : GoString)), true, true, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)), ((new stdgo.time_test.Time_test.ParseTest(((((("RubyDate" : GoString))) : GoString)), ((((("Mon Jan 02 15:04:05 -0700 2006" : GoString))) : GoString)), ((((("Thu Feb 04 21:00:57 -0000 2010" : GoString))) : GoString)), false, true, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)), ((new stdgo.time_test.Time_test.ParseTest(((((("RubyDate" : GoString))) : GoString)), ((((("Mon Jan 02 15:04:05 -0700 2006" : GoString))) : GoString)), ((((("Thu Feb 04 21:00:57 +0000 2010" : GoString))) : GoString)), false, true, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest)), ((new stdgo.time_test.Time_test.ParseTest(((((("RubyDate" : GoString))) : GoString)), ((((("Mon Jan 02 15:04:05 -0700 2006" : GoString))) : GoString)), ((((("Thu Feb 04 21:00:57 +1130 2010" : GoString))) : GoString)), false, true, ((1 : GoInt)), ((0 : GoInt))) : stdgo.time_test.Time_test.ParseTest))) : Slice<stdgo.time_test.Time_test.ParseTest>));
var _parseTimeZoneTests : Slice<stdgo.time_test.Time_test.ParseTimeZoneTest> = ((new Slice<stdgo.time_test.Time_test.ParseTimeZoneTest>(
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("gmt hi there" : GoString))) : GoString)), ((0 : GoInt)), false) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("GMT hi there" : GoString))) : GoString)), ((3 : GoInt)), true) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("GMT+12 hi there" : GoString))) : GoString)), ((6 : GoInt)), true) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("GMT+00 hi there" : GoString))) : GoString)), ((6 : GoInt)), true) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("GMT+" : GoString))) : GoString)), ((3 : GoInt)), true) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("GMT+3" : GoString))) : GoString)), ((5 : GoInt)), true) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("GMT+a" : GoString))) : GoString)), ((3 : GoInt)), true) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("GMT+3a" : GoString))) : GoString)), ((5 : GoInt)), true) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("GMT-5 hi there" : GoString))) : GoString)), ((5 : GoInt)), true) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("GMT-51 hi there" : GoString))) : GoString)), ((3 : GoInt)), true) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("ChST hi there" : GoString))) : GoString)), ((4 : GoInt)), true) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("MeST hi there" : GoString))) : GoString)), ((4 : GoInt)), true) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("MSDx" : GoString))) : GoString)), ((3 : GoInt)), true) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("MSDY" : GoString))) : GoString)), ((0 : GoInt)), false) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("ESAST hi" : GoString))) : GoString)), ((5 : GoInt)), true) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("ESASTT hi" : GoString))) : GoString)), ((0 : GoInt)), false) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("ESATY hi" : GoString))) : GoString)), ((0 : GoInt)), false) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("WITA hi" : GoString))) : GoString)), ((4 : GoInt)), true) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("+03 hi" : GoString))) : GoString)), ((3 : GoInt)), true) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("-04 hi" : GoString))) : GoString)), ((3 : GoInt)), true) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("+00" : GoString))) : GoString)), ((3 : GoInt)), true) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("-11" : GoString))) : GoString)), ((3 : GoInt)), true) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("-12" : GoString))) : GoString)), ((3 : GoInt)), true) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("-23" : GoString))) : GoString)), ((3 : GoInt)), true) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("-24" : GoString))) : GoString)), ((0 : GoInt)), false) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("+13" : GoString))) : GoString)), ((3 : GoInt)), true) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("+14" : GoString))) : GoString)), ((3 : GoInt)), true) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("+23" : GoString))) : GoString)), ((3 : GoInt)), true) : stdgo.time_test.Time_test.ParseTimeZoneTest)),
((new stdgo.time_test.Time_test.ParseTimeZoneTest(((((("+24" : GoString))) : GoString)), ((0 : GoInt)), false) : stdgo.time_test.Time_test.ParseTimeZoneTest))) : Slice<stdgo.time_test.Time_test.ParseTimeZoneTest>));
var _parseErrorTests : Slice<stdgo.time_test.Time_test.ParseErrorTest> = ((new Slice<stdgo.time_test.Time_test.ParseErrorTest>(
((new stdgo.time_test.Time_test.ParseErrorTest(((((("Mon Jan _2 15:04:05 2006" : GoString))) : GoString)), ((((("Feb  4 21:00:60 2010" : GoString))) : GoString)), ((((("cannot parse" : GoString))) : GoString))) : stdgo.time_test.Time_test.ParseErrorTest)),
((new stdgo.time_test.Time_test.ParseErrorTest(((((("Mon Jan _2 15:04:05 2006" : GoString))) : GoString)), ((((("Thu Feb  4 21:00:57 @2010" : GoString))) : GoString)), ((((("cannot parse" : GoString))) : GoString))) : stdgo.time_test.Time_test.ParseErrorTest)),
((new stdgo.time_test.Time_test.ParseErrorTest(((((("Mon Jan _2 15:04:05 2006" : GoString))) : GoString)), ((((("Thu Feb  4 21:00:60 2010" : GoString))) : GoString)), ((((("second out of range" : GoString))) : GoString))) : stdgo.time_test.Time_test.ParseErrorTest)),
((new stdgo.time_test.Time_test.ParseErrorTest(((((("Mon Jan _2 15:04:05 2006" : GoString))) : GoString)), ((((("Thu Feb  4 21:61:57 2010" : GoString))) : GoString)), ((((("minute out of range" : GoString))) : GoString))) : stdgo.time_test.Time_test.ParseErrorTest)),
((new stdgo.time_test.Time_test.ParseErrorTest(((((("Mon Jan _2 15:04:05 2006" : GoString))) : GoString)), ((((("Thu Feb  4 24:00:60 2010" : GoString))) : GoString)), ((((("hour out of range" : GoString))) : GoString))) : stdgo.time_test.Time_test.ParseErrorTest)),
((new stdgo.time_test.Time_test.ParseErrorTest(((((("Mon Jan _2 15:04:05.000 2006" : GoString))) : GoString)), ((((("Thu Feb  4 23:00:59x01 2010" : GoString))) : GoString)), ((((("cannot parse" : GoString))) : GoString))) : stdgo.time_test.Time_test.ParseErrorTest)),
((new stdgo.time_test.Time_test.ParseErrorTest(((((("Mon Jan _2 15:04:05.000 2006" : GoString))) : GoString)), ((((("Thu Feb  4 23:00:59.xxx 2010" : GoString))) : GoString)), ((((("cannot parse" : GoString))) : GoString))) : stdgo.time_test.Time_test.ParseErrorTest)),
((new stdgo.time_test.Time_test.ParseErrorTest(((((("Mon Jan _2 15:04:05.000 2006" : GoString))) : GoString)), ((((("Thu Feb  4 23:00:59.-123 2010" : GoString))) : GoString)), ((((("fractional second out of range" : GoString))) : GoString))) : stdgo.time_test.Time_test.ParseErrorTest)),
((new stdgo.time_test.Time_test.ParseErrorTest(((((("Jan _2 15:04:05.000000000" : GoString))) : GoString)), ((((("Dec  7 11:22:01.000000" : GoString))) : GoString)), (("cannot parse \".000000\" as \".000000000\"" : GoString))) : stdgo.time_test.Time_test.ParseErrorTest)),
((new stdgo.time_test.Time_test.ParseErrorTest(((((("Jan _2 15:04:05.000000000" : GoString))) : GoString)), ((((("Dec  7 11:22:01.0000000000" : GoString))) : GoString)), (("extra text: \"0\"" : GoString))) : stdgo.time_test.Time_test.ParseErrorTest)),
((new stdgo.time_test.Time_test.ParseErrorTest(((((("2006-01-02T15:04:05Z07:00" : GoString))) : GoString)), ((((("2006-01-02T15:04:05Z07:00" : GoString))) : GoString)), (("parsing time \"2006-01-02T15:04:05Z07:00\": extra text: \"07:00\"" : GoString))) : stdgo.time_test.Time_test.ParseErrorTest)),
((new stdgo.time_test.Time_test.ParseErrorTest(((((("2006-01-02T15:04:05Z07:00" : GoString))) : GoString)), ((((("2006-01-02T15:04_abc" : GoString))) : GoString)), (("parsing time \"2006-01-02T15:04_abc\" as \"2006-01-02T15:04:05Z07:00\": cannot parse \"_abc\" as \":\"" : GoString))) : stdgo.time_test.Time_test.ParseErrorTest)),
((new stdgo.time_test.Time_test.ParseErrorTest(((((("2006-01-02T15:04:05Z07:00" : GoString))) : GoString)), ((((("2006-01-02T15:04:05_abc" : GoString))) : GoString)), (("parsing time \"2006-01-02T15:04:05_abc\" as \"2006-01-02T15:04:05Z07:00\": cannot parse \"_abc\" as \"Z07:00\"" : GoString))) : stdgo.time_test.Time_test.ParseErrorTest)),
((new stdgo.time_test.Time_test.ParseErrorTest(((((("2006-01-02T15:04:05Z07:00" : GoString))) : GoString)), ((((("2006-01-02T15:04:05Z_abc" : GoString))) : GoString)), (("parsing time \"2006-01-02T15:04:05Z_abc\": extra text: \"_abc\"" : GoString))) : stdgo.time_test.Time_test.ParseErrorTest)),
((new stdgo.time_test.Time_test.ParseErrorTest(((((("2006-01-02T15:04:05Z07:00" : GoString))) : GoString)), ((((("2010-02-04T21:00:67.012345678-08:00" : GoString))) : GoString)), ((((("second out of range" : GoString))) : GoString))) : stdgo.time_test.Time_test.ParseErrorTest)),
((new stdgo.time_test.Time_test.ParseErrorTest(((((("_2 Jan 06 15:04 MST" : GoString))) : GoString)), ((((("4 --- 00 00:00 GMT" : GoString))) : GoString)), ((((("cannot parse" : GoString))) : GoString))) : stdgo.time_test.Time_test.ParseErrorTest)),
((new stdgo.time_test.Time_test.ParseErrorTest(((((("_2 January 06 15:04 MST" : GoString))) : GoString)), ((((("4 --- 00 00:00 GMT" : GoString))) : GoString)), ((((("cannot parse" : GoString))) : GoString))) : stdgo.time_test.Time_test.ParseErrorTest)),
((new stdgo.time_test.Time_test.ParseErrorTest(((((("Jan _2 002 2006" : GoString))) : GoString)), ((((("Feb  4 034 2006" : GoString))) : GoString)), ((((("day-of-year does not match day" : GoString))) : GoString))) : stdgo.time_test.Time_test.ParseErrorTest)),
((new stdgo.time_test.Time_test.ParseErrorTest(((((("Jan _2 002 2006" : GoString))) : GoString)), ((((("Feb  4 004 2006" : GoString))) : GoString)), ((((("day-of-year does not match month" : GoString))) : GoString))) : stdgo.time_test.Time_test.ParseErrorTest)),
((new stdgo.time_test.Time_test.ParseErrorTest((("\"2006-01-02T15:04:05Z07:00\"" : GoString)), ((((("0" : GoString))) : GoString)), (("parsing time \"0\" as \"\\\"2006-01-02T15:04:05Z07:00\\\"\": cannot parse \"0\" as \"\\\"\"" : GoString))) : stdgo.time_test.Time_test.ParseErrorTest)),
((new stdgo.time_test.Time_test.ParseErrorTest(((((("2006-01-02T15:04:05Z07:00" : GoString))) : GoString)), ((((("\"" : GoString))) : GoString)), (("parsing time \"\\\"\" as \"2006-01-02T15:04:05Z07:00\": cannot parse \"\\\"\" as \"2006\"" : GoString))) : stdgo.time_test.Time_test.ParseErrorTest))) : Slice<stdgo.time_test.Time_test.ParseErrorTest>));
var _secondsTimeZoneOffsetTests : Slice<stdgo.time_test.Time_test.SecondsTimeZoneOffsetTest> = ((new Slice<stdgo.time_test.Time_test.SecondsTimeZoneOffsetTest>(((new stdgo.time_test.Time_test.SecondsTimeZoneOffsetTest(((((("2006-01-02T15:04:05-070000" : GoString))) : GoString)), ((((("1871-01-01T05:33:02-003408" : GoString))) : GoString)), ((-2048 : GoInt))) : stdgo.time_test.Time_test.SecondsTimeZoneOffsetTest)), ((new stdgo.time_test.Time_test.SecondsTimeZoneOffsetTest(((((("2006-01-02T15:04:05-07:00:00" : GoString))) : GoString)), ((((("1871-01-01T05:33:02-00:34:08" : GoString))) : GoString)), ((-2048 : GoInt))) : stdgo.time_test.Time_test.SecondsTimeZoneOffsetTest)), ((new stdgo.time_test.Time_test.SecondsTimeZoneOffsetTest(((((("2006-01-02T15:04:05-070000" : GoString))) : GoString)), ((((("1871-01-01T05:33:02+003408" : GoString))) : GoString)), ((2048 : GoInt))) : stdgo.time_test.Time_test.SecondsTimeZoneOffsetTest)), ((new stdgo.time_test.Time_test.SecondsTimeZoneOffsetTest(((((("2006-01-02T15:04:05-07:00:00" : GoString))) : GoString)), ((((("1871-01-01T05:33:02+00:34:08" : GoString))) : GoString)), ((2048 : GoInt))) : stdgo.time_test.Time_test.SecondsTimeZoneOffsetTest)), ((new stdgo.time_test.Time_test.SecondsTimeZoneOffsetTest(((((("2006-01-02T15:04:05Z070000" : GoString))) : GoString)), ((((("1871-01-01T05:33:02-003408" : GoString))) : GoString)), ((-2048 : GoInt))) : stdgo.time_test.Time_test.SecondsTimeZoneOffsetTest)), ((new stdgo.time_test.Time_test.SecondsTimeZoneOffsetTest(((((("2006-01-02T15:04:05Z07:00:00" : GoString))) : GoString)), ((((("1871-01-01T05:33:02+00:34:08" : GoString))) : GoString)), ((2048 : GoInt))) : stdgo.time_test.Time_test.SecondsTimeZoneOffsetTest)), ((new stdgo.time_test.Time_test.SecondsTimeZoneOffsetTest(((((("2006-01-02T15:04:05-07" : GoString))) : GoString)), ((((("1871-01-01T05:33:02+01" : GoString))) : GoString)), ((3600 : GoInt))) : stdgo.time_test.Time_test.SecondsTimeZoneOffsetTest)), ((new stdgo.time_test.Time_test.SecondsTimeZoneOffsetTest(((((("2006-01-02T15:04:05-07" : GoString))) : GoString)), ((((("1871-01-01T05:33:02-02" : GoString))) : GoString)), ((-7200 : GoInt))) : stdgo.time_test.Time_test.SecondsTimeZoneOffsetTest)), ((new stdgo.time_test.Time_test.SecondsTimeZoneOffsetTest(((((("2006-01-02T15:04:05Z07" : GoString))) : GoString)), ((((("1871-01-01T05:33:02-02" : GoString))) : GoString)), ((-7200 : GoInt))) : stdgo.time_test.Time_test.SecondsTimeZoneOffsetTest))) : Slice<stdgo.time_test.Time_test.SecondsTimeZoneOffsetTest>));
var _monthOutOfRangeTests : Slice<T__struct_3> = ((new Slice<T__struct_3>((({ _value : ((((("00-01" : GoString))) : GoString)), _ok : false } : T__struct_3)), (({ _value : ((((("13-01" : GoString))) : GoString)), _ok : false } : T__struct_3)), (({ _value : ((((("01-01" : GoString))) : GoString)), _ok : true } : T__struct_3))) : Slice<T__struct_3>));
var _monotonicStringTests : Slice<T__struct_6> = ((new Slice<T__struct_6>((({ _mono : ((0 : GoInt64)), _want : ((((("m=+0.000000000" : GoString))) : GoString)) } : T__struct_6)), (({ _mono : ((123456789 : GoInt64)), _want : ((((("m=+0.123456789" : GoString))) : GoString)) } : T__struct_6)), (({ _mono : ((-123456789 : GoInt64)), _want : ((((("m=-0.123456789" : GoString))) : GoString)) } : T__struct_6)), (({ _mono : (("123456789000" : GoInt64)), _want : ((((("m=+123.456789000" : GoString))) : GoString)) } : T__struct_6)), (({ _mono : (("-123456789000" : GoInt64)), _want : ((((("m=-123.456789000" : GoString))) : GoString)) } : T__struct_6)), (({ _mono : ((9e+18 : GoInt64)), _want : ((((("m=+9000000000.000000000" : GoString))) : GoString)) } : T__struct_6)), (({ _mono : (("-9000000000000000000" : GoInt64)), _want : ((((("m=-9000000000.000000000" : GoString))) : GoString)) } : T__struct_6)), (({ _mono : (("-9223372036854775808" : GoInt64)), _want : ((((("m=-9223372036.854775808" : GoString))) : GoString)) } : T__struct_6))) : Slice<T__struct_6>));
var _slots : Slice<GoInt> = ((new Slice<GoInt>(
((5 : GoInt)),
((3 : GoInt)),
((6 : GoInt)),
((6 : GoInt)),
((6 : GoInt)),
((1 : GoInt)),
((1 : GoInt)),
((2 : GoInt)),
((7 : GoInt)),
((9 : GoInt)),
((4 : GoInt)),
((8 : GoInt)),
((0 : GoInt))) : Slice<GoInt>));
var _utctests : Slice<stdgo.time_test.Time_test.TimeTest> = ((new Slice<stdgo.time_test.Time_test.TimeTest>(((new stdgo.time_test.Time_test.TimeTest(((0 : GoInt64)), ((new stdgo.time_test.Time_test.T_parsedTime(((1970 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((4 : Weekday)), ((0 : GoInt)), ((((("UTC" : GoString))) : GoString))) : stdgo.time_test.Time_test.T_parsedTime))) : stdgo.time_test.Time_test.TimeTest)), ((new stdgo.time_test.Time_test.TimeTest(((1221681866 : GoInt64)), ((new stdgo.time_test.Time_test.T_parsedTime(((2008 : GoInt)), ((9 : Month)), ((17 : GoInt)), ((20 : GoInt)), ((4 : GoInt)), ((26 : GoInt)), ((0 : GoInt)), ((3 : Weekday)), ((0 : GoInt)), ((((("UTC" : GoString))) : GoString))) : stdgo.time_test.Time_test.T_parsedTime))) : stdgo.time_test.Time_test.TimeTest)), ((new stdgo.time_test.Time_test.TimeTest(((-1221681866 : GoInt64)), ((new stdgo.time_test.Time_test.T_parsedTime(((1931 : GoInt)), ((4 : Month)), ((16 : GoInt)), ((3 : GoInt)), ((55 : GoInt)), ((34 : GoInt)), ((0 : GoInt)), ((4 : Weekday)), ((0 : GoInt)), ((((("UTC" : GoString))) : GoString))) : stdgo.time_test.Time_test.T_parsedTime))) : stdgo.time_test.Time_test.TimeTest)), ((new stdgo.time_test.Time_test.TimeTest((("-11644473600" : GoInt64)), ((new stdgo.time_test.Time_test.T_parsedTime(((1601 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((1 : Weekday)), ((0 : GoInt)), ((((("UTC" : GoString))) : GoString))) : stdgo.time_test.Time_test.T_parsedTime))) : stdgo.time_test.Time_test.TimeTest)), ((new stdgo.time_test.Time_test.TimeTest(((599529660 : GoInt64)), ((new stdgo.time_test.Time_test.T_parsedTime(((1988 : GoInt)), ((12 : Month)), ((31 : GoInt)), ((0 : GoInt)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((6 : Weekday)), ((0 : GoInt)), ((((("UTC" : GoString))) : GoString))) : stdgo.time_test.Time_test.T_parsedTime))) : stdgo.time_test.Time_test.TimeTest)), ((new stdgo.time_test.Time_test.TimeTest(((978220860 : GoInt64)), ((new stdgo.time_test.Time_test.T_parsedTime(((2000 : GoInt)), ((12 : Month)), ((31 : GoInt)), ((0 : GoInt)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : Weekday)), ((0 : GoInt)), ((((("UTC" : GoString))) : GoString))) : stdgo.time_test.Time_test.T_parsedTime))) : stdgo.time_test.Time_test.TimeTest))) : Slice<stdgo.time_test.Time_test.TimeTest>));
var _nanoutctests : Slice<stdgo.time_test.Time_test.TimeTest> = ((new Slice<stdgo.time_test.Time_test.TimeTest>(((new stdgo.time_test.Time_test.TimeTest(((0 : GoInt64)), ((new stdgo.time_test.Time_test.T_parsedTime(((1970 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((1e+08 : GoInt)), ((4 : Weekday)), ((0 : GoInt)), ((((("UTC" : GoString))) : GoString))) : stdgo.time_test.Time_test.T_parsedTime))) : stdgo.time_test.Time_test.TimeTest)), ((new stdgo.time_test.Time_test.TimeTest(((1221681866 : GoInt64)), ((new stdgo.time_test.Time_test.T_parsedTime(((2008 : GoInt)), ((9 : Month)), ((17 : GoInt)), ((20 : GoInt)), ((4 : GoInt)), ((26 : GoInt)), ((2e+08 : GoInt)), ((3 : Weekday)), ((0 : GoInt)), ((((("UTC" : GoString))) : GoString))) : stdgo.time_test.Time_test.T_parsedTime))) : stdgo.time_test.Time_test.TimeTest))) : Slice<stdgo.time_test.Time_test.TimeTest>));
var _localtests : Slice<stdgo.time_test.Time_test.TimeTest> = ((new Slice<stdgo.time_test.Time_test.TimeTest>(((new stdgo.time_test.Time_test.TimeTest(((0 : GoInt64)), ((new stdgo.time_test.Time_test.T_parsedTime(((1969 : GoInt)), ((12 : Month)), ((31 : GoInt)), ((16 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((3 : Weekday)), ((-28800 : GoInt)), ((((("PST" : GoString))) : GoString))) : stdgo.time_test.Time_test.T_parsedTime))) : stdgo.time_test.Time_test.TimeTest)), ((new stdgo.time_test.Time_test.TimeTest(((1221681866 : GoInt64)), ((new stdgo.time_test.Time_test.T_parsedTime(((2008 : GoInt)), ((9 : Month)), ((17 : GoInt)), ((13 : GoInt)), ((4 : GoInt)), ((26 : GoInt)), ((0 : GoInt)), ((3 : Weekday)), ((-25200 : GoInt)), ((((("PDT" : GoString))) : GoString))) : stdgo.time_test.Time_test.T_parsedTime))) : stdgo.time_test.Time_test.TimeTest)), ((new stdgo.time_test.Time_test.TimeTest((("2159200800" : GoInt64)), ((new stdgo.time_test.Time_test.T_parsedTime(((2038 : GoInt)), ((6 : Month)), ((3 : GoInt)), ((11 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((4 : Weekday)), ((-25200 : GoInt)), ((((("PDT" : GoString))) : GoString))) : stdgo.time_test.Time_test.T_parsedTime))) : stdgo.time_test.Time_test.TimeTest)), ((new stdgo.time_test.Time_test.TimeTest((("2152173599" : GoInt64)), ((new stdgo.time_test.Time_test.T_parsedTime(((2038 : GoInt)), ((3 : Month)), ((14 : GoInt)), ((1 : GoInt)), ((59 : GoInt)), ((59 : GoInt)), ((0 : GoInt)), ((0 : Weekday)), ((-28800 : GoInt)), ((((("PST" : GoString))) : GoString))) : stdgo.time_test.Time_test.T_parsedTime))) : stdgo.time_test.Time_test.TimeTest)), ((new stdgo.time_test.Time_test.TimeTest((("2152173600" : GoInt64)), ((new stdgo.time_test.Time_test.T_parsedTime(((2038 : GoInt)), ((3 : Month)), ((14 : GoInt)), ((3 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : Weekday)), ((-25200 : GoInt)), ((((("PDT" : GoString))) : GoString))) : stdgo.time_test.Time_test.T_parsedTime))) : stdgo.time_test.Time_test.TimeTest)), ((new stdgo.time_test.Time_test.TimeTest((("2152173601" : GoInt64)), ((new stdgo.time_test.Time_test.T_parsedTime(((2038 : GoInt)), ((3 : Month)), ((14 : GoInt)), ((3 : GoInt)), ((0 : GoInt)), ((1 : GoInt)), ((0 : GoInt)), ((0 : Weekday)), ((-25200 : GoInt)), ((((("PDT" : GoString))) : GoString))) : stdgo.time_test.Time_test.T_parsedTime))) : stdgo.time_test.Time_test.TimeTest)), ((new stdgo.time_test.Time_test.TimeTest((("2172733199" : GoInt64)), ((new stdgo.time_test.Time_test.T_parsedTime(((2038 : GoInt)), ((11 : Month)), ((7 : GoInt)), ((1 : GoInt)), ((59 : GoInt)), ((59 : GoInt)), ((0 : GoInt)), ((0 : Weekday)), ((-25200 : GoInt)), ((((("PDT" : GoString))) : GoString))) : stdgo.time_test.Time_test.T_parsedTime))) : stdgo.time_test.Time_test.TimeTest)), ((new stdgo.time_test.Time_test.TimeTest((("2172733200" : GoInt64)), ((new stdgo.time_test.Time_test.T_parsedTime(((2038 : GoInt)), ((11 : Month)), ((7 : GoInt)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : Weekday)), ((-28800 : GoInt)), ((((("PST" : GoString))) : GoString))) : stdgo.time_test.Time_test.T_parsedTime))) : stdgo.time_test.Time_test.TimeTest)), ((new stdgo.time_test.Time_test.TimeTest((("2172733201" : GoInt64)), ((new stdgo.time_test.Time_test.T_parsedTime(((2038 : GoInt)), ((11 : Month)), ((7 : GoInt)), ((1 : GoInt)), ((0 : GoInt)), ((1 : GoInt)), ((0 : GoInt)), ((0 : Weekday)), ((-28800 : GoInt)), ((((("PST" : GoString))) : GoString))) : stdgo.time_test.Time_test.T_parsedTime))) : stdgo.time_test.Time_test.TimeTest))) : Slice<stdgo.time_test.Time_test.TimeTest>));
var _nanolocaltests : Slice<stdgo.time_test.Time_test.TimeTest> = ((new Slice<stdgo.time_test.Time_test.TimeTest>(((new stdgo.time_test.Time_test.TimeTest(((0 : GoInt64)), ((new stdgo.time_test.Time_test.T_parsedTime(((1969 : GoInt)), ((12 : Month)), ((31 : GoInt)), ((16 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((1e+08 : GoInt)), ((3 : Weekday)), ((-28800 : GoInt)), ((((("PST" : GoString))) : GoString))) : stdgo.time_test.Time_test.T_parsedTime))) : stdgo.time_test.Time_test.TimeTest)), ((new stdgo.time_test.Time_test.TimeTest(((1221681866 : GoInt64)), ((new stdgo.time_test.Time_test.T_parsedTime(((2008 : GoInt)), ((9 : Month)), ((17 : GoInt)), ((13 : GoInt)), ((4 : GoInt)), ((26 : GoInt)), ((3e+08 : GoInt)), ((3 : Weekday)), ((-25200 : GoInt)), ((((("PDT" : GoString))) : GoString))) : stdgo.time_test.Time_test.T_parsedTime))) : stdgo.time_test.Time_test.TimeTest))) : Slice<stdgo.time_test.Time_test.TimeTest>));
var _truncateRoundTests : Slice<T__struct_9> = ((new Slice<T__struct_9>((({ _t : (date(((-1 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((15 : GoInt)), ((30 : GoInt)), ((5e+08 : GoInt)), utc) == null ? null : date(((-1 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((15 : GoInt)), ((30 : GoInt)), ((5e+08 : GoInt)), utc).__copy__()), _d : ((3 : Duration)) } : T__struct_9)), (({ _t : (date(((-1 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((15 : GoInt)), ((31 : GoInt)), ((5e+08 : GoInt)), utc) == null ? null : date(((-1 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((15 : GoInt)), ((31 : GoInt)), ((5e+08 : GoInt)), utc).__copy__()), _d : ((3 : Duration)) } : T__struct_9)), (({ _t : (date(((2012 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((15 : GoInt)), ((30 : GoInt)), ((5e+08 : GoInt)), utc) == null ? null : date(((2012 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((15 : GoInt)), ((30 : GoInt)), ((5e+08 : GoInt)), utc).__copy__()), _d : ((1000000000 : Duration)) } : T__struct_9)), (({ _t : (date(((2012 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((15 : GoInt)), ((31 : GoInt)), ((5e+08 : GoInt)), utc) == null ? null : date(((2012 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((15 : GoInt)), ((31 : GoInt)), ((5e+08 : GoInt)), utc).__copy__()), _d : ((1000000000 : Duration)) } : T__struct_9)), (({ _t : (unix((("-19012425939" : GoInt64)), ((649146258 : GoInt64))) == null ? null : unix((("-19012425939" : GoInt64)), ((649146258 : GoInt64))).__copy__()), _d : (("7435029458905025217" : Duration)) } : T__struct_9))) : Slice<T__struct_9>));
var _isoWeekTests : Slice<stdgo.time_test.Time_test.ISOWeekTest> = ((new Slice<stdgo.time_test.Time_test.ISOWeekTest>(
((new stdgo.time_test.Time_test.ISOWeekTest(((1981 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((1981 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((1982 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((1981 : GoInt)), ((53 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((1983 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((1982 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((1984 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((1983 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((1985 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((1985 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((1986 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((1986 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((1987 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((1987 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((1988 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((1987 : GoInt)), ((53 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((1989 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((1988 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((1990 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((1990 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((1991 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((1991 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((1992 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((1992 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((1993 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((1992 : GoInt)), ((53 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((1994 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((1993 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((1995 : GoInt)), ((1 : GoInt)), ((2 : GoInt)), ((1995 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((1996 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((1996 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((1996 : GoInt)), ((1 : GoInt)), ((7 : GoInt)), ((1996 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((1996 : GoInt)), ((1 : GoInt)), ((8 : GoInt)), ((1996 : GoInt)), ((2 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((1997 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((1997 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((1998 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((1998 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((1999 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((1998 : GoInt)), ((53 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2000 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((1999 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2001 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2001 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2002 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2002 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2003 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2003 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2004 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2004 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2005 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2004 : GoInt)), ((53 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2006 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2005 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2007 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2007 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2008 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2008 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2009 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2009 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2010 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2009 : GoInt)), ((53 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2010 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2009 : GoInt)), ((53 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2011 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2010 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2011 : GoInt)), ((1 : GoInt)), ((2 : GoInt)), ((2010 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2011 : GoInt)), ((1 : GoInt)), ((3 : GoInt)), ((2011 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2011 : GoInt)), ((1 : GoInt)), ((4 : GoInt)), ((2011 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2011 : GoInt)), ((1 : GoInt)), ((5 : GoInt)), ((2011 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2011 : GoInt)), ((1 : GoInt)), ((6 : GoInt)), ((2011 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2011 : GoInt)), ((1 : GoInt)), ((7 : GoInt)), ((2011 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2011 : GoInt)), ((1 : GoInt)), ((8 : GoInt)), ((2011 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2011 : GoInt)), ((1 : GoInt)), ((9 : GoInt)), ((2011 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2011 : GoInt)), ((1 : GoInt)), ((10 : GoInt)), ((2011 : GoInt)), ((2 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2011 : GoInt)), ((1 : GoInt)), ((11 : GoInt)), ((2011 : GoInt)), ((2 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2011 : GoInt)), ((6 : GoInt)), ((12 : GoInt)), ((2011 : GoInt)), ((23 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2011 : GoInt)), ((6 : GoInt)), ((13 : GoInt)), ((2011 : GoInt)), ((24 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2011 : GoInt)), ((12 : GoInt)), ((25 : GoInt)), ((2011 : GoInt)), ((51 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2011 : GoInt)), ((12 : GoInt)), ((26 : GoInt)), ((2011 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2011 : GoInt)), ((12 : GoInt)), ((27 : GoInt)), ((2011 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2011 : GoInt)), ((12 : GoInt)), ((28 : GoInt)), ((2011 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2011 : GoInt)), ((12 : GoInt)), ((29 : GoInt)), ((2011 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2011 : GoInt)), ((12 : GoInt)), ((30 : GoInt)), ((2011 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2011 : GoInt)), ((12 : GoInt)), ((31 : GoInt)), ((2011 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((1995 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((1994 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2012 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2011 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2012 : GoInt)), ((1 : GoInt)), ((2 : GoInt)), ((2012 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2012 : GoInt)), ((1 : GoInt)), ((8 : GoInt)), ((2012 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2012 : GoInt)), ((1 : GoInt)), ((9 : GoInt)), ((2012 : GoInt)), ((2 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2012 : GoInt)), ((12 : GoInt)), ((23 : GoInt)), ((2012 : GoInt)), ((51 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2012 : GoInt)), ((12 : GoInt)), ((24 : GoInt)), ((2012 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2012 : GoInt)), ((12 : GoInt)), ((30 : GoInt)), ((2012 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2012 : GoInt)), ((12 : GoInt)), ((31 : GoInt)), ((2013 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2013 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2013 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2013 : GoInt)), ((1 : GoInt)), ((6 : GoInt)), ((2013 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2013 : GoInt)), ((1 : GoInt)), ((7 : GoInt)), ((2013 : GoInt)), ((2 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2013 : GoInt)), ((12 : GoInt)), ((22 : GoInt)), ((2013 : GoInt)), ((51 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2013 : GoInt)), ((12 : GoInt)), ((23 : GoInt)), ((2013 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2013 : GoInt)), ((12 : GoInt)), ((29 : GoInt)), ((2013 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2013 : GoInt)), ((12 : GoInt)), ((30 : GoInt)), ((2014 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2014 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2014 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2014 : GoInt)), ((1 : GoInt)), ((5 : GoInt)), ((2014 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2014 : GoInt)), ((1 : GoInt)), ((6 : GoInt)), ((2014 : GoInt)), ((2 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2015 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2015 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2016 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2015 : GoInt)), ((53 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2017 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2016 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2018 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2018 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2019 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2019 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2020 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2020 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2021 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2020 : GoInt)), ((53 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2022 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2021 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2023 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2022 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2024 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2024 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2025 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2025 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2026 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2026 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2027 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2026 : GoInt)), ((53 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2028 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2027 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2029 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2029 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2030 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2030 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2031 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2031 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2032 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2032 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2033 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2032 : GoInt)), ((53 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2034 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2033 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2035 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2035 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2036 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2036 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2037 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2037 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2038 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2037 : GoInt)), ((53 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2039 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2038 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest)),
((new stdgo.time_test.Time_test.ISOWeekTest(((2040 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((2039 : GoInt)), ((52 : GoInt))) : stdgo.time_test.Time_test.ISOWeekTest))) : Slice<stdgo.time_test.Time_test.ISOWeekTest>));
var _yearDayTests : Slice<stdgo.time_test.Time_test.YearDayTest> = ((new Slice<stdgo.time_test.Time_test.YearDayTest>(
((new stdgo.time_test.Time_test.YearDayTest(((2007 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((2007 : GoInt)), ((1 : GoInt)), ((15 : GoInt)), ((15 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((2007 : GoInt)), ((2 : GoInt)), ((1 : GoInt)), ((32 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((2007 : GoInt)), ((2 : GoInt)), ((15 : GoInt)), ((46 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((2007 : GoInt)), ((3 : GoInt)), ((1 : GoInt)), ((60 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((2007 : GoInt)), ((3 : GoInt)), ((15 : GoInt)), ((74 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((2007 : GoInt)), ((4 : GoInt)), ((1 : GoInt)), ((91 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((2007 : GoInt)), ((12 : GoInt)), ((31 : GoInt)), ((365 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((2008 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((2008 : GoInt)), ((1 : GoInt)), ((15 : GoInt)), ((15 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((2008 : GoInt)), ((2 : GoInt)), ((1 : GoInt)), ((32 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((2008 : GoInt)), ((2 : GoInt)), ((15 : GoInt)), ((46 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((2008 : GoInt)), ((3 : GoInt)), ((1 : GoInt)), ((61 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((2008 : GoInt)), ((3 : GoInt)), ((15 : GoInt)), ((75 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((2008 : GoInt)), ((4 : GoInt)), ((1 : GoInt)), ((92 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((2008 : GoInt)), ((12 : GoInt)), ((31 : GoInt)), ((366 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((1900 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((1900 : GoInt)), ((1 : GoInt)), ((15 : GoInt)), ((15 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((1900 : GoInt)), ((2 : GoInt)), ((1 : GoInt)), ((32 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((1900 : GoInt)), ((2 : GoInt)), ((15 : GoInt)), ((46 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((1900 : GoInt)), ((3 : GoInt)), ((1 : GoInt)), ((60 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((1900 : GoInt)), ((3 : GoInt)), ((15 : GoInt)), ((74 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((1900 : GoInt)), ((4 : GoInt)), ((1 : GoInt)), ((91 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((1900 : GoInt)), ((12 : GoInt)), ((31 : GoInt)), ((365 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((1 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((1 : GoInt)), ((1 : GoInt)), ((15 : GoInt)), ((15 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((1 : GoInt)), ((2 : GoInt)), ((1 : GoInt)), ((32 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((1 : GoInt)), ((2 : GoInt)), ((15 : GoInt)), ((46 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((1 : GoInt)), ((3 : GoInt)), ((1 : GoInt)), ((60 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((1 : GoInt)), ((3 : GoInt)), ((15 : GoInt)), ((74 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((1 : GoInt)), ((4 : GoInt)), ((1 : GoInt)), ((91 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((1 : GoInt)), ((12 : GoInt)), ((31 : GoInt)), ((365 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((-1 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((-1 : GoInt)), ((1 : GoInt)), ((15 : GoInt)), ((15 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((-1 : GoInt)), ((2 : GoInt)), ((1 : GoInt)), ((32 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((-1 : GoInt)), ((2 : GoInt)), ((15 : GoInt)), ((46 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((-1 : GoInt)), ((3 : GoInt)), ((1 : GoInt)), ((60 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((-1 : GoInt)), ((3 : GoInt)), ((15 : GoInt)), ((74 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((-1 : GoInt)), ((4 : GoInt)), ((1 : GoInt)), ((91 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((-1 : GoInt)), ((12 : GoInt)), ((31 : GoInt)), ((365 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((-400 : GoInt)), ((1 : GoInt)), ((1 : GoInt)), ((1 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((-400 : GoInt)), ((1 : GoInt)), ((15 : GoInt)), ((15 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((-400 : GoInt)), ((2 : GoInt)), ((1 : GoInt)), ((32 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((-400 : GoInt)), ((2 : GoInt)), ((15 : GoInt)), ((46 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((-400 : GoInt)), ((3 : GoInt)), ((1 : GoInt)), ((61 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((-400 : GoInt)), ((3 : GoInt)), ((15 : GoInt)), ((75 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((-400 : GoInt)), ((4 : GoInt)), ((1 : GoInt)), ((92 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((-400 : GoInt)), ((12 : GoInt)), ((31 : GoInt)), ((366 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((1582 : GoInt)), ((10 : GoInt)), ((4 : GoInt)), ((277 : GoInt))) : stdgo.time_test.Time_test.YearDayTest)),
((new stdgo.time_test.Time_test.YearDayTest(((1582 : GoInt)), ((10 : GoInt)), ((15 : GoInt)), ((288 : GoInt))) : stdgo.time_test.Time_test.YearDayTest))) : Slice<stdgo.time_test.Time_test.YearDayTest>));
var _yearDayLocations : Slice<Ref<Location>> = ((new Slice<Ref<Location>>(fixedZone(((((("UTC-8" : GoString))) : GoString)), ((-28800 : GoInt))), fixedZone(((((("UTC-4" : GoString))) : GoString)), ((-14400 : GoInt))), utc, fixedZone(((((("UTC+4" : GoString))) : GoString)), ((14400 : GoInt))), fixedZone(((((("UTC+8" : GoString))) : GoString)), ((28800 : GoInt)))) : Slice<Ref<Location>>));
var _durationTests : Slice<T__struct_10> = ((new Slice<T__struct_10>(
(({ _str : ((((("0s" : GoString))) : GoString)), _d : ((0 : Duration)) } : T__struct_10)),
(({ _str : ((((("1ns" : GoString))) : GoString)), _d : ((1 : Duration)) } : T__struct_10)),
(({ _str : ((((("1.1µs" : GoString))) : GoString)), _d : ((1100 : Duration)) } : T__struct_10)),
(({ _str : ((((("2.2ms" : GoString))) : GoString)), _d : ((2200000 : Duration)) } : T__struct_10)),
(({ _str : ((((("3.3s" : GoString))) : GoString)), _d : (("3300000000" : Duration)) } : T__struct_10)),
(({ _str : ((((("4m5s" : GoString))) : GoString)), _d : (("245000000000" : Duration)) } : T__struct_10)),
(({ _str : ((((("4m5.001s" : GoString))) : GoString)), _d : (("245001000000" : Duration)) } : T__struct_10)),
(({ _str : ((((("5h6m7.001s" : GoString))) : GoString)), _d : (("18367001000000" : Duration)) } : T__struct_10)),
(({ _str : ((((("8m0.000000001s" : GoString))) : GoString)), _d : (("480000000001" : Duration)) } : T__struct_10)),
(({ _str : ((((("2562047h47m16.854775807s" : GoString))) : GoString)), _d : (("9223372036854775807" : Duration)) } : T__struct_10)),
(({ _str : ((((("-2562047h47m16.854775808s" : GoString))) : GoString)), _d : (("-9223372036854775808" : Duration)) } : T__struct_10))) : Slice<T__struct_10>));
var _dateTests : Slice<T__struct_11> = ((new Slice<T__struct_11>(
(({ _year : ((2011 : GoInt)), _month : ((11 : GoInt)), _day : ((6 : GoInt)), _hour : ((1 : GoInt)), _min : ((0 : GoInt)), _sec : ((0 : GoInt)), _nsec : ((0 : GoInt)), _z : local, _unix : ((1320566400 : GoInt64)) } : T__struct_11)),
(({ _year : ((2011 : GoInt)), _month : ((11 : GoInt)), _day : ((6 : GoInt)), _hour : ((1 : GoInt)), _min : ((59 : GoInt)), _sec : ((59 : GoInt)), _nsec : ((0 : GoInt)), _z : local, _unix : ((1320569999 : GoInt64)) } : T__struct_11)),
(({ _year : ((2011 : GoInt)), _month : ((11 : GoInt)), _day : ((6 : GoInt)), _hour : ((2 : GoInt)), _min : ((0 : GoInt)), _sec : ((0 : GoInt)), _nsec : ((0 : GoInt)), _z : local, _unix : ((1320573600 : GoInt64)) } : T__struct_11)),
(({ _year : ((2011 : GoInt)), _month : ((3 : GoInt)), _day : ((13 : GoInt)), _hour : ((1 : GoInt)), _min : ((0 : GoInt)), _sec : ((0 : GoInt)), _nsec : ((0 : GoInt)), _z : local, _unix : ((1300006800 : GoInt64)) } : T__struct_11)),
(({ _year : ((2011 : GoInt)), _month : ((3 : GoInt)), _day : ((13 : GoInt)), _hour : ((1 : GoInt)), _min : ((59 : GoInt)), _sec : ((59 : GoInt)), _nsec : ((0 : GoInt)), _z : local, _unix : ((1300010399 : GoInt64)) } : T__struct_11)),
(({ _year : ((2011 : GoInt)), _month : ((3 : GoInt)), _day : ((13 : GoInt)), _hour : ((3 : GoInt)), _min : ((0 : GoInt)), _sec : ((0 : GoInt)), _nsec : ((0 : GoInt)), _z : local, _unix : ((1300010400 : GoInt64)) } : T__struct_11)),
(({ _year : ((2011 : GoInt)), _month : ((3 : GoInt)), _day : ((13 : GoInt)), _hour : ((2 : GoInt)), _min : ((30 : GoInt)), _sec : ((0 : GoInt)), _nsec : ((0 : GoInt)), _z : local, _unix : ((1300008600 : GoInt64)) } : T__struct_11)),
(({ _year : ((2012 : GoInt)), _month : ((12 : GoInt)), _day : ((24 : GoInt)), _hour : ((0 : GoInt)), _min : ((0 : GoInt)), _sec : ((0 : GoInt)), _nsec : ((0 : GoInt)), _z : local, _unix : ((1356336000 : GoInt64)) } : T__struct_11)),
(({ _year : ((2011 : GoInt)), _month : ((11 : GoInt)), _day : ((18 : GoInt)), _hour : ((7 : GoInt)), _min : ((56 : GoInt)), _sec : ((35 : GoInt)), _nsec : ((0 : GoInt)), _z : local, _unix : ((1321631795 : GoInt64)) } : T__struct_11)),
(({ _year : ((2011 : GoInt)), _month : ((11 : GoInt)), _day : ((19 : GoInt)), _hour : ((-17 : GoInt)), _min : ((56 : GoInt)), _sec : ((35 : GoInt)), _nsec : ((0 : GoInt)), _z : local, _unix : ((1321631795 : GoInt64)) } : T__struct_11)),
(({ _year : ((2011 : GoInt)), _month : ((11 : GoInt)), _day : ((17 : GoInt)), _hour : ((31 : GoInt)), _min : ((56 : GoInt)), _sec : ((35 : GoInt)), _nsec : ((0 : GoInt)), _z : local, _unix : ((1321631795 : GoInt64)) } : T__struct_11)),
(({ _year : ((2011 : GoInt)), _month : ((11 : GoInt)), _day : ((18 : GoInt)), _hour : ((6 : GoInt)), _min : ((116 : GoInt)), _sec : ((35 : GoInt)), _nsec : ((0 : GoInt)), _z : local, _unix : ((1321631795 : GoInt64)) } : T__struct_11)),
(({ _year : ((2011 : GoInt)), _month : ((10 : GoInt)), _day : ((49 : GoInt)), _hour : ((7 : GoInt)), _min : ((56 : GoInt)), _sec : ((35 : GoInt)), _nsec : ((0 : GoInt)), _z : local, _unix : ((1321631795 : GoInt64)) } : T__struct_11)),
(({ _year : ((2011 : GoInt)), _month : ((11 : GoInt)), _day : ((18 : GoInt)), _hour : ((7 : GoInt)), _min : ((55 : GoInt)), _sec : ((95 : GoInt)), _nsec : ((0 : GoInt)), _z : local, _unix : ((1321631795 : GoInt64)) } : T__struct_11)),
(({ _year : ((2011 : GoInt)), _month : ((11 : GoInt)), _day : ((18 : GoInt)), _hour : ((7 : GoInt)), _min : ((56 : GoInt)), _sec : ((34 : GoInt)), _nsec : ((1e+09 : GoInt)), _z : local, _unix : ((1321631795 : GoInt64)) } : T__struct_11)),
(({ _year : ((2011 : GoInt)), _month : ((12 : GoInt)), _day : ((-12 : GoInt)), _hour : ((7 : GoInt)), _min : ((56 : GoInt)), _sec : ((35 : GoInt)), _nsec : ((0 : GoInt)), _z : local, _unix : ((1321631795 : GoInt64)) } : T__struct_11)),
(({ _year : ((2012 : GoInt)), _month : ((1 : GoInt)), _day : ((-43 : GoInt)), _hour : ((7 : GoInt)), _min : ((56 : GoInt)), _sec : ((35 : GoInt)), _nsec : ((0 : GoInt)), _z : local, _unix : ((1321631795 : GoInt64)) } : T__struct_11)),
(({ _year : ((2012 : GoInt)), _month : ((((-1 : Month)) : GoInt)), _day : ((18 : GoInt)), _hour : ((7 : GoInt)), _min : ((56 : GoInt)), _sec : ((35 : GoInt)), _nsec : ((0 : GoInt)), _z : local, _unix : ((1321631795 : GoInt64)) } : T__struct_11)),
(({ _year : ((2010 : GoInt)), _month : ((((23 : Month)) : GoInt)), _day : ((18 : GoInt)), _hour : ((7 : GoInt)), _min : ((56 : GoInt)), _sec : ((35 : GoInt)), _nsec : ((0 : GoInt)), _z : local, _unix : ((1321631795 : GoInt64)) } : T__struct_11))) : Slice<T__struct_11>));
var _addDateTests : Slice<T__struct_12> = ((new Slice<T__struct_12>((({ _years : ((4 : GoInt)), _months : ((4 : GoInt)), _days : ((1 : GoInt)) } : T__struct_12)), (({ _years : ((3 : GoInt)), _months : ((16 : GoInt)), _days : ((1 : GoInt)) } : T__struct_12)), (({ _years : ((3 : GoInt)), _months : ((15 : GoInt)), _days : ((30 : GoInt)) } : T__struct_12)), (({ _years : ((5 : GoInt)), _months : ((-6 : GoInt)), _days : ((-60 : GoInt)) } : T__struct_12))) : Slice<T__struct_12>));
var _daysInTests : Slice<T__struct_13> = ((new Slice<T__struct_13>((({ _year : ((2011 : GoInt)), _month : ((1 : GoInt)), _di : ((31 : GoInt)) } : T__struct_13)), (({ _year : ((2011 : GoInt)), _month : ((2 : GoInt)), _di : ((28 : GoInt)) } : T__struct_13)), (({ _year : ((2012 : GoInt)), _month : ((2 : GoInt)), _di : ((29 : GoInt)) } : T__struct_13)), (({ _year : ((2011 : GoInt)), _month : ((6 : GoInt)), _di : ((30 : GoInt)) } : T__struct_13)), (({ _year : ((2011 : GoInt)), _month : ((12 : GoInt)), _di : ((31 : GoInt)) } : T__struct_13))) : Slice<T__struct_13>));
var _gobTests : Slice<Time> = ((new Slice<Time>((date(((0 : GoInt)), ((1 : Month)), ((2 : GoInt)), ((3 : GoInt)), ((4 : GoInt)), ((5 : GoInt)), ((6 : GoInt)), utc) == null ? null : date(((0 : GoInt)), ((1 : Month)), ((2 : GoInt)), ((3 : GoInt)), ((4 : GoInt)), ((5 : GoInt)), ((6 : GoInt)), utc).__copy__()), (date(((7 : GoInt)), ((8 : Month)), ((9 : GoInt)), ((10 : GoInt)), ((11 : GoInt)), ((12 : GoInt)), ((13 : GoInt)), fixedZone(((((("" : GoString))) : GoString)), ((0 : GoInt)))) == null ? null : date(((7 : GoInt)), ((8 : Month)), ((9 : GoInt)), ((10 : GoInt)), ((11 : GoInt)), ((12 : GoInt)), ((13 : GoInt)), fixedZone(((((("" : GoString))) : GoString)), ((0 : GoInt)))).__copy__()), (unix((("81985467080890095" : GoInt64)), ((1985229328 : GoInt64))) == null ? null : unix((("81985467080890095" : GoInt64)), ((1985229328 : GoInt64))).__copy__()), ((new Time() : Time)), (date(((1 : GoInt)), ((2 : Month)), ((3 : GoInt)), ((4 : GoInt)), ((5 : GoInt)), ((6 : GoInt)), ((7 : GoInt)), fixedZone(((((("" : GoString))) : GoString)), ((1966020 : GoInt)))) == null ? null : date(((1 : GoInt)), ((2 : Month)), ((3 : GoInt)), ((4 : GoInt)), ((5 : GoInt)), ((6 : GoInt)), ((7 : GoInt)), fixedZone(((((("" : GoString))) : GoString)), ((1966020 : GoInt)))).__copy__()), (date(((1 : GoInt)), ((2 : Month)), ((3 : GoInt)), ((4 : GoInt)), ((5 : GoInt)), ((6 : GoInt)), ((7 : GoInt)), fixedZone(((((("" : GoString))) : GoString)), ((-1966080 : GoInt)))) == null ? null : date(((1 : GoInt)), ((2 : Month)), ((3 : GoInt)), ((4 : GoInt)), ((5 : GoInt)), ((6 : GoInt)), ((7 : GoInt)), fixedZone(((((("" : GoString))) : GoString)), ((-1966080 : GoInt)))).__copy__())) : Slice<Time>));
var _invalidEncodingTests : Slice<T__struct_14> = ((new Slice<T__struct_14>((({ _bytes : ((new Slice<GoUInt8>() : Slice<GoUInt8>)), _want : ((((("Time.UnmarshalBinary: no data" : GoString))) : GoString)) } : T__struct_14)), (({ _bytes : ((new Slice<GoUInt8>(((0 : GoUInt8)), ((2 : GoUInt8)), ((3 : GoUInt8))) : Slice<GoUInt8>)), _want : ((((("Time.UnmarshalBinary: unsupported version" : GoString))) : GoString)) } : T__struct_14)), (({ _bytes : ((new Slice<GoUInt8>(((1 : GoUInt8)), ((2 : GoUInt8)), ((3 : GoUInt8))) : Slice<GoUInt8>)), _want : ((((("Time.UnmarshalBinary: invalid length" : GoString))) : GoString)) } : T__struct_14))) : Slice<T__struct_14>));
var _notEncodableTimes : Slice<T__struct_15> = ((new Slice<T__struct_15>((({ _time : (date(((0 : GoInt)), ((1 : Month)), ((2 : GoInt)), ((3 : GoInt)), ((4 : GoInt)), ((5 : GoInt)), ((6 : GoInt)), fixedZone(((((("" : GoString))) : GoString)), ((-60 : GoInt)))) == null ? null : date(((0 : GoInt)), ((1 : Month)), ((2 : GoInt)), ((3 : GoInt)), ((4 : GoInt)), ((5 : GoInt)), ((6 : GoInt)), fixedZone(((((("" : GoString))) : GoString)), ((-60 : GoInt)))).__copy__()), _want : ((((("Time.MarshalBinary: unexpected zone offset" : GoString))) : GoString)) } : T__struct_15)), (({ _time : (date(((0 : GoInt)), ((1 : Month)), ((2 : GoInt)), ((3 : GoInt)), ((4 : GoInt)), ((5 : GoInt)), ((6 : GoInt)), fixedZone(((((("" : GoString))) : GoString)), ((-1966140 : GoInt)))) == null ? null : date(((0 : GoInt)), ((1 : Month)), ((2 : GoInt)), ((3 : GoInt)), ((4 : GoInt)), ((5 : GoInt)), ((6 : GoInt)), fixedZone(((((("" : GoString))) : GoString)), ((-1966140 : GoInt)))).__copy__()), _want : ((((("Time.MarshalBinary: unexpected zone offset" : GoString))) : GoString)) } : T__struct_15)), (({ _time : (date(((0 : GoInt)), ((1 : Month)), ((2 : GoInt)), ((3 : GoInt)), ((4 : GoInt)), ((5 : GoInt)), ((6 : GoInt)), fixedZone(((((("" : GoString))) : GoString)), ((1966080 : GoInt)))) == null ? null : date(((0 : GoInt)), ((1 : Month)), ((2 : GoInt)), ((3 : GoInt)), ((4 : GoInt)), ((5 : GoInt)), ((6 : GoInt)), fixedZone(((((("" : GoString))) : GoString)), ((1966080 : GoInt)))).__copy__()), _want : ((((("Time.MarshalBinary: unexpected zone offset" : GoString))) : GoString)) } : T__struct_15))) : Slice<T__struct_15>));
var _jsonTests : Slice<T__struct_16> = ((new Slice<T__struct_16>((({ _time : (date(((9999 : GoInt)), ((4 : Month)), ((12 : GoInt)), ((23 : GoInt)), ((20 : GoInt)), ((50 : GoInt)), ((520000000 : GoInt)), utc) == null ? null : date(((9999 : GoInt)), ((4 : Month)), ((12 : GoInt)), ((23 : GoInt)), ((20 : GoInt)), ((50 : GoInt)), ((520000000 : GoInt)), utc).__copy__()), _json : (("\"9999-04-12T23:20:50.52Z\"" : GoString)) } : T__struct_16)), (({ _time : (date(((1996 : GoInt)), ((12 : Month)), ((19 : GoInt)), ((16 : GoInt)), ((39 : GoInt)), ((57 : GoInt)), ((0 : GoInt)), local) == null ? null : date(((1996 : GoInt)), ((12 : Month)), ((19 : GoInt)), ((16 : GoInt)), ((39 : GoInt)), ((57 : GoInt)), ((0 : GoInt)), local).__copy__()), _json : (("\"1996-12-19T16:39:57-08:00\"" : GoString)) } : T__struct_16)), (({ _time : (date(((0 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((1 : GoInt)), fixedZone(((((("" : GoString))) : GoString)), ((60 : GoInt)))) == null ? null : date(((0 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((1 : GoInt)), fixedZone(((((("" : GoString))) : GoString)), ((60 : GoInt)))).__copy__()), _json : (("\"0000-01-01T00:00:00.000000001+00:01\"" : GoString)) } : T__struct_16))) : Slice<T__struct_16>));
var _notJSONEncodableTimes : Slice<T__struct_15> = ((new Slice<T__struct_15>((({ _time : (date(((10000 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((10000 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()), _want : ((((("Time.MarshalJSON: year outside of range [0,9999]" : GoString))) : GoString)) } : T__struct_15)), (({ _time : (date(((-1 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((-1 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()), _want : ((((("Time.MarshalJSON: year outside of range [0,9999]" : GoString))) : GoString)) } : T__struct_15))) : Slice<T__struct_15>));
var _parseDurationTests : Slice<T__struct_17> = ((new Slice<T__struct_17>(
(({ _in : ((((("0" : GoString))) : GoString)), _want : ((0 : Duration)) } : T__struct_17)),
(({ _in : ((((("5s" : GoString))) : GoString)), _want : (("5000000000" : Duration)) } : T__struct_17)),
(({ _in : ((((("30s" : GoString))) : GoString)), _want : (("30000000000" : Duration)) } : T__struct_17)),
(({ _in : ((((("1478s" : GoString))) : GoString)), _want : (("1478000000000" : Duration)) } : T__struct_17)),
(({ _in : ((((("-5s" : GoString))) : GoString)), _want : (("-5000000000" : Duration)) } : T__struct_17)),
(({ _in : ((((("+5s" : GoString))) : GoString)), _want : (("5000000000" : Duration)) } : T__struct_17)),
(({ _in : ((((("-0" : GoString))) : GoString)), _want : ((0 : Duration)) } : T__struct_17)),
(({ _in : ((((("+0" : GoString))) : GoString)), _want : ((0 : Duration)) } : T__struct_17)),
(({ _in : ((((("5.0s" : GoString))) : GoString)), _want : (("5000000000" : Duration)) } : T__struct_17)),
(({ _in : ((((("5.6s" : GoString))) : GoString)), _want : (("5600000000" : Duration)) } : T__struct_17)),
(({ _in : ((((("5.s" : GoString))) : GoString)), _want : (("5000000000" : Duration)) } : T__struct_17)),
(({ _in : (((((".5s" : GoString))) : GoString)), _want : ((500000000 : Duration)) } : T__struct_17)),
(({ _in : ((((("1.0s" : GoString))) : GoString)), _want : ((1000000000 : Duration)) } : T__struct_17)),
(({ _in : ((((("1.00s" : GoString))) : GoString)), _want : ((1000000000 : Duration)) } : T__struct_17)),
(({ _in : ((((("1.004s" : GoString))) : GoString)), _want : ((1004000000 : Duration)) } : T__struct_17)),
(({ _in : ((((("1.0040s" : GoString))) : GoString)), _want : ((1004000000 : Duration)) } : T__struct_17)),
(({ _in : ((((("100.00100s" : GoString))) : GoString)), _want : (("100001000000" : Duration)) } : T__struct_17)),
(({ _in : ((((("10ns" : GoString))) : GoString)), _want : ((10 : Duration)) } : T__struct_17)),
(({ _in : ((((("11us" : GoString))) : GoString)), _want : ((11000 : Duration)) } : T__struct_17)),
(({ _in : ((((("12µs" : GoString))) : GoString)), _want : ((12000 : Duration)) } : T__struct_17)),
(({ _in : ((((("12μs" : GoString))) : GoString)), _want : ((12000 : Duration)) } : T__struct_17)),
(({ _in : ((((("13ms" : GoString))) : GoString)), _want : ((13000000 : Duration)) } : T__struct_17)),
(({ _in : ((((("14s" : GoString))) : GoString)), _want : (("14000000000" : Duration)) } : T__struct_17)),
(({ _in : ((((("15m" : GoString))) : GoString)), _want : (("900000000000" : Duration)) } : T__struct_17)),
(({ _in : ((((("16h" : GoString))) : GoString)), _want : (("57600000000000" : Duration)) } : T__struct_17)),
(({ _in : ((((("3h30m" : GoString))) : GoString)), _want : (("12600000000000" : Duration)) } : T__struct_17)),
(({ _in : ((((("10.5s4m" : GoString))) : GoString)), _want : (("250500000000" : Duration)) } : T__struct_17)),
(({ _in : ((((("-2m3.4s" : GoString))) : GoString)), _want : (("-123400000000" : Duration)) } : T__struct_17)),
(({ _in : ((((("1h2m3s4ms5us6ns" : GoString))) : GoString)), _want : (("3723004005006" : Duration)) } : T__struct_17)),
(({ _in : ((((("39h9m14.425s" : GoString))) : GoString)), _want : (("140954425000000" : Duration)) } : T__struct_17)),
(({ _in : ((((("52763797000ns" : GoString))) : GoString)), _want : (("52763797000" : Duration)) } : T__struct_17)),
(({ _in : ((((("0.3333333333333333333h" : GoString))) : GoString)), _want : (("1200000000000" : Duration)) } : T__struct_17)),
(({ _in : ((((("9007199254740993ns" : GoString))) : GoString)), _want : (("9007199254740993" : Duration)) } : T__struct_17)),
(({ _in : ((((("9223372036854775807ns" : GoString))) : GoString)), _want : (("9223372036854775807" : Duration)) } : T__struct_17)),
(({ _in : ((((("9223372036854775.807us" : GoString))) : GoString)), _want : (("9223372036854775807" : Duration)) } : T__struct_17)),
(({ _in : ((((("9223372036s854ms775us807ns" : GoString))) : GoString)), _want : (("9223372036854775807" : Duration)) } : T__struct_17)),
(({ _in : ((((("-9223372036854775808ns" : GoString))) : GoString)), _want : (("-9223372036854775808" : Duration)) } : T__struct_17)),
(({ _in : ((((("-9223372036854775.808us" : GoString))) : GoString)), _want : (("-9223372036854775808" : Duration)) } : T__struct_17)),
(({ _in : ((((("-9223372036s854ms775us808ns" : GoString))) : GoString)), _want : (("-9223372036854775808" : Duration)) } : T__struct_17)),
(({ _in : ((((("-9223372036854775808ns" : GoString))) : GoString)), _want : (("-9223372036854775808" : Duration)) } : T__struct_17)),
(({ _in : ((((("-2562047h47m16.854775808s" : GoString))) : GoString)), _want : (("-9223372036854775808" : Duration)) } : T__struct_17)),
(({ _in : ((((("0.100000000000000000000h" : GoString))) : GoString)), _want : (("360000000000" : Duration)) } : T__struct_17)),
(({ _in : ((((("0.830103483285477580700h" : GoString))) : GoString)), _want : (("2988372539827" : Duration)) } : T__struct_17))) : Slice<T__struct_17>));
var _parseDurationErrorTests : Slice<T__struct_18> = ((new Slice<T__struct_18>(
(({ _in : ((((("" : GoString))) : GoString)), _expect : (("\"\"" : GoString)) } : T__struct_18)),
(({ _in : ((((("3" : GoString))) : GoString)), _expect : (("\"3\"" : GoString)) } : T__struct_18)),
(({ _in : ((((("-" : GoString))) : GoString)), _expect : (("\"-\"" : GoString)) } : T__struct_18)),
(({ _in : ((((("s" : GoString))) : GoString)), _expect : (("\"s\"" : GoString)) } : T__struct_18)),
(({ _in : ((((("." : GoString))) : GoString)), _expect : (("\".\"" : GoString)) } : T__struct_18)),
(({ _in : ((((("-." : GoString))) : GoString)), _expect : (("\"-.\"" : GoString)) } : T__struct_18)),
(({ _in : (((((".s" : GoString))) : GoString)), _expect : (("\".s\"" : GoString)) } : T__struct_18)),
(({ _in : ((((("+.s" : GoString))) : GoString)), _expect : (("\"+.s\"" : GoString)) } : T__struct_18)),
(({ _in : ((((("1d" : GoString))) : GoString)), _expect : (("\"1d\"" : GoString)) } : T__struct_18)),
(({ _in : (((((haxe.io.Bytes.ofHex("85") : GoString)) + ((haxe.io.Bytes.ofHex("85") : GoString))) : GoString)), _expect : (("\"\\x85\\x85\"" : GoString)) } : T__struct_18)),
(({ _in : (((((haxe.io.Bytes.ofHex("ff") : GoString)) + (("ff" : GoString))) : GoString)), _expect : (("\"\\xffff\"" : GoString)) } : T__struct_18)),
(({ _in : ((((("hello " : GoString)) + ((haxe.io.Bytes.ofHex("ff") : GoString)) + (("ff world" : GoString))) : GoString)), _expect : (("\"hello \\xffff world\"" : GoString)) } : T__struct_18)),
(({ _in : ((((("\uFFFD" : GoString))) : GoString)), _expect : (("\"\\xef\\xbf\\xbd\"" : GoString)) } : T__struct_18)),
(({ _in : ((((("\uFFFD hello \uFFFD world" : GoString))) : GoString)), _expect : (("\"\\xef\\xbf\\xbd hello \\xef\\xbf\\xbd world\"" : GoString)) } : T__struct_18)),
(({ _in : ((((("9223372036854775810ns" : GoString))) : GoString)), _expect : (("\"9223372036854775810ns\"" : GoString)) } : T__struct_18)),
(({ _in : ((((("9223372036854775808ns" : GoString))) : GoString)), _expect : (("\"9223372036854775808ns\"" : GoString)) } : T__struct_18)),
(({ _in : ((((("-9223372036854775809ns" : GoString))) : GoString)), _expect : (("\"-9223372036854775809ns\"" : GoString)) } : T__struct_18)),
(({ _in : ((((("9223372036854776us" : GoString))) : GoString)), _expect : (("\"9223372036854776us\"" : GoString)) } : T__struct_18)),
(({ _in : ((((("3000000h" : GoString))) : GoString)), _expect : (("\"3000000h\"" : GoString)) } : T__struct_18)),
(({ _in : ((((("9223372036854775.808us" : GoString))) : GoString)), _expect : (("\"9223372036854775.808us\"" : GoString)) } : T__struct_18)),
(({ _in : ((((("9223372036854ms775us808ns" : GoString))) : GoString)), _expect : (("\"9223372036854ms775us808ns\"" : GoString)) } : T__struct_18))) : Slice<T__struct_18>));
var _mallocTest : Slice<T__struct_19> = ((new Slice<T__struct_19>((({ _count : ((0 : GoInt)), _desc : (("time.Now()" : GoString)), _fn : function():Void {
        _t = (now() == null ? null : now().__copy__());
    } } : T__struct_19)), (({ _count : ((0 : GoInt)), _desc : (("time.Now().UnixNano()" : GoString)), _fn : function():Void {
        _u = now().unixNano();
    } } : T__struct_19)), (({ _count : ((0 : GoInt)), _desc : (("time.Now().UnixMilli()" : GoString)), _fn : function():Void {
        _u = now().unixMilli();
    } } : T__struct_19)), (({ _count : ((0 : GoInt)), _desc : (("time.Now().UnixMicro()" : GoString)), _fn : function():Void {
        _u = now().unixMicro();
    } } : T__struct_19))) : Slice<T__struct_19>));
var _subTests : Slice<T__struct_20> = ((new Slice<T__struct_20>(
(({ _t : ((new Time() : Time)), _u : ((new Time() : Time)), _d : ((((0 : Duration)) : Duration)) } : T__struct_20)),
(({ _t : (date(((2009 : GoInt)), ((11 : Month)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((1 : GoInt)), utc) == null ? null : date(((2009 : GoInt)), ((11 : Month)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((1 : GoInt)), utc).__copy__()), _u : (date(((2009 : GoInt)), ((11 : Month)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((2009 : GoInt)), ((11 : Month)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()), _d : ((((1 : Duration)) : Duration)) } : T__struct_20)),
(({ _t : (date(((2009 : GoInt)), ((11 : Month)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((2009 : GoInt)), ((11 : Month)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()), _u : (date(((2009 : GoInt)), ((11 : Month)), ((24 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((2009 : GoInt)), ((11 : Month)), ((24 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()), _d : (("-86400000000000" : Duration)) } : T__struct_20)),
(({ _t : (date(((2009 : GoInt)), ((11 : Month)), ((24 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((2009 : GoInt)), ((11 : Month)), ((24 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()), _u : (date(((2009 : GoInt)), ((11 : Month)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((2009 : GoInt)), ((11 : Month)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()), _d : (("86400000000000" : Duration)) } : T__struct_20)),
(({ _t : (date(((-2009 : GoInt)), ((11 : Month)), ((24 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((-2009 : GoInt)), ((11 : Month)), ((24 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()), _u : (date(((-2009 : GoInt)), ((11 : Month)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((-2009 : GoInt)), ((11 : Month)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()), _d : (("86400000000000" : Duration)) } : T__struct_20)),
(({ _t : ((new Time() : Time)), _u : (date(((2109 : GoInt)), ((11 : Month)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((2109 : GoInt)), ((11 : Month)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()), _d : (((("-9223372036854775808" : Duration)) : Duration)) } : T__struct_20)),
(({ _t : (date(((2109 : GoInt)), ((11 : Month)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((2109 : GoInt)), ((11 : Month)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()), _u : ((new Time() : Time)), _d : (((("9223372036854775807" : Duration)) : Duration)) } : T__struct_20)),
(({ _t : ((new Time() : Time)), _u : (date(((-2109 : GoInt)), ((11 : Month)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((-2109 : GoInt)), ((11 : Month)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()), _d : (((("9223372036854775807" : Duration)) : Duration)) } : T__struct_20)),
(({ _t : (date(((-2109 : GoInt)), ((11 : Month)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((-2109 : GoInt)), ((11 : Month)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()), _u : ((new Time() : Time)), _d : (((("-9223372036854775808" : Duration)) : Duration)) } : T__struct_20)),
(({ _t : (date(((2290 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((2290 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()), _u : (date(((2000 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((2000 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()), _d : (("9151574400000000000" : Duration)) } : T__struct_20)),
(({ _t : (date(((2300 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((2300 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()), _u : (date(((2000 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((2000 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()), _d : (((("9223372036854775807" : Duration)) : Duration)) } : T__struct_20)),
(({ _t : (date(((2000 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((2000 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()), _u : (date(((2290 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((2290 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()), _d : (("-9151574400000000000" : Duration)) } : T__struct_20)),
(({ _t : (date(((2000 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((2000 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()), _u : (date(((2300 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((2300 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()), _d : (((("-9223372036854775808" : Duration)) : Duration)) } : T__struct_20)),
(({ _t : (date(((2311 : GoInt)), ((11 : Month)), ((26 : GoInt)), ((2 : GoInt)), ((16 : GoInt)), ((47 : GoInt)), ((63535996 : GoInt)), utc) == null ? null : date(((2311 : GoInt)), ((11 : Month)), ((26 : GoInt)), ((2 : GoInt)), ((16 : GoInt)), ((47 : GoInt)), ((63535996 : GoInt)), utc).__copy__()), _u : (date(((2019 : GoInt)), ((8 : Month)), ((16 : GoInt)), ((2 : GoInt)), ((29 : GoInt)), ((30 : GoInt)), ((268436582 : GoInt)), utc) == null ? null : date(((2019 : GoInt)), ((8 : Month)), ((16 : GoInt)), ((2 : GoInt)), ((29 : GoInt)), ((30 : GoInt)), ((268436582 : GoInt)), utc).__copy__()), _d : (("9223372036795099414" : Duration)) } : T__struct_20)),
(({ _t : (minMonoTime == null ? null : minMonoTime.__copy__()), _u : (maxMonoTime == null ? null : maxMonoTime.__copy__()), _d : (("-9223372036854775808" : Duration)) } : T__struct_20)),
(({ _t : (maxMonoTime == null ? null : maxMonoTime.__copy__()), _u : (minMonoTime == null ? null : minMonoTime.__copy__()), _d : (("9223372036854775807" : Duration)) } : T__struct_20))) : Slice<T__struct_20>));
var _nsDurationTests : Slice<T__struct_21> = ((new Slice<T__struct_21>((({ _d : ((((-1000 : Duration)) : Duration)), _want : ((-1000 : GoInt64)) } : T__struct_21)), (({ _d : ((((-1 : Duration)) : Duration)), _want : ((-1 : GoInt64)) } : T__struct_21)), (({ _d : ((((1 : Duration)) : Duration)), _want : ((1 : GoInt64)) } : T__struct_21)), (({ _d : ((((1000 : Duration)) : Duration)), _want : ((1000 : GoInt64)) } : T__struct_21))) : Slice<T__struct_21>));
var _usDurationTests : Slice<T__struct_21> = ((new Slice<T__struct_21>((({ _d : ((((-1000 : Duration)) : Duration)), _want : ((-1 : GoInt64)) } : T__struct_21)), (({ _d : ((((1000 : Duration)) : Duration)), _want : ((1 : GoInt64)) } : T__struct_21))) : Slice<T__struct_21>));
var _msDurationTests : Slice<T__struct_21> = ((new Slice<T__struct_21>((({ _d : ((((-1000000 : Duration)) : Duration)), _want : ((-1 : GoInt64)) } : T__struct_21)), (({ _d : ((((1000000 : Duration)) : Duration)), _want : ((1 : GoInt64)) } : T__struct_21))) : Slice<T__struct_21>));
var _secDurationTests : Slice<T__struct_22> = ((new Slice<T__struct_22>((({ _d : ((((300000000 : Duration)) : Duration)), _want : ((0.3 : GoFloat64)) } : T__struct_22))) : Slice<T__struct_22>));
var _minDurationTests : Slice<T__struct_22> = ((new Slice<T__struct_22>((({ _d : (((("-60000000000" : Duration)) : Duration)), _want : ((-1 : GoFloat64)) } : T__struct_22)), (({ _d : ((((-1 : Duration)) : Duration)), _want : ((-1.6666666666666667e-11 : GoFloat64)) } : T__struct_22)), (({ _d : ((((1 : Duration)) : Duration)), _want : ((1.6666666666666667e-11 : GoFloat64)) } : T__struct_22)), (({ _d : (((("60000000000" : Duration)) : Duration)), _want : ((1 : GoFloat64)) } : T__struct_22)), (({ _d : ((((3000 : Duration)) : Duration)), _want : ((5e-08 : GoFloat64)) } : T__struct_22))) : Slice<T__struct_22>));
var _hourDurationTests : Slice<T__struct_22> = ((new Slice<T__struct_22>((({ _d : (((("-3600000000000" : Duration)) : Duration)), _want : ((-1 : GoFloat64)) } : T__struct_22)), (({ _d : ((((-1 : Duration)) : Duration)), _want : ((-2.777777777777778e-13 : GoFloat64)) } : T__struct_22)), (({ _d : ((((1 : Duration)) : Duration)), _want : ((2.777777777777778e-13 : GoFloat64)) } : T__struct_22)), (({ _d : (((("3600000000000" : Duration)) : Duration)), _want : ((1 : GoFloat64)) } : T__struct_22)), (({ _d : ((((36 : Duration)) : Duration)), _want : ((1e-11 : GoFloat64)) } : T__struct_22))) : Slice<T__struct_22>));
var _durationTruncateTests : Slice<T__struct_23> = ((new Slice<T__struct_23>(
(({ _d : ((0 : Duration)), _m : ((1000000000 : Duration)), _want : ((0 : Duration)) } : T__struct_23)),
(({ _d : (("60000000000" : Duration)), _m : (("-7000000000" : Duration)), _want : (("60000000000" : Duration)) } : T__struct_23)),
(({ _d : (("60000000000" : Duration)), _m : ((0 : Duration)), _want : (("60000000000" : Duration)) } : T__struct_23)),
(({ _d : (("60000000000" : Duration)), _m : ((1 : Duration)), _want : (("60000000000" : Duration)) } : T__struct_23)),
(({ _d : (("70000000000" : Duration)), _m : (("10000000000" : Duration)), _want : (("70000000000" : Duration)) } : T__struct_23)),
(({ _d : (("130000000000" : Duration)), _m : (("60000000000" : Duration)), _want : (("120000000000" : Duration)) } : T__struct_23)),
(({ _d : (("610000000000" : Duration)), _m : (("180000000000" : Duration)), _want : (("540000000000" : Duration)) } : T__struct_23)),
(({ _d : (("70000000000" : Duration)), _m : (("70000000001" : Duration)), _want : ((0 : Duration)) } : T__struct_23)),
(({ _d : (("70000000000" : Duration)), _m : (("3600000000000" : Duration)), _want : ((0 : Duration)) } : T__struct_23)),
(({ _d : (("-60000000000" : Duration)), _m : ((1000000000 : Duration)), _want : (("-60000000000" : Duration)) } : T__struct_23)),
(({ _d : (("-600000000000" : Duration)), _m : (("180000000000" : Duration)), _want : (("-540000000000" : Duration)) } : T__struct_23)),
(({ _d : (("-600000000000" : Duration)), _m : (("3600000000000" : Duration)), _want : ((0 : Duration)) } : T__struct_23))) : Slice<T__struct_23>));
var _durationRoundTests : Slice<T__struct_23> = ((new Slice<T__struct_23>(
(({ _d : ((0 : Duration)), _m : ((1000000000 : Duration)), _want : ((0 : Duration)) } : T__struct_23)),
(({ _d : (("60000000000" : Duration)), _m : (("-11000000000" : Duration)), _want : (("60000000000" : Duration)) } : T__struct_23)),
(({ _d : (("60000000000" : Duration)), _m : ((0 : Duration)), _want : (("60000000000" : Duration)) } : T__struct_23)),
(({ _d : (("60000000000" : Duration)), _m : ((1 : Duration)), _want : (("60000000000" : Duration)) } : T__struct_23)),
(({ _d : (("120000000000" : Duration)), _m : (("60000000000" : Duration)), _want : (("120000000000" : Duration)) } : T__struct_23)),
(({ _d : (("130000000000" : Duration)), _m : (("60000000000" : Duration)), _want : (("120000000000" : Duration)) } : T__struct_23)),
(({ _d : (("150000000000" : Duration)), _m : (("60000000000" : Duration)), _want : (("180000000000" : Duration)) } : T__struct_23)),
(({ _d : (("170000000000" : Duration)), _m : (("60000000000" : Duration)), _want : (("180000000000" : Duration)) } : T__struct_23)),
(({ _d : (("-60000000000" : Duration)), _m : ((1 : Duration)), _want : (("-60000000000" : Duration)) } : T__struct_23)),
(({ _d : (("-120000000000" : Duration)), _m : (("60000000000" : Duration)), _want : (("-120000000000" : Duration)) } : T__struct_23)),
(({ _d : (("-130000000000" : Duration)), _m : (("60000000000" : Duration)), _want : (("-120000000000" : Duration)) } : T__struct_23)),
(({ _d : (("-150000000000" : Duration)), _m : (("60000000000" : Duration)), _want : (("-180000000000" : Duration)) } : T__struct_23)),
(({ _d : (("-170000000000" : Duration)), _m : (("60000000000" : Duration)), _want : (("-180000000000" : Duration)) } : T__struct_23)),
(({ _d : ((8e+18 : Duration)), _m : ((3e+18 : Duration)), _want : ((9e+18 : Duration)) } : T__struct_23)),
(({ _d : ((9e+18 : Duration)), _m : ((5e+18 : Duration)), _want : (("9223372036854775807" : Duration)) } : T__struct_23)),
(({ _d : (("-8000000000000000000" : Duration)), _m : ((3e+18 : Duration)), _want : (("-9000000000000000000" : Duration)) } : T__struct_23)),
(({ _d : (("-9000000000000000000" : Duration)), _m : ((5e+18 : Duration)), _want : (("-9223372036854775808" : Duration)) } : T__struct_23)),
(({ _d : (("6917529027641081855" : Duration)), _m : (("6917529027641081856" : Duration)), _want : (("6917529027641081856" : Duration)) } : T__struct_23))) : Slice<T__struct_23>));
var _durationAbsTests : Slice<T__struct_24> = ((new Slice<T__struct_24>((({ _d : ((0 : Duration)), _want : ((0 : Duration)) } : T__struct_24)), (({ _d : ((1 : Duration)), _want : ((1 : Duration)) } : T__struct_24)), (({ _d : ((-1 : Duration)), _want : ((1 : Duration)) } : T__struct_24)), (({ _d : (("60000000000" : Duration)), _want : (("60000000000" : Duration)) } : T__struct_24)), (({ _d : (("-60000000000" : Duration)), _want : (("60000000000" : Duration)) } : T__struct_24)), (({ _d : (("-9223372036854775808" : Duration)), _want : (("9223372036854775807" : Duration)) } : T__struct_24)), (({ _d : (("-9223372036854775807" : Duration)), _want : (("9223372036854775807" : Duration)) } : T__struct_24)), (({ _d : (("-9223372036854775806" : Duration)), _want : (("9223372036854775806" : Duration)) } : T__struct_24)), (({ _d : (("9223372036854775807" : Duration)), _want : (("9223372036854775807" : Duration)) } : T__struct_24)), (({ _d : (("9223372036854775806" : Duration)), _want : (("9223372036854775806" : Duration)) } : T__struct_24))) : Slice<T__struct_24>));
var _defaultLocTests : Slice<T__struct_25> = ((new Slice<T__struct_25>(
(({ _name : ((((("After" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return _t1.after((_t2 == null ? null : _t2.__copy__())) == _t2.after((_t1 == null ? null : _t1.__copy__()));
    } } : T__struct_25)),
(({ _name : ((((("Before" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return _t1.before((_t2 == null ? null : _t2.__copy__())) == _t2.before((_t1 == null ? null : _t1.__copy__()));
    } } : T__struct_25)),
(({ _name : ((((("Equal" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return _t1.equal((_t2 == null ? null : _t2.__copy__())) == _t2.equal((_t1 == null ? null : _t1.__copy__()));
    } } : T__struct_25)),
(({ _name : ((((("IsZero" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return _t1.isZero() == _t2.isZero();
    } } : T__struct_25)),
(({ _name : ((((("Date" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        var __tmp__ = _t1.date(), _a1:GoInt = __tmp__._0, _b1:Month = __tmp__._1, _c1:GoInt = __tmp__._2;
        var __tmp__ = _t2.date(), _a2:GoInt = __tmp__._0, _b2:Month = __tmp__._1, _c2:GoInt = __tmp__._2;
        return ((_a1 == _a2) && (_b1 == _b2)) && (_c1 == _c2);
    } } : T__struct_25)),
(({ _name : ((((("Year" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return _t1.year() == _t2.year();
    } } : T__struct_25)),
(({ _name : ((((("Month" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return _t1.month() == _t2.month();
    } } : T__struct_25)),
(({ _name : ((((("Day" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return _t1.day() == _t2.day();
    } } : T__struct_25)),
(({ _name : ((((("Weekday" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return _t1.weekday() == _t2.weekday();
    } } : T__struct_25)),
(({ _name : ((((("ISOWeek" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        var __tmp__ = _t1.isoweek(), _a1:GoInt = __tmp__._0, _b1:GoInt = __tmp__._1;
        var __tmp__ = _t2.isoweek(), _a2:GoInt = __tmp__._0, _b2:GoInt = __tmp__._1;
        return (_a1 == _a2) && (_b1 == _b2);
    } } : T__struct_25)),
(({ _name : ((((("Clock" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        var __tmp__ = _t1.clock(), _a1:GoInt = __tmp__._0, _b1:GoInt = __tmp__._1, _c1:GoInt = __tmp__._2;
        var __tmp__ = _t2.clock(), _a2:GoInt = __tmp__._0, _b2:GoInt = __tmp__._1, _c2:GoInt = __tmp__._2;
        return ((_a1 == _a2) && (_b1 == _b2)) && (_c1 == _c2);
    } } : T__struct_25)),
(({ _name : ((((("Hour" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return _t1.hour() == _t2.hour();
    } } : T__struct_25)),
(({ _name : ((((("Minute" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return _t1.minute() == _t2.minute();
    } } : T__struct_25)),
(({ _name : ((((("Second" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return _t1.second() == _t2.second();
    } } : T__struct_25)),
(({ _name : ((((("Nanosecond" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return _t1.hour() == _t2.hour();
    } } : T__struct_25)),
(({ _name : ((((("YearDay" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return _t1.yearDay() == _t2.yearDay();
    } } : T__struct_25)),
(({ _name : ((((("Add" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return _t1.add((("3600000000000" : Duration))).equal((_t2.add((("3600000000000" : Duration))) == null ? null : _t2.add((("3600000000000" : Duration))).__copy__()));
    } } : T__struct_25)),
(({ _name : ((((("Sub" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return _t1.sub((_t2 == null ? null : _t2.__copy__())) == _t2.sub((_t1 == null ? null : _t1.__copy__()));
    } } : T__struct_25)),
(({ _name : ((((("AddDate" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return _t1.addDate(((1991 : GoInt)), ((9 : GoInt)), ((3 : GoInt))) == _t2.addDate(((1991 : GoInt)), ((9 : GoInt)), ((3 : GoInt)));
    } } : T__struct_25)),
(({ _name : ((((("UTC" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return _t1.utc() == _t2.utc();
    } } : T__struct_25)),
(({ _name : ((((("Local" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return _t1.local() == _t2.local();
    } } : T__struct_25)),
(({ _name : ((((("In" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return _t1.in_(utc) == _t2.in_(utc);
    } } : T__struct_25)),
(({ _name : ((((("Local" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return _t1.local() == _t2.local();
    } } : T__struct_25)),
(({ _name : ((((("Zone" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        var __tmp__ = _t1.zone(), _a1:GoString = __tmp__._0, _b1:GoInt = __tmp__._1;
        var __tmp__ = _t2.zone(), _a2:GoString = __tmp__._0, _b2:GoInt = __tmp__._1;
        return (_a1 == _a2) && (_b1 == _b2);
    } } : T__struct_25)),
(({ _name : ((((("Unix" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return _t1.unix() == _t2.unix();
    } } : T__struct_25)),
(({ _name : ((((("UnixNano" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return _t1.unixNano() == _t2.unixNano();
    } } : T__struct_25)),
(({ _name : ((((("UnixMilli" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return _t1.unixMilli() == _t2.unixMilli();
    } } : T__struct_25)),
(({ _name : ((((("UnixMicro" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return _t1.unixMicro() == _t2.unixMicro();
    } } : T__struct_25)),
(({ _name : ((((("MarshalBinary" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        var __tmp__ = _t1.marshalBinary(), _a1:Slice<GoUInt8> = __tmp__._0, _b1:stdgo.Error = __tmp__._1;
        var __tmp__ = _t2.marshalBinary(), _a2:Slice<GoUInt8> = __tmp__._0, _b2:stdgo.Error = __tmp__._1;
        return stdgo.bytes.Bytes.equal(_a1, _a2) && (_b1 == _b2);
    } } : T__struct_25)),
(({ _name : ((((("GobEncode" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        var __tmp__ = _t1.gobEncode(), _a1:Slice<GoUInt8> = __tmp__._0, _b1:stdgo.Error = __tmp__._1;
        var __tmp__ = _t2.gobEncode(), _a2:Slice<GoUInt8> = __tmp__._0, _b2:stdgo.Error = __tmp__._1;
        return stdgo.bytes.Bytes.equal(_a1, _a2) && (_b1 == _b2);
    } } : T__struct_25)),
(({ _name : ((((("MarshalJSON" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        var __tmp__ = _t1.marshalJSON(), _a1:Slice<GoUInt8> = __tmp__._0, _b1:stdgo.Error = __tmp__._1;
        var __tmp__ = _t2.marshalJSON(), _a2:Slice<GoUInt8> = __tmp__._0, _b2:stdgo.Error = __tmp__._1;
        return stdgo.bytes.Bytes.equal(_a1, _a2) && (_b1 == _b2);
    } } : T__struct_25)),
(({ _name : ((((("MarshalText" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        var __tmp__ = _t1.marshalText(), _a1:Slice<GoUInt8> = __tmp__._0, _b1:stdgo.Error = __tmp__._1;
        var __tmp__ = _t2.marshalText(), _a2:Slice<GoUInt8> = __tmp__._0, _b2:stdgo.Error = __tmp__._1;
        return stdgo.bytes.Bytes.equal(_a1, _a2) && (_b1 == _b2);
    } } : T__struct_25)),
(({ _name : ((((("Truncate" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return _t1.truncate((("3600000000000" : Duration))).equal((_t2.truncate((("3600000000000" : Duration))) == null ? null : _t2.truncate((("3600000000000" : Duration))).__copy__()));
    } } : T__struct_25)),
(({ _name : ((((("Round" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return _t1.round((("3600000000000" : Duration))).equal((_t2.round((("3600000000000" : Duration))) == null ? null : _t2.round((("3600000000000" : Duration))).__copy__()));
    } } : T__struct_25)),
(({ _name : ((((("== Time{}" : GoString))) : GoString)), _f : function(_t1:Time, _t2:Time):Bool {
        return (_t1 == ((new Time() : Time))) == (_t2 == ((new Time() : Time)));
    } } : T__struct_25))) : Slice<T__struct_25>));
var _zones : Slice<GoString> = ((new Slice<GoString>(((((("Asia/Jerusalem" : GoString))) : GoString)), ((((("America/Los_Angeles" : GoString))) : GoString))) : Slice<GoString>));
var _slimTests : Slice<T__struct_30> = ((new Slice<T__struct_30>((({ _zoneName : (("" : GoString)), _fileName : (("" : GoString)), _date : null, _wantName : (("" : GoString)), _wantOffset : ((0 : GoInt)) } : T__struct_30)), (({ _zoneName : (("" : GoString)), _fileName : (("" : GoString)), _date : null, _wantName : (("" : GoString)), _wantOffset : ((0 : GoInt)) } : T__struct_30)), (({ _zoneName : (("" : GoString)), _fileName : (("" : GoString)), _date : null, _wantName : (("" : GoString)), _wantOffset : ((0 : GoInt)) } : T__struct_30)), (({ _zoneName : (("" : GoString)), _fileName : (("" : GoString)), _date : null, _wantName : (("" : GoString)), _wantOffset : ((0 : GoInt)) } : T__struct_30))) : Slice<T__struct_30>));
var _c : Chan<GoInt> = ((null : Chan<GoInt>));
var _t : Time = (({  } : Time));
var _u : GoInt64 = ((0 : GoInt64));
@:structInit class TimeFormatTest {
    public var _time : Time = (({  } : Time));
    public var _formattedValue : GoString = "";
    public function new(?_time:Time, ?_formattedValue:GoString) {
        if (_time != null) this._time = _time;
        if (_formattedValue != null) this._formattedValue = _formattedValue;
    }
    public function __underlying__():AnyInterface return Go.toInterface(this);
    public function __copy__() {
        return new TimeFormatTest(_time, _formattedValue);
    }
}
@:structInit class FormatTest {
    public var _name : GoString = "";
    public var _format : GoString = "";
    public var _result : GoString = "";
    public function new(?_name:GoString, ?_format:GoString, ?_result:GoString) {
        if (_name != null) this._name = _name;
        if (_format != null) this._format = _format;
        if (_result != null) this._result = _result;
    }
    public function __underlying__():AnyInterface return Go.toInterface(this);
    public function __copy__() {
        return new FormatTest(_name, _format, _result);
    }
}
@:structInit class ParseTest {
    public var _name : GoString = "";
    public var _format : GoString = "";
    public var _value : GoString = "";
    public var _hasTZ : Bool = false;
    public var _hasWD : Bool = false;
    public var _yearSign : GoInt = 0;
    public var _fracDigits : GoInt = 0;
    public function new(?_name:GoString, ?_format:GoString, ?_value:GoString, ?_hasTZ:Bool, ?_hasWD:Bool, ?_yearSign:GoInt, ?_fracDigits:GoInt) {
        if (_name != null) this._name = _name;
        if (_format != null) this._format = _format;
        if (_value != null) this._value = _value;
        if (_hasTZ != null) this._hasTZ = _hasTZ;
        if (_hasWD != null) this._hasWD = _hasWD;
        if (_yearSign != null) this._yearSign = _yearSign;
        if (_fracDigits != null) this._fracDigits = _fracDigits;
    }
    public function __underlying__():AnyInterface return Go.toInterface(this);
    public function __copy__() {
        return new ParseTest(_name, _format, _value, _hasTZ, _hasWD, _yearSign, _fracDigits);
    }
}
@:structInit class ParseTimeZoneTest {
    public var _value : GoString = "";
    public var _length : GoInt = 0;
    public var _ok : Bool = false;
    public function new(?_value:GoString, ?_length:GoInt, ?_ok:Bool) {
        if (_value != null) this._value = _value;
        if (_length != null) this._length = _length;
        if (_ok != null) this._ok = _ok;
    }
    public function __underlying__():AnyInterface return Go.toInterface(this);
    public function __copy__() {
        return new ParseTimeZoneTest(_value, _length, _ok);
    }
}
@:structInit class ParseErrorTest {
    public var _format : GoString = "";
    public var _value : GoString = "";
    public var _expect : GoString = "";
    public function new(?_format:GoString, ?_value:GoString, ?_expect:GoString) {
        if (_format != null) this._format = _format;
        if (_value != null) this._value = _value;
        if (_expect != null) this._expect = _expect;
    }
    public function __underlying__():AnyInterface return Go.toInterface(this);
    public function __copy__() {
        return new ParseErrorTest(_format, _value, _expect);
    }
}
@:structInit class SecondsTimeZoneOffsetTest {
    public var _format : GoString = "";
    public var _value : GoString = "";
    public var _expectedoffset : GoInt = 0;
    public function new(?_format:GoString, ?_value:GoString, ?_expectedoffset:GoInt) {
        if (_format != null) this._format = _format;
        if (_value != null) this._value = _value;
        if (_expectedoffset != null) this._expectedoffset = _expectedoffset;
    }
    public function __underlying__():AnyInterface return Go.toInterface(this);
    public function __copy__() {
        return new SecondsTimeZoneOffsetTest(_format, _value, _expectedoffset);
    }
}
@:structInit class T_afterResult {
    public var _slot : GoInt = 0;
    public var _t : Time = (({  } : Time));
    public function new(?_slot:GoInt, ?_t:Time) {
        if (_slot != null) this._slot = _slot;
        if (_t != null) this._t = _t;
    }
    public function __underlying__():AnyInterface return Go.toInterface(this);
    public function __copy__() {
        return new T_afterResult(_slot, _t);
    }
}
@:structInit class T_parsedTime {
    public var year : GoInt = 0;
    public var month : Month = ((((0 : GoInt)) : Month));
    public var day : GoInt = 0;
    public var hour : GoInt = 0;
    public var minute : GoInt = 0;
    public var second : GoInt = 0;
    public var nanosecond : GoInt = 0;
    public var weekday : Weekday = ((((0 : GoInt)) : Weekday));
    public var zoneOffset : GoInt = 0;
    public var zone : GoString = "";
    public function new(?year:GoInt, ?month:Month, ?day:GoInt, ?hour:GoInt, ?minute:GoInt, ?second:GoInt, ?nanosecond:GoInt, ?weekday:Weekday, ?zoneOffset:GoInt, ?zone:GoString) {
        if (year != null) this.year = year;
        if (month != null) this.month = month;
        if (day != null) this.day = day;
        if (hour != null) this.hour = hour;
        if (minute != null) this.minute = minute;
        if (second != null) this.second = second;
        if (nanosecond != null) this.nanosecond = nanosecond;
        if (weekday != null) this.weekday = weekday;
        if (zoneOffset != null) this.zoneOffset = zoneOffset;
        if (zone != null) this.zone = zone;
    }
    public function __underlying__():AnyInterface return Go.toInterface(this);
    public function __copy__() {
        return new T_parsedTime(year, month, day, hour, minute, second, nanosecond, weekday, zoneOffset, zone);
    }
}
@:structInit class TimeTest {
    public var _seconds : GoInt64 = 0;
    public var _golden : stdgo.time_test.Time_test.T_parsedTime = (({  } : stdgo.time_test.Time_test.T_parsedTime));
    public function new(?_seconds:GoInt64, ?_golden:stdgo.time_test.Time_test.T_parsedTime) {
        if (_seconds != null) this._seconds = _seconds;
        if (_golden != null) this._golden = _golden;
    }
    public function __underlying__():AnyInterface return Go.toInterface(this);
    public function __copy__() {
        return new TimeTest(_seconds, _golden);
    }
}
@:structInit class ISOWeekTest {
    public var _year : GoInt = 0;
    public var _month : GoInt = 0;
    public var _day : GoInt = 0;
    public var _yex : GoInt = 0;
    public var _wex : GoInt = 0;
    public function new(?_year:GoInt, ?_month:GoInt, ?_day:GoInt, ?_yex:GoInt, ?_wex:GoInt) {
        if (_year != null) this._year = _year;
        if (_month != null) this._month = _month;
        if (_day != null) this._day = _day;
        if (_yex != null) this._yex = _yex;
        if (_wex != null) this._wex = _wex;
    }
    public function __underlying__():AnyInterface return Go.toInterface(this);
    public function __copy__() {
        return new ISOWeekTest(_year, _month, _day, _yex, _wex);
    }
}
@:structInit class YearDayTest {
    public var _year : GoInt = 0;
    public var _month : GoInt = 0;
    public var _day : GoInt = 0;
    public var _yday : GoInt = 0;
    public function new(?_year:GoInt, ?_month:GoInt, ?_day:GoInt, ?_yday:GoInt) {
        if (_year != null) this._year = _year;
        if (_month != null) this._month = _month;
        if (_day != null) this._day = _day;
        if (_yday != null) this._yday = _yday;
    }
    public function __underlying__():AnyInterface return Go.toInterface(this);
    public function __copy__() {
        return new YearDayTest(_year, _month, _day, _yday);
    }
}
@:local typedef T__struct_0 = {
    public var _in : Time;
    public var _want : GoString;
};
@:local typedef T__struct_1 = {
    public var _date : GoString;
    public var _ok : Bool;
};
@:local typedef T__struct_2 = {
    public var _format : GoString;
    public var _value : GoString;
    public var _valueElemPrefix : GoString;
};
@:local typedef T__struct_3 = {
    public var _value : GoString;
    public var _ok : Bool;
};
@:local typedef T__struct_4 = {
    public var _s : GoString;
    public var _want : GoString;
};
@:local typedef T__struct_5 = {
    public var _s : GoString;
    public var _want : GoInt;
};
@:local typedef T__struct_6 = {
    public var _mono : GoInt64;
    public var _want : GoString;
};
@:local typedef T__struct_7 = {
    public var _sum : GoFloat64;
    public var _max : Duration;
    public var _count : GoInt64;
    public var _0 : GoArray<GoInt64>;
};
@:local typedef T__struct_8 = {
    public var _count : GoInt;
    public var _delta : Duration;
};
@:local typedef T__struct_9 = {
    public var _t : Time;
    public var _d : Duration;
};
@:local typedef T__struct_10 = {
    public var _str : GoString;
    public var _d : Duration;
};
@:local typedef T__struct_11 = {
    public var _year : GoInt;
    public var _month : GoInt;
    public var _day : GoInt;
    public var _hour : GoInt;
    public var _min : GoInt;
    public var _sec : GoInt;
    public var _nsec : GoInt;
    public var _z : Ref<Location>;
    public var _unix : GoInt64;
};
@:local typedef T__struct_12 = {
    public var _years : GoInt;
    public var _months : GoInt;
    public var _days : GoInt;
};
@:local typedef T__struct_13 = {
    public var _year : GoInt;
    public var _month : GoInt;
    public var _di : GoInt;
};
@:local typedef T__struct_14 = {
    public var _bytes : Slice<GoUInt8>;
    public var _want : GoString;
};
@:local typedef T__struct_15 = {
    public var _time : Time;
    public var _want : GoString;
};
@:local typedef T__struct_16 = {
    public var _time : Time;
    public var _json : GoString;
};
@:local typedef T__struct_17 = {
    public var _in : GoString;
    public var _want : Duration;
};
@:local typedef T__struct_18 = {
    public var _in : GoString;
    public var _expect : GoString;
};
@:local typedef T__struct_19 = {
    public var _count : GoInt;
    public var _desc : GoString;
    public var _fn : () -> Void;
};
@:local typedef T__struct_20 = {
    public var _t : Time;
    public var _u : Time;
    public var _d : Duration;
};
@:local typedef T__struct_21 = {
    public var _d : Duration;
    public var _want : GoInt64;
};
@:local typedef T__struct_22 = {
    public var _d : Duration;
    public var _want : GoFloat64;
};
@:local typedef T__struct_23 = {
    public var _d : Duration;
    public var _m : Duration;
    public var _want : Duration;
};
@:local typedef T__struct_24 = {
    public var _d : Duration;
    public var _want : Duration;
};
@:local typedef T__struct_25 = {
    public var _name : GoString;
    public var _f : (Time, Time) -> Bool;
};
@:local typedef T__struct_26 = {
    public var _time : Time;
    public var _want : Bool;
};
@:local typedef T__struct_27 = {
    public var _give : Time;
    public var _want : Time;
};
@:local typedef T__struct_28 = {
    public var _giveTime : Time;
    public var _wantStart : Time;
    public var _wantEnd : Time;
};
@:local typedef T__struct_29 = {
    public var _zone : GoString;
    public var _unix : GoInt64;
    public var _want1 : GoString;
    public var _want2 : GoString;
};
@:local typedef T__struct_30 = {
    public var _zoneName : GoString;
    public var _fileName : GoString;
    public var _date : Ref<Location> -> Time;
    public var _wantName : GoString;
    public var _wantOffset : GoInt;
};
@:local typedef T__struct_31 = {
    public var _inStr : GoString;
    public var _inEnd : GoInt64;
    public var _inSec : GoInt64;
    public var _name : GoString;
    public var _off : GoInt;
    public var _start : GoInt64;
    public var _end : GoInt64;
    public var _isDST : Bool;
    public var _ok : Bool;
};
@:local typedef T__struct_32 = {
    public var _in : GoString;
    public var _name : GoString;
    public var _out : GoString;
    public var _ok : Bool;
};
@:local typedef T__struct_33 = {
    public var _in : GoString;
    public var _off : GoInt;
    public var _out : GoString;
    public var _ok : Bool;
};
@:local typedef T__struct_34 = {
    public var _in : GoString;
    public var _r : Rule;
    public var _out : GoString;
    public var _ok : Bool;
};
function _expensiveCall():Void {}
function exampleDuration():Void {
        var _t0:Time = (stdgo.time.Time.now() == null ? null : stdgo.time.Time.now().__copy__());
        _expensiveCall();
        var _t1:Time = (stdgo.time.Time.now() == null ? null : stdgo.time.Time.now().__copy__());
        stdgo.fmt.Fmt.printf(((((("The call took %v to run.\n" : GoString))) : GoString)), Go.toInterface({
            final __self__ = new Duration_wrapper(_t1.sub((_t0 == null ? null : _t0.__copy__())));
            __self__.abs = #if !macro function():Duration return _t1.sub((_t0 == null ? null : _t0.__copy__())).abs() #else null #end;
            __self__.hours = #if !macro function():GoFloat64 return _t1.sub((_t0 == null ? null : _t0.__copy__())).hours() #else null #end;
            __self__.microseconds = #if !macro function():GoInt64 return _t1.sub((_t0 == null ? null : _t0.__copy__())).microseconds() #else null #end;
            __self__.milliseconds = #if !macro function():GoInt64 return _t1.sub((_t0 == null ? null : _t0.__copy__())).milliseconds() #else null #end;
            __self__.minutes = #if !macro function():GoFloat64 return _t1.sub((_t0 == null ? null : _t0.__copy__())).minutes() #else null #end;
            __self__.nanoseconds = #if !macro function():GoInt64 return _t1.sub((_t0 == null ? null : _t0.__copy__())).nanoseconds() #else null #end;
            __self__.round = #if !macro function(_d:Duration):Duration return _t1.sub((_t0 == null ? null : _t0.__copy__())).round(_d) #else null #end;
            __self__.seconds = #if !macro function():GoFloat64 return _t1.sub((_t0 == null ? null : _t0.__copy__())).seconds() #else null #end;
            __self__.string = #if !macro function():GoString return _t1.sub((_t0 == null ? null : _t0.__copy__())).string() #else null #end;
            __self__.truncate = #if !macro function(_d:Duration):Duration return _t1.sub((_t0 == null ? null : _t0.__copy__())).truncate(_d) #else null #end;
            __self__;
        }));
    }
function exampleDuration_Round():Void {
        var __tmp__ = stdgo.time.Time.parseDuration(((((("1h15m30.918273645s" : GoString))) : GoString))), _d:Duration = __tmp__._0, _err:stdgo.Error = __tmp__._1;
        if (_err != null) {
            throw Go.toInterface(_err);
        };
        var _round = ((new Slice<Duration>(((1 : Duration)), ((1000 : Duration)), ((1000000 : Duration)), ((1000000000 : Duration)), ((2000000000 : Duration)), (("60000000000" : Duration)), (("600000000000" : Duration)), (("3600000000000" : Duration))) : Slice<Duration>));
        for (_0 => _r in _round) {
            stdgo.fmt.Fmt.printf(((((("d.Round(%6s) = %s\n" : GoString))) : GoString)), Go.toInterface({
                final __self__ = new Duration_wrapper(_r);
                __self__.abs = #if !macro function():Duration return _r.abs() #else null #end;
                __self__.hours = #if !macro function():GoFloat64 return _r.hours() #else null #end;
                __self__.microseconds = #if !macro function():GoInt64 return _r.microseconds() #else null #end;
                __self__.milliseconds = #if !macro function():GoInt64 return _r.milliseconds() #else null #end;
                __self__.minutes = #if !macro function():GoFloat64 return _r.minutes() #else null #end;
                __self__.nanoseconds = #if !macro function():GoInt64 return _r.nanoseconds() #else null #end;
                __self__.round = #if !macro function(_d_:Duration):Duration return _r.round(_d_) #else null #end;
                __self__.seconds = #if !macro function():GoFloat64 return _r.seconds() #else null #end;
                __self__.string = #if !macro function():GoString return _r.string() #else null #end;
                __self__.truncate = #if !macro function(_d__:Duration):Duration return _r.truncate(_d__) #else null #end;
                __self__;
            }), Go.toInterface(((_d.round(_r).string() : GoString))));
        };
    }
function exampleDuration_String():Void {
        stdgo.fmt.Fmt.println((("3720300000000" : Duration)));
        stdgo.fmt.Fmt.println(((300000000 : Duration)));
    }
function exampleDuration_Truncate():Void {
        var __tmp__ = stdgo.time.Time.parseDuration(((((("1h15m30.918273645s" : GoString))) : GoString))), _d:Duration = __tmp__._0, _err:stdgo.Error = __tmp__._1;
        if (_err != null) {
            throw Go.toInterface(_err);
        };
        var _trunc = ((new Slice<Duration>(((1 : Duration)), ((1000 : Duration)), ((1000000 : Duration)), ((1000000000 : Duration)), ((2000000000 : Duration)), (("60000000000" : Duration)), (("600000000000" : Duration)), (("3600000000000" : Duration))) : Slice<Duration>));
        for (_0 => _t in _trunc) {
            stdgo.fmt.Fmt.printf(((((("d.Truncate(%6s) = %s\n" : GoString))) : GoString)), Go.toInterface({
                final __self__ = new Duration_wrapper(_t);
                __self__.abs = #if !macro function():Duration return _t.abs() #else null #end;
                __self__.hours = #if !macro function():GoFloat64 return _t.hours() #else null #end;
                __self__.microseconds = #if !macro function():GoInt64 return _t.microseconds() #else null #end;
                __self__.milliseconds = #if !macro function():GoInt64 return _t.milliseconds() #else null #end;
                __self__.minutes = #if !macro function():GoFloat64 return _t.minutes() #else null #end;
                __self__.nanoseconds = #if !macro function():GoInt64 return _t.nanoseconds() #else null #end;
                __self__.round = #if !macro function(_d_:Duration):Duration return _t.round(_d_) #else null #end;
                __self__.seconds = #if !macro function():GoFloat64 return _t.seconds() #else null #end;
                __self__.string = #if !macro function():GoString return _t.string() #else null #end;
                __self__.truncate = #if !macro function(_d__:Duration):Duration return _t.truncate(_d__) #else null #end;
                __self__;
            }), Go.toInterface(((_d.truncate(_t).string() : GoString))));
        };
    }
function exampleParseDuration():Void {
        var __tmp__ = stdgo.time.Time.parseDuration(((((("10h" : GoString))) : GoString))), _hours:Duration = __tmp__._0, _0:stdgo.Error = __tmp__._1;
        var __tmp__ = stdgo.time.Time.parseDuration(((((("1h10m10s" : GoString))) : GoString))), _complex:Duration = __tmp__._0, _1:stdgo.Error = __tmp__._1;
        var __tmp__ = stdgo.time.Time.parseDuration(((((("1µs" : GoString))) : GoString))), _micro:Duration = __tmp__._0, _2:stdgo.Error = __tmp__._1;
        var __tmp__ = stdgo.time.Time.parseDuration(((((("1us" : GoString))) : GoString))), _micro2:Duration = __tmp__._0, _3:stdgo.Error = __tmp__._1;
        stdgo.fmt.Fmt.println(_hours);
        stdgo.fmt.Fmt.println(_complex);
        stdgo.fmt.Fmt.printf(((((("There are %.0f seconds in %v.\n" : GoString))) : GoString)), Go.toInterface(_complex.seconds()), Go.toInterface({
            final __self__ = new Duration_wrapper(_complex);
            __self__.abs = #if !macro function():Duration return _complex.abs() #else null #end;
            __self__.hours = #if !macro function():GoFloat64 return _complex.hours() #else null #end;
            __self__.microseconds = #if !macro function():GoInt64 return _complex.microseconds() #else null #end;
            __self__.milliseconds = #if !macro function():GoInt64 return _complex.milliseconds() #else null #end;
            __self__.minutes = #if !macro function():GoFloat64 return _complex.minutes() #else null #end;
            __self__.nanoseconds = #if !macro function():GoInt64 return _complex.nanoseconds() #else null #end;
            __self__.round = #if !macro function(_d:Duration):Duration return _complex.round(_d) #else null #end;
            __self__.seconds = #if !macro function():GoFloat64 return _complex.seconds() #else null #end;
            __self__.string = #if !macro function():GoString return _complex.string() #else null #end;
            __self__.truncate = #if !macro function(_d:Duration):Duration return _complex.truncate(_d) #else null #end;
            __self__;
        }));
        stdgo.fmt.Fmt.printf(((((("There are %d nanoseconds in %v.\n" : GoString))) : GoString)), Go.toInterface(_micro.nanoseconds()), Go.toInterface({
            final __self__ = new Duration_wrapper(_micro);
            __self__.abs = #if !macro function():Duration return _micro.abs() #else null #end;
            __self__.hours = #if !macro function():GoFloat64 return _micro.hours() #else null #end;
            __self__.microseconds = #if !macro function():GoInt64 return _micro.microseconds() #else null #end;
            __self__.milliseconds = #if !macro function():GoInt64 return _micro.milliseconds() #else null #end;
            __self__.minutes = #if !macro function():GoFloat64 return _micro.minutes() #else null #end;
            __self__.nanoseconds = #if !macro function():GoInt64 return _micro.nanoseconds() #else null #end;
            __self__.round = #if !macro function(_d:Duration):Duration return _micro.round(_d) #else null #end;
            __self__.seconds = #if !macro function():GoFloat64 return _micro.seconds() #else null #end;
            __self__.string = #if !macro function():GoString return _micro.string() #else null #end;
            __self__.truncate = #if !macro function(_d:Duration):Duration return _micro.truncate(_d) #else null #end;
            __self__;
        }));
        stdgo.fmt.Fmt.printf(((((("There are %6.2e seconds in %v.\n" : GoString))) : GoString)), Go.toInterface(_micro2.seconds()), Go.toInterface({
            final __self__ = new Duration_wrapper(_micro);
            __self__.abs = #if !macro function():Duration return _micro.abs() #else null #end;
            __self__.hours = #if !macro function():GoFloat64 return _micro.hours() #else null #end;
            __self__.microseconds = #if !macro function():GoInt64 return _micro.microseconds() #else null #end;
            __self__.milliseconds = #if !macro function():GoInt64 return _micro.milliseconds() #else null #end;
            __self__.minutes = #if !macro function():GoFloat64 return _micro.minutes() #else null #end;
            __self__.nanoseconds = #if !macro function():GoInt64 return _micro.nanoseconds() #else null #end;
            __self__.round = #if !macro function(_d:Duration):Duration return _micro.round(_d) #else null #end;
            __self__.seconds = #if !macro function():GoFloat64 return _micro.seconds() #else null #end;
            __self__.string = #if !macro function():GoString return _micro.string() #else null #end;
            __self__.truncate = #if !macro function(_d:Duration):Duration return _micro.truncate(_d) #else null #end;
            __self__;
        }));
    }
function exampleDuration_Hours():Void {
        var __tmp__ = stdgo.time.Time.parseDuration(((((("4h30m" : GoString))) : GoString))), _h:Duration = __tmp__._0, _0:stdgo.Error = __tmp__._1;
        stdgo.fmt.Fmt.printf(((((("I\'ve got %.1f hours of work left." : GoString))) : GoString)), Go.toInterface(_h.hours()));
    }
function exampleDuration_Microseconds():Void {
        var __tmp__ = stdgo.time.Time.parseDuration(((((("1s" : GoString))) : GoString))), _u:Duration = __tmp__._0, _0:stdgo.Error = __tmp__._1;
        stdgo.fmt.Fmt.printf(((((("One second is %d microseconds.\n" : GoString))) : GoString)), Go.toInterface(_u.microseconds()));
    }
function exampleDuration_Milliseconds():Void {
        var __tmp__ = stdgo.time.Time.parseDuration(((((("1s" : GoString))) : GoString))), _u:Duration = __tmp__._0, _0:stdgo.Error = __tmp__._1;
        stdgo.fmt.Fmt.printf(((((("One second is %d milliseconds.\n" : GoString))) : GoString)), Go.toInterface(_u.milliseconds()));
    }
function exampleDuration_Minutes():Void {
        var __tmp__ = stdgo.time.Time.parseDuration(((((("1h30m" : GoString))) : GoString))), _m:Duration = __tmp__._0, _0:stdgo.Error = __tmp__._1;
        stdgo.fmt.Fmt.printf(((((("The movie is %.0f minutes long." : GoString))) : GoString)), Go.toInterface(_m.minutes()));
    }
function exampleDuration_Nanoseconds():Void {
        var __tmp__ = stdgo.time.Time.parseDuration(((((("1µs" : GoString))) : GoString))), _u:Duration = __tmp__._0, _0:stdgo.Error = __tmp__._1;
        stdgo.fmt.Fmt.printf(((((("One microsecond is %d nanoseconds.\n" : GoString))) : GoString)), Go.toInterface(_u.nanoseconds()));
    }
function exampleDuration_Seconds():Void {
        var __tmp__ = stdgo.time.Time.parseDuration(((((("1m30s" : GoString))) : GoString))), _m:Duration = __tmp__._0, _0:stdgo.Error = __tmp__._1;
        stdgo.fmt.Fmt.printf(((((("Take off in t-%.0f seconds." : GoString))) : GoString)), Go.toInterface(_m.seconds()));
    }
function _handle(_0:GoInt):Void {}
function exampleAfter():Void {
        Go.select([stdgo.time.Time.after((("10000000000" : Duration))).__get__() => {
            stdgo.fmt.Fmt.println(((((("timed out" : GoString))) : GoString)));
        }, var _m = _c.__get__() => {
            _handle(_m);
        }]);
    }
function exampleSleep():Void {
        stdgo.time.Time.sleep(((100000000 : Duration)));
    }
function _statusUpdate():GoString {
        return ((((("" : GoString))) : GoString));
    }
function exampleTick():Void {
        var _c = stdgo.time.Time.tick((("5000000000" : Duration)));
        for (_next => _ in _c) {
            stdgo.fmt.Fmt.printf(((((("%v %s\n" : GoString))) : GoString)), Go.toInterface({
                final __self__ = new Time_wrapper(_next);
                __self__.add = #if !macro function(_d:Duration):Time return _next.add(_d) #else null #end;
                __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _next.addDate(_years, _months, _days) #else null #end;
                __self__.after = #if !macro function(__0:Time):Bool return _next.after(__0) #else null #end;
                __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _next.appendFormat(_b, _layout) #else null #end;
                __self__.before = #if !macro function(__0:Time):Bool return _next.before(__0) #else null #end;
                __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _next.clock() #else null #end;
                __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _next.date() #else null #end;
                __self__.day = #if !macro function():GoInt return _next.day() #else null #end;
                __self__.equal = #if !macro function(__0:Time):Bool return _next.equal(__0) #else null #end;
                __self__.format = #if !macro function(__0:GoString):GoString return _next.format(__0) #else null #end;
                __self__.goString = #if !macro function():GoString return _next.goString() #else null #end;
                __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _next.gobDecode(__0) #else null #end;
                __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _next.gobEncode() #else null #end;
                __self__.hour = #if !macro function():GoInt return _next.hour() #else null #end;
                __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _next.isoweek() #else null #end;
                __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _next.in_(__0) #else null #end;
                __self__.isDST = #if !macro function():Bool return _next.isDST() #else null #end;
                __self__.isZero = #if !macro function():Bool return _next.isZero() #else null #end;
                __self__.local = #if !macro function():Time return _next.local() #else null #end;
                __self__.location = #if !macro function():Ref<Location> return _next.location() #else null #end;
                __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _next.marshalBinary() #else null #end;
                __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _next.marshalJSON() #else null #end;
                __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _next.marshalText() #else null #end;
                __self__.minute = #if !macro function():GoInt return _next.minute() #else null #end;
                __self__.month = #if !macro function():Month return _next.month() #else null #end;
                __self__.nanosecond = #if !macro function():GoInt return _next.nanosecond() #else null #end;
                __self__.round = #if !macro function(_d:Duration):Time return _next.round(_d) #else null #end;
                __self__.second = #if !macro function():GoInt return _next.second() #else null #end;
                __self__.string = #if !macro function():GoString return _next.string() #else null #end;
                __self__.sub = #if !macro function(__0:Time):Duration return _next.sub(__0) #else null #end;
                __self__.truncate = #if !macro function(_d:Duration):Time return _next.truncate(_d) #else null #end;
                __self__.utc = #if !macro function():Time return _next.utc() #else null #end;
                __self__.unix = #if !macro function():GoInt64 return _next.unix() #else null #end;
                __self__.unixMicro = #if !macro function():GoInt64 return _next.unixMicro() #else null #end;
                __self__.unixMilli = #if !macro function():GoInt64 return _next.unixMilli() #else null #end;
                __self__.unixNano = #if !macro function():GoInt64 return _next.unixNano() #else null #end;
                __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _next.unmarshalBinary(__0) #else null #end;
                __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _next.unmarshalJSON(__0) #else null #end;
                __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _next.unmarshalText(__0) #else null #end;
                __self__.weekday = #if !macro function():Weekday return _next.weekday() #else null #end;
                __self__.year = #if !macro function():GoInt return _next.year() #else null #end;
                __self__.yearDay = #if !macro function():GoInt return _next.yearDay() #else null #end;
                __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _next.zone() #else null #end;
                __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _next.zoneBounds() #else null #end;
                __self__._abs = #if !macro function():GoUInt64 return _next._abs() #else null #end;
                __self__._addSec = #if !macro function(_sec:GoInt64):Void _next._addSec(_sec) #else null #end;
                __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _next._date(__0) #else null #end;
                __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _next._locabs() #else null #end;
                __self__._mono = #if !macro function():GoInt64 return _next._mono() #else null #end;
                __self__._nsec = #if !macro function():GoInt32 return _next._nsec() #else null #end;
                __self__._sec = #if !macro function():GoInt64 return _next._sec() #else null #end;
                __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _next._setLoc(__0) #else null #end;
                __self__._setMono = #if !macro function(_sec:GoInt64):Void _next._setMono(_sec) #else null #end;
                __self__._stripMono = #if !macro function():Void _next._stripMono() #else null #end;
                __self__._unixSec = #if !macro function():GoInt64 return _next._unixSec() #else null #end;
                __self__;
            }), Go.toInterface(_statusUpdate()));
        };
    }
function exampleMonth():Void {
        var __tmp__ = stdgo.time.Time.now().date(), _0:GoInt = __tmp__._0, _month:Month = __tmp__._1, _day:GoInt = __tmp__._2;
        if ((_month == ((11 : Month))) && (_day == ((10 : GoInt)))) {
            stdgo.fmt.Fmt.println(((((("Happy Go day!" : GoString))) : GoString)));
        };
    }
function exampleDate():Void {
        var _t:Time = (stdgo.time.Time.date(((2009 : GoInt)), ((11 : Month)), ((10 : GoInt)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc) == null ? null : stdgo.time.Time.date(((2009 : GoInt)), ((11 : Month)), ((10 : GoInt)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc).__copy__());
        stdgo.fmt.Fmt.printf(((((("Go launched at %s\n" : GoString))) : GoString)), Go.toInterface({
            final __self__ = new Time_wrapper(_t.local());
            __self__.add = #if !macro function(_d:Duration):Time return _t.local().add(_d) #else null #end;
            __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _t.local().addDate(_years, _months, _days) #else null #end;
            __self__.after = #if !macro function(__0:Time):Bool return _t.local().after(__0) #else null #end;
            __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _t.local().appendFormat(_b, _layout) #else null #end;
            __self__.before = #if !macro function(__0:Time):Bool return _t.local().before(__0) #else null #end;
            __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _t.local().clock() #else null #end;
            __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _t.local().date() #else null #end;
            __self__.day = #if !macro function():GoInt return _t.local().day() #else null #end;
            __self__.equal = #if !macro function(__0:Time):Bool return _t.local().equal(__0) #else null #end;
            __self__.format = #if !macro function(__0:GoString):GoString return _t.local().format(__0) #else null #end;
            __self__.goString = #if !macro function():GoString return _t.local().goString() #else null #end;
            __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t.local().gobDecode(__0) #else null #end;
            __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t.local().gobEncode() #else null #end;
            __self__.hour = #if !macro function():GoInt return _t.local().hour() #else null #end;
            __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _t.local().isoweek() #else null #end;
            __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _t.local().in_(__0) #else null #end;
            __self__.isDST = #if !macro function():Bool return _t.local().isDST() #else null #end;
            __self__.isZero = #if !macro function():Bool return _t.local().isZero() #else null #end;
            __self__.local = #if !macro function():Time return _t.local().local() #else null #end;
            __self__.location = #if !macro function():Ref<Location> return _t.local().location() #else null #end;
            __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t.local().marshalBinary() #else null #end;
            __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t.local().marshalJSON() #else null #end;
            __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t.local().marshalText() #else null #end;
            __self__.minute = #if !macro function():GoInt return _t.local().minute() #else null #end;
            __self__.month = #if !macro function():Month return _t.local().month() #else null #end;
            __self__.nanosecond = #if !macro function():GoInt return _t.local().nanosecond() #else null #end;
            __self__.round = #if !macro function(_d:Duration):Time return _t.local().round(_d) #else null #end;
            __self__.second = #if !macro function():GoInt return _t.local().second() #else null #end;
            __self__.string = #if !macro function():GoString return _t.local().string() #else null #end;
            __self__.sub = #if !macro function(__0:Time):Duration return _t.local().sub(__0) #else null #end;
            __self__.truncate = #if !macro function(_d:Duration):Time return _t.local().truncate(_d) #else null #end;
            __self__.utc = #if !macro function():Time return _t.local().utc() #else null #end;
            __self__.unix = #if !macro function():GoInt64 return _t.local().unix() #else null #end;
            __self__.unixMicro = #if !macro function():GoInt64 return _t.local().unixMicro() #else null #end;
            __self__.unixMilli = #if !macro function():GoInt64 return _t.local().unixMilli() #else null #end;
            __self__.unixNano = #if !macro function():GoInt64 return _t.local().unixNano() #else null #end;
            __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t.local().unmarshalBinary(__0) #else null #end;
            __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t.local().unmarshalJSON(__0) #else null #end;
            __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t.local().unmarshalText(__0) #else null #end;
            __self__.weekday = #if !macro function():Weekday return _t.local().weekday() #else null #end;
            __self__.year = #if !macro function():GoInt return _t.local().year() #else null #end;
            __self__.yearDay = #if !macro function():GoInt return _t.local().yearDay() #else null #end;
            __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _t.local().zone() #else null #end;
            __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _t.local().zoneBounds() #else null #end;
            __self__._abs = #if !macro function():GoUInt64 return _t.local()._abs() #else null #end;
            __self__._addSec = #if !macro function(_sec:GoInt64):Void _t.local()._addSec(_sec) #else null #end;
            __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _t.local()._date(__0) #else null #end;
            __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _t.local()._locabs() #else null #end;
            __self__._mono = #if !macro function():GoInt64 return _t.local()._mono() #else null #end;
            __self__._nsec = #if !macro function():GoInt32 return _t.local()._nsec() #else null #end;
            __self__._sec = #if !macro function():GoInt64 return _t.local()._sec() #else null #end;
            __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _t.local()._setLoc(__0) #else null #end;
            __self__._setMono = #if !macro function(_sec:GoInt64):Void _t.local()._setMono(_sec) #else null #end;
            __self__._stripMono = #if !macro function():Void _t.local()._stripMono() #else null #end;
            __self__._unixSec = #if !macro function():GoInt64 return _t.local()._unixSec() #else null #end;
            __self__;
        }));
    }
function exampleNewTicker():Void {
        var __recover_exception__:AnyInterface = null;
        var __deferstack__:Array<Void -> Void> = [];
        try {
            var _ticker = stdgo.time.Time.newTicker(((1000000000 : Duration)));
            __deferstack__.unshift(() -> _ticker.stop());
            var _done = new Chan<Bool>(0, () -> false);
            Go.routine(() -> {
                var a = function():Void {
                    stdgo.time.Time.sleep((("10000000000" : Duration)));
                    _done.__send__(true);
                };
                a();
            });
            while (true) {
                Go.select([var _t = _ticker.c.__get__() => {
                    stdgo.fmt.Fmt.println(((((("Current time: " : GoString))) : GoString)), _t);
                }, _done.__get__() => {
                    stdgo.fmt.Fmt.println(((((("Done!" : GoString))) : GoString)));
                    {
                        for (defer in __deferstack__) {
                            defer();
                        };
                        return;
                    };
                }]);
            };
            for (defer in __deferstack__) {
                defer();
            };
            {
                for (defer in __deferstack__) {
                    defer();
                };
                if (__recover_exception__ != null) throw __recover_exception__;
                return;
            };
        } catch(__exception__) {
            if (!(__exception__.native is AnyInterfaceData)) throw __exception__;
            __recover_exception__ = __exception__.native;
            for (defer in __deferstack__) {
                defer();
            };
            if (__recover_exception__ != null) throw __recover_exception__;
            return;
        };
    }
function exampleTime_Format():Void {
        var __tmp__ = stdgo.time.Time.parse(((((("Mon Jan _2 15:04:05 MST 2006" : GoString))) : GoString)), ((((("Wed Feb 25 11:06:39 PST 2015" : GoString))) : GoString))), _t:Time = __tmp__._0, _err:stdgo.Error = __tmp__._1;
        if (_err != null) {
            throw Go.toInterface(_err);
        };
        var __tmp__ = stdgo.time.Time.loadLocation(((((("Asia/Shanghai" : GoString))) : GoString))), _tz:Ref<Location> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
        if (_err != null) {
            throw Go.toInterface(_err);
        };
        stdgo.fmt.Fmt.println(((((("default format:" : GoString))) : GoString)), _t);
        stdgo.fmt.Fmt.println(((((("Unix format:" : GoString))) : GoString)), _t.format(((((("Mon Jan _2 15:04:05 MST 2006" : GoString))) : GoString))));
        stdgo.fmt.Fmt.println(((((("Same, in UTC:" : GoString))) : GoString)), _t.utc().format(((((("Mon Jan _2 15:04:05 MST 2006" : GoString))) : GoString))));
        stdgo.fmt.Fmt.println(((((("in Shanghai with seconds:" : GoString))) : GoString)), _t.in_(_tz).format(((((("2006-01-02T15:04:05 -070000" : GoString))) : GoString))));
        stdgo.fmt.Fmt.println(((((("in Shanghai with colon seconds:" : GoString))) : GoString)), _t.in_(_tz).format(((((("2006-01-02T15:04:05 -07:00:00" : GoString))) : GoString))));
        var _do:(GoString, GoString, GoString) -> Void = function(_name:GoString, _layout:GoString, _want:GoString):Void {
            var _got:GoString = _t.format(_layout);
            if (_want != _got) {
                stdgo.fmt.Fmt.printf(((((("error: for %q got %q; expected %q\n" : GoString))) : GoString)), Go.toInterface(_layout), Go.toInterface(_got), Go.toInterface(_want));
                return;
            };
            stdgo.fmt.Fmt.printf(((((("%-16s %q gives %q\n" : GoString))) : GoString)), Go.toInterface(_name), Go.toInterface(_layout), Go.toInterface(_got));
        };
        stdgo.fmt.Fmt.printf(((((("\nFormats:\n\n" : GoString))) : GoString)));
        _do(((((("Basic full date" : GoString))) : GoString)), ((((("Mon Jan 2 15:04:05 MST 2006" : GoString))) : GoString)), ((((("Wed Feb 25 11:06:39 PST 2015" : GoString))) : GoString)));
        _do(((((("Basic short date" : GoString))) : GoString)), ((((("2006/01/02" : GoString))) : GoString)), ((((("2015/02/25" : GoString))) : GoString)));
        _do(((((("AM/PM" : GoString))) : GoString)), ((((("3PM==3pm==15h" : GoString))) : GoString)), ((((("11AM==11am==11h" : GoString))) : GoString)));
        {
            var __tmp__ = stdgo.time.Time.parse(((((("Mon Jan _2 15:04:05 MST 2006" : GoString))) : GoString)), ((((("Wed Feb 25 11:06:39.1234 PST 2015" : GoString))) : GoString)));
            _t = (__tmp__._0 == null ? null : __tmp__._0.__copy__());
            _err = __tmp__._1;
        };
        if (_err != null) {
            throw Go.toInterface(_err);
        };
        _do(((((("No fraction" : GoString))) : GoString)), ((((("Mon Jan _2 15:04:05 MST 2006" : GoString))) : GoString)), ((((("Wed Feb 25 11:06:39 PST 2015" : GoString))) : GoString)));
        _do(((((("0s for fraction" : GoString))) : GoString)), ((((("15:04:05.00000" : GoString))) : GoString)), ((((("11:06:39.12340" : GoString))) : GoString)));
        _do(((((("9s for fraction" : GoString))) : GoString)), ((((("15:04:05.99999999" : GoString))) : GoString)), ((((("11:06:39.1234" : GoString))) : GoString)));
    }
function exampleTime_Format_pad():Void {
        var __tmp__ = stdgo.time.Time.parse(((((("Mon Jan _2 15:04:05 MST 2006" : GoString))) : GoString)), ((((("Sat Mar 7 11:06:39 PST 2015" : GoString))) : GoString))), _t:Time = __tmp__._0, _err:stdgo.Error = __tmp__._1;
        if (_err != null) {
            throw Go.toInterface(_err);
        };
        var _do:(GoString, GoString, GoString) -> Void = function(_name:GoString, _layout:GoString, _want:GoString):Void {
            var _got:GoString = _t.format(_layout);
            if (_want != _got) {
                stdgo.fmt.Fmt.printf(((((("error: for %q got %q; expected %q\n" : GoString))) : GoString)), Go.toInterface(_layout), Go.toInterface(_got), Go.toInterface(_want));
                return;
            };
            stdgo.fmt.Fmt.printf(((((("%-16s %q gives %q\n" : GoString))) : GoString)), Go.toInterface(_name), Go.toInterface(_layout), Go.toInterface(_got));
        };
        _do(((((("Unix" : GoString))) : GoString)), ((((("Mon Jan _2 15:04:05 MST 2006" : GoString))) : GoString)), ((((("Sat Mar  7 11:06:39 PST 2015" : GoString))) : GoString)));
        _do(((((("No pad" : GoString))) : GoString)), ((((("<2>" : GoString))) : GoString)), ((((("<7>" : GoString))) : GoString)));
        _do(((((("Spaces" : GoString))) : GoString)), ((((("<_2>" : GoString))) : GoString)), ((((("< 7>" : GoString))) : GoString)));
        _do(((((("Zeros" : GoString))) : GoString)), ((((("<02>" : GoString))) : GoString)), ((((("<07>" : GoString))) : GoString)));
        _do(((((("Suppressed pad" : GoString))) : GoString)), ((((("04:05" : GoString))) : GoString)), ((((("06:39" : GoString))) : GoString)));
    }
function exampleTime_GoString():Void {
        var _t:Time = (stdgo.time.Time.date(((2009 : GoInt)), ((11 : Month)), ((10 : GoInt)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc) == null ? null : stdgo.time.Time.date(((2009 : GoInt)), ((11 : Month)), ((10 : GoInt)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc).__copy__());
        stdgo.fmt.Fmt.println(_t.goString());
        _t = (_t.add((("60000000000" : Duration))) == null ? null : _t.add((("60000000000" : Duration))).__copy__());
        stdgo.fmt.Fmt.println(_t.goString());
        _t = (_t.addDate(((0 : GoInt)), ((1 : GoInt)), ((0 : GoInt))) == null ? null : _t.addDate(((0 : GoInt)), ((1 : GoInt)), ((0 : GoInt))).__copy__());
        stdgo.fmt.Fmt.println(_t.goString());
        {
            var __tmp__ = stdgo.time.Time.parse(((((("Jan 2, 2006 at 3:04pm (MST)" : GoString))) : GoString)), ((((("Feb 3, 2013 at 7:54pm (UTC)" : GoString))) : GoString)));
            _t = (__tmp__._0 == null ? null : __tmp__._0.__copy__());
        };
        stdgo.fmt.Fmt.println(_t.goString());
    }
function exampleParse():Void {
        {};
        var __tmp__ = stdgo.time.Time.parse(((((("Jan 2, 2006 at 3:04pm (MST)" : GoString))) : GoString)), ((((("Feb 3, 2013 at 7:54pm (PST)" : GoString))) : GoString))), _t:Time = __tmp__._0, _0:stdgo.Error = __tmp__._1;
        stdgo.fmt.Fmt.println(_t);
        {};
        {
            var __tmp__ = stdgo.time.Time.parse(((((("2006-Jan-02" : GoString))) : GoString)), ((((("2013-Feb-03" : GoString))) : GoString)));
            _t = (__tmp__._0 == null ? null : __tmp__._0.__copy__());
        };
        stdgo.fmt.Fmt.println(_t);
        {
            var __tmp__ = stdgo.time.Time.parse(((((("2006-01-02T15:04:05Z07:00" : GoString))) : GoString)), ((((("2006-01-02T15:04:05Z" : GoString))) : GoString)));
            _t = (__tmp__._0 == null ? null : __tmp__._0.__copy__());
        };
        stdgo.fmt.Fmt.println(_t);
        {
            var __tmp__ = stdgo.time.Time.parse(((((("2006-01-02T15:04:05Z07:00" : GoString))) : GoString)), ((((("2006-01-02T15:04:05+07:00" : GoString))) : GoString)));
            _t = (__tmp__._0 == null ? null : __tmp__._0.__copy__());
        };
        stdgo.fmt.Fmt.println(_t);
        var __tmp__ = stdgo.time.Time.parse(((((("2006-01-02T15:04:05Z07:00" : GoString))) : GoString)), ((((("2006-01-02T15:04:05Z07:00" : GoString))) : GoString))), _1:Time = __tmp__._0, _err:stdgo.Error = __tmp__._1;
        stdgo.fmt.Fmt.println(((((("error" : GoString))) : GoString)), _err);
    }
function exampleParseInLocation():Void {
        var __tmp__ = stdgo.time.Time.loadLocation(((((("Europe/Berlin" : GoString))) : GoString))), _loc:Ref<Location> = __tmp__._0, _0:stdgo.Error = __tmp__._1;
        {};
        var __tmp__ = stdgo.time.Time.parseInLocation(((((("Jan 2, 2006 at 3:04pm (MST)" : GoString))) : GoString)), ((((("Jul 9, 2012 at 5:02am (CEST)" : GoString))) : GoString)), _loc), _t:Time = __tmp__._0, _1:stdgo.Error = __tmp__._1;
        stdgo.fmt.Fmt.println(_t);
        {};
        {
            var __tmp__ = stdgo.time.Time.parseInLocation(((((("2006-Jan-02" : GoString))) : GoString)), ((((("2012-Jul-09" : GoString))) : GoString)), _loc);
            _t = (__tmp__._0 == null ? null : __tmp__._0.__copy__());
        };
        stdgo.fmt.Fmt.println(_t);
    }
function exampleUnix():Void {
        var _unixTime:Time = (stdgo.time.Time.date(((2009 : GoInt)), ((11 : Month)), ((10 : GoInt)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc) == null ? null : stdgo.time.Time.date(((2009 : GoInt)), ((11 : Month)), ((10 : GoInt)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc).__copy__());
        stdgo.fmt.Fmt.println(_unixTime.unix());
        var _t:Time = (stdgo.time.Time.unix(_unixTime.unix(), ((0 : GoInt64))).utc() == null ? null : stdgo.time.Time.unix(_unixTime.unix(), ((0 : GoInt64))).utc().__copy__());
        stdgo.fmt.Fmt.println(_t);
    }
function exampleUnixMicro():Void {
        var _umt:Time = (stdgo.time.Time.date(((2009 : GoInt)), ((11 : Month)), ((10 : GoInt)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc) == null ? null : stdgo.time.Time.date(((2009 : GoInt)), ((11 : Month)), ((10 : GoInt)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc).__copy__());
        stdgo.fmt.Fmt.println(_umt.unixMicro());
        var _t:Time = (stdgo.time.Time.unixMicro(_umt.unixMicro()).utc() == null ? null : stdgo.time.Time.unixMicro(_umt.unixMicro()).utc().__copy__());
        stdgo.fmt.Fmt.println(_t);
    }
function exampleUnixMilli():Void {
        var _umt:Time = (stdgo.time.Time.date(((2009 : GoInt)), ((11 : Month)), ((10 : GoInt)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc) == null ? null : stdgo.time.Time.date(((2009 : GoInt)), ((11 : Month)), ((10 : GoInt)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc).__copy__());
        stdgo.fmt.Fmt.println(_umt.unixMilli());
        var _t:Time = (stdgo.time.Time.unixMilli(_umt.unixMilli()).utc() == null ? null : stdgo.time.Time.unixMilli(_umt.unixMilli()).utc().__copy__());
        stdgo.fmt.Fmt.println(_t);
    }
function exampleTime_Unix():Void {
        stdgo.fmt.Fmt.println(stdgo.time.Time.unix(((1e+09 : GoInt64)), ((0 : GoInt64))).utc());
        stdgo.fmt.Fmt.println(stdgo.time.Time.unix(((0 : GoInt64)), ((1e+18 : GoInt64))).utc());
        stdgo.fmt.Fmt.println(stdgo.time.Time.unix(((2e+09 : GoInt64)), (("-1000000000000000000" : GoInt64))).utc());
        var _t:Time = (stdgo.time.Time.date(((2001 : GoInt)), ((9 : Month)), ((9 : GoInt)), ((1 : GoInt)), ((46 : GoInt)), ((40 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc) == null ? null : stdgo.time.Time.date(((2001 : GoInt)), ((9 : Month)), ((9 : GoInt)), ((1 : GoInt)), ((46 : GoInt)), ((40 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc).__copy__());
        stdgo.fmt.Fmt.println(_t.unix());
        stdgo.fmt.Fmt.println(_t.unixNano());
    }
function exampleTime_Round():Void {
        var _t:Time = (stdgo.time.Time.date(((0 : GoInt)), ((0 : Month)), ((0 : GoInt)), ((12 : GoInt)), ((15 : GoInt)), ((30 : GoInt)), ((918273645 : GoInt)), stdgo.time.Time.utc) == null ? null : stdgo.time.Time.date(((0 : GoInt)), ((0 : Month)), ((0 : GoInt)), ((12 : GoInt)), ((15 : GoInt)), ((30 : GoInt)), ((918273645 : GoInt)), stdgo.time.Time.utc).__copy__());
        var _round = ((new Slice<Duration>(((1 : Duration)), ((1000 : Duration)), ((1000000 : Duration)), ((1000000000 : Duration)), ((2000000000 : Duration)), (("60000000000" : Duration)), (("600000000000" : Duration)), (("3600000000000" : Duration))) : Slice<Duration>));
        for (_0 => _d in _round) {
            stdgo.fmt.Fmt.printf(((((("t.Round(%6s) = %s\n" : GoString))) : GoString)), Go.toInterface({
                final __self__ = new Duration_wrapper(_d);
                __self__.abs = #if !macro function():Duration return _d.abs() #else null #end;
                __self__.hours = #if !macro function():GoFloat64 return _d.hours() #else null #end;
                __self__.microseconds = #if !macro function():GoInt64 return _d.microseconds() #else null #end;
                __self__.milliseconds = #if !macro function():GoInt64 return _d.milliseconds() #else null #end;
                __self__.minutes = #if !macro function():GoFloat64 return _d.minutes() #else null #end;
                __self__.nanoseconds = #if !macro function():GoInt64 return _d.nanoseconds() #else null #end;
                __self__.round = #if !macro function(_d:Duration):Duration return _d.round(_d) #else null #end;
                __self__.seconds = #if !macro function():GoFloat64 return _d.seconds() #else null #end;
                __self__.string = #if !macro function():GoString return _d.string() #else null #end;
                __self__.truncate = #if !macro function(_d:Duration):Duration return _d.truncate(_d) #else null #end;
                __self__;
            }), Go.toInterface(_t.round(_d).format(((((("15:04:05.999999999" : GoString))) : GoString)))));
        };
    }
function exampleTime_Truncate():Void {
        var __tmp__ = stdgo.time.Time.parse(((((("2006 Jan 02 15:04:05" : GoString))) : GoString)), ((((("2012 Dec 07 12:15:30.918273645" : GoString))) : GoString))), _t:Time = __tmp__._0, _0:stdgo.Error = __tmp__._1;
        var _trunc = ((new Slice<Duration>(((1 : Duration)), ((1000 : Duration)), ((1000000 : Duration)), ((1000000000 : Duration)), ((2000000000 : Duration)), (("60000000000" : Duration)), (("600000000000" : Duration))) : Slice<Duration>));
        for (_1 => _d in _trunc) {
            stdgo.fmt.Fmt.printf(((((("t.Truncate(%5s) = %s\n" : GoString))) : GoString)), Go.toInterface({
                final __self__ = new Duration_wrapper(_d);
                __self__.abs = #if !macro function():Duration return _d.abs() #else null #end;
                __self__.hours = #if !macro function():GoFloat64 return _d.hours() #else null #end;
                __self__.microseconds = #if !macro function():GoInt64 return _d.microseconds() #else null #end;
                __self__.milliseconds = #if !macro function():GoInt64 return _d.milliseconds() #else null #end;
                __self__.minutes = #if !macro function():GoFloat64 return _d.minutes() #else null #end;
                __self__.nanoseconds = #if !macro function():GoInt64 return _d.nanoseconds() #else null #end;
                __self__.round = #if !macro function(_d:Duration):Duration return _d.round(_d) #else null #end;
                __self__.seconds = #if !macro function():GoFloat64 return _d.seconds() #else null #end;
                __self__.string = #if !macro function():GoString return _d.string() #else null #end;
                __self__.truncate = #if !macro function(_d:Duration):Duration return _d.truncate(_d) #else null #end;
                __self__;
            }), Go.toInterface(_t.truncate(_d).format(((((("15:04:05.999999999" : GoString))) : GoString)))));
        };
        var _midnight:Time = (stdgo.time.Time.date(_t.year(), _t.month(), _t.day(), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.local) == null ? null : stdgo.time.Time.date(_t.year(), _t.month(), _t.day(), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.local).__copy__());
        _midnight;
    }
function exampleLoadLocation():Void {
        var __tmp__ = stdgo.time.Time.loadLocation(((((("America/Los_Angeles" : GoString))) : GoString))), _location:Ref<Location> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
        if (_err != null) {
            throw Go.toInterface(_err);
        };
        var _timeInUTC:Time = (stdgo.time.Time.date(((2018 : GoInt)), ((8 : Month)), ((30 : GoInt)), ((12 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc) == null ? null : stdgo.time.Time.date(((2018 : GoInt)), ((8 : Month)), ((30 : GoInt)), ((12 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc).__copy__());
        stdgo.fmt.Fmt.println(_timeInUTC.in_(_location));
    }
function exampleLocation():Void {
        var _secondsEastOfUTC:GoInt = (((("28800000000000" : Duration)).seconds() : GoInt));
        var _beijing = stdgo.time.Time.fixedZone(((((("Beijing Time" : GoString))) : GoString)), _secondsEastOfUTC);
        var _timeInUTC:Time = (stdgo.time.Time.date(((2009 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc) == null ? null : stdgo.time.Time.date(((2009 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc).__copy__());
        var _sameTimeInBeijing:Time = (stdgo.time.Time.date(((2009 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((20 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _beijing) == null ? null : stdgo.time.Time.date(((2009 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((20 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _beijing).__copy__());
        var _timesAreEqual:Bool = _timeInUTC.equal((_sameTimeInBeijing == null ? null : _sameTimeInBeijing.__copy__()));
        stdgo.fmt.Fmt.println(_timesAreEqual);
    }
function exampleTime_Add():Void {
        var _start:Time = (stdgo.time.Time.date(((2009 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc) == null ? null : stdgo.time.Time.date(((2009 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc).__copy__());
        var _afterTenSeconds:Time = (_start.add((("10000000000" : Duration))) == null ? null : _start.add((("10000000000" : Duration))).__copy__());
        var _afterTenMinutes:Time = (_start.add((("600000000000" : Duration))) == null ? null : _start.add((("600000000000" : Duration))).__copy__());
        var _afterTenHours:Time = (_start.add((("36000000000000" : Duration))) == null ? null : _start.add((("36000000000000" : Duration))).__copy__());
        var _afterTenDays:Time = (_start.add((("864000000000000" : Duration))) == null ? null : _start.add((("864000000000000" : Duration))).__copy__());
        stdgo.fmt.Fmt.printf(((((("start = %v\n" : GoString))) : GoString)), Go.toInterface({
            final __self__ = new Time_wrapper(_start);
            __self__.add = #if !macro function(_d:Duration):Time return _start.add(_d) #else null #end;
            __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _start.addDate(_years, _months, _days) #else null #end;
            __self__.after = #if !macro function(__0:Time):Bool return _start.after(__0) #else null #end;
            __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _start.appendFormat(_b, _layout) #else null #end;
            __self__.before = #if !macro function(__0:Time):Bool return _start.before(__0) #else null #end;
            __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _start.clock() #else null #end;
            __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _start.date() #else null #end;
            __self__.day = #if !macro function():GoInt return _start.day() #else null #end;
            __self__.equal = #if !macro function(__0:Time):Bool return _start.equal(__0) #else null #end;
            __self__.format = #if !macro function(__0:GoString):GoString return _start.format(__0) #else null #end;
            __self__.goString = #if !macro function():GoString return _start.goString() #else null #end;
            __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _start.gobDecode(__0) #else null #end;
            __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _start.gobEncode() #else null #end;
            __self__.hour = #if !macro function():GoInt return _start.hour() #else null #end;
            __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _start.isoweek() #else null #end;
            __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _start.in_(__0) #else null #end;
            __self__.isDST = #if !macro function():Bool return _start.isDST() #else null #end;
            __self__.isZero = #if !macro function():Bool return _start.isZero() #else null #end;
            __self__.local = #if !macro function():Time return _start.local() #else null #end;
            __self__.location = #if !macro function():Ref<Location> return _start.location() #else null #end;
            __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _start.marshalBinary() #else null #end;
            __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _start.marshalJSON() #else null #end;
            __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _start.marshalText() #else null #end;
            __self__.minute = #if !macro function():GoInt return _start.minute() #else null #end;
            __self__.month = #if !macro function():Month return _start.month() #else null #end;
            __self__.nanosecond = #if !macro function():GoInt return _start.nanosecond() #else null #end;
            __self__.round = #if !macro function(_d:Duration):Time return _start.round(_d) #else null #end;
            __self__.second = #if !macro function():GoInt return _start.second() #else null #end;
            __self__.string = #if !macro function():GoString return _start.string() #else null #end;
            __self__.sub = #if !macro function(__0:Time):Duration return _start.sub(__0) #else null #end;
            __self__.truncate = #if !macro function(_d:Duration):Time return _start.truncate(_d) #else null #end;
            __self__.utc = #if !macro function():Time return _start.utc() #else null #end;
            __self__.unix = #if !macro function():GoInt64 return _start.unix() #else null #end;
            __self__.unixMicro = #if !macro function():GoInt64 return _start.unixMicro() #else null #end;
            __self__.unixMilli = #if !macro function():GoInt64 return _start.unixMilli() #else null #end;
            __self__.unixNano = #if !macro function():GoInt64 return _start.unixNano() #else null #end;
            __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _start.unmarshalBinary(__0) #else null #end;
            __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _start.unmarshalJSON(__0) #else null #end;
            __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _start.unmarshalText(__0) #else null #end;
            __self__.weekday = #if !macro function():Weekday return _start.weekday() #else null #end;
            __self__.year = #if !macro function():GoInt return _start.year() #else null #end;
            __self__.yearDay = #if !macro function():GoInt return _start.yearDay() #else null #end;
            __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _start.zone() #else null #end;
            __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _start.zoneBounds() #else null #end;
            __self__._abs = #if !macro function():GoUInt64 return _start._abs() #else null #end;
            __self__._addSec = #if !macro function(_sec:GoInt64):Void _start._addSec(_sec) #else null #end;
            __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _start._date(__0) #else null #end;
            __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _start._locabs() #else null #end;
            __self__._mono = #if !macro function():GoInt64 return _start._mono() #else null #end;
            __self__._nsec = #if !macro function():GoInt32 return _start._nsec() #else null #end;
            __self__._sec = #if !macro function():GoInt64 return _start._sec() #else null #end;
            __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _start._setLoc(__0) #else null #end;
            __self__._setMono = #if !macro function(_sec:GoInt64):Void _start._setMono(_sec) #else null #end;
            __self__._stripMono = #if !macro function():Void _start._stripMono() #else null #end;
            __self__._unixSec = #if !macro function():GoInt64 return _start._unixSec() #else null #end;
            __self__;
        }));
        stdgo.fmt.Fmt.printf(((((("start.Add(time.Second * 10) = %v\n" : GoString))) : GoString)), Go.toInterface({
            final __self__ = new Time_wrapper(_afterTenSeconds);
            __self__.add = #if !macro function(_d:Duration):Time return _afterTenSeconds.add(_d) #else null #end;
            __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _afterTenSeconds.addDate(_years, _months, _days) #else null #end;
            __self__.after = #if !macro function(__0:Time):Bool return _afterTenSeconds.after(__0) #else null #end;
            __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _afterTenSeconds.appendFormat(_b, _layout) #else null #end;
            __self__.before = #if !macro function(__0:Time):Bool return _afterTenSeconds.before(__0) #else null #end;
            __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _afterTenSeconds.clock() #else null #end;
            __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _afterTenSeconds.date() #else null #end;
            __self__.day = #if !macro function():GoInt return _afterTenSeconds.day() #else null #end;
            __self__.equal = #if !macro function(__0:Time):Bool return _afterTenSeconds.equal(__0) #else null #end;
            __self__.format = #if !macro function(__0:GoString):GoString return _afterTenSeconds.format(__0) #else null #end;
            __self__.goString = #if !macro function():GoString return _afterTenSeconds.goString() #else null #end;
            __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _afterTenSeconds.gobDecode(__0) #else null #end;
            __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _afterTenSeconds.gobEncode() #else null #end;
            __self__.hour = #if !macro function():GoInt return _afterTenSeconds.hour() #else null #end;
            __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _afterTenSeconds.isoweek() #else null #end;
            __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _afterTenSeconds.in_(__0) #else null #end;
            __self__.isDST = #if !macro function():Bool return _afterTenSeconds.isDST() #else null #end;
            __self__.isZero = #if !macro function():Bool return _afterTenSeconds.isZero() #else null #end;
            __self__.local = #if !macro function():Time return _afterTenSeconds.local() #else null #end;
            __self__.location = #if !macro function():Ref<Location> return _afterTenSeconds.location() #else null #end;
            __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _afterTenSeconds.marshalBinary() #else null #end;
            __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _afterTenSeconds.marshalJSON() #else null #end;
            __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _afterTenSeconds.marshalText() #else null #end;
            __self__.minute = #if !macro function():GoInt return _afterTenSeconds.minute() #else null #end;
            __self__.month = #if !macro function():Month return _afterTenSeconds.month() #else null #end;
            __self__.nanosecond = #if !macro function():GoInt return _afterTenSeconds.nanosecond() #else null #end;
            __self__.round = #if !macro function(_d:Duration):Time return _afterTenSeconds.round(_d) #else null #end;
            __self__.second = #if !macro function():GoInt return _afterTenSeconds.second() #else null #end;
            __self__.string = #if !macro function():GoString return _afterTenSeconds.string() #else null #end;
            __self__.sub = #if !macro function(__0:Time):Duration return _afterTenSeconds.sub(__0) #else null #end;
            __self__.truncate = #if !macro function(_d:Duration):Time return _afterTenSeconds.truncate(_d) #else null #end;
            __self__.utc = #if !macro function():Time return _afterTenSeconds.utc() #else null #end;
            __self__.unix = #if !macro function():GoInt64 return _afterTenSeconds.unix() #else null #end;
            __self__.unixMicro = #if !macro function():GoInt64 return _afterTenSeconds.unixMicro() #else null #end;
            __self__.unixMilli = #if !macro function():GoInt64 return _afterTenSeconds.unixMilli() #else null #end;
            __self__.unixNano = #if !macro function():GoInt64 return _afterTenSeconds.unixNano() #else null #end;
            __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _afterTenSeconds.unmarshalBinary(__0) #else null #end;
            __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _afterTenSeconds.unmarshalJSON(__0) #else null #end;
            __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _afterTenSeconds.unmarshalText(__0) #else null #end;
            __self__.weekday = #if !macro function():Weekday return _afterTenSeconds.weekday() #else null #end;
            __self__.year = #if !macro function():GoInt return _afterTenSeconds.year() #else null #end;
            __self__.yearDay = #if !macro function():GoInt return _afterTenSeconds.yearDay() #else null #end;
            __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _afterTenSeconds.zone() #else null #end;
            __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _afterTenSeconds.zoneBounds() #else null #end;
            __self__._abs = #if !macro function():GoUInt64 return _afterTenSeconds._abs() #else null #end;
            __self__._addSec = #if !macro function(_sec:GoInt64):Void _afterTenSeconds._addSec(_sec) #else null #end;
            __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _afterTenSeconds._date(__0) #else null #end;
            __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _afterTenSeconds._locabs() #else null #end;
            __self__._mono = #if !macro function():GoInt64 return _afterTenSeconds._mono() #else null #end;
            __self__._nsec = #if !macro function():GoInt32 return _afterTenSeconds._nsec() #else null #end;
            __self__._sec = #if !macro function():GoInt64 return _afterTenSeconds._sec() #else null #end;
            __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _afterTenSeconds._setLoc(__0) #else null #end;
            __self__._setMono = #if !macro function(_sec:GoInt64):Void _afterTenSeconds._setMono(_sec) #else null #end;
            __self__._stripMono = #if !macro function():Void _afterTenSeconds._stripMono() #else null #end;
            __self__._unixSec = #if !macro function():GoInt64 return _afterTenSeconds._unixSec() #else null #end;
            __self__;
        }));
        stdgo.fmt.Fmt.printf(((((("start.Add(time.Minute * 10) = %v\n" : GoString))) : GoString)), Go.toInterface({
            final __self__ = new Time_wrapper(_afterTenMinutes);
            __self__.add = #if !macro function(_d:Duration):Time return _afterTenMinutes.add(_d) #else null #end;
            __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _afterTenMinutes.addDate(_years, _months, _days) #else null #end;
            __self__.after = #if !macro function(__0:Time):Bool return _afterTenMinutes.after(__0) #else null #end;
            __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _afterTenMinutes.appendFormat(_b, _layout) #else null #end;
            __self__.before = #if !macro function(__0:Time):Bool return _afterTenMinutes.before(__0) #else null #end;
            __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _afterTenMinutes.clock() #else null #end;
            __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _afterTenMinutes.date() #else null #end;
            __self__.day = #if !macro function():GoInt return _afterTenMinutes.day() #else null #end;
            __self__.equal = #if !macro function(__0:Time):Bool return _afterTenMinutes.equal(__0) #else null #end;
            __self__.format = #if !macro function(__0:GoString):GoString return _afterTenMinutes.format(__0) #else null #end;
            __self__.goString = #if !macro function():GoString return _afterTenMinutes.goString() #else null #end;
            __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _afterTenMinutes.gobDecode(__0) #else null #end;
            __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _afterTenMinutes.gobEncode() #else null #end;
            __self__.hour = #if !macro function():GoInt return _afterTenMinutes.hour() #else null #end;
            __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _afterTenMinutes.isoweek() #else null #end;
            __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _afterTenMinutes.in_(__0) #else null #end;
            __self__.isDST = #if !macro function():Bool return _afterTenMinutes.isDST() #else null #end;
            __self__.isZero = #if !macro function():Bool return _afterTenMinutes.isZero() #else null #end;
            __self__.local = #if !macro function():Time return _afterTenMinutes.local() #else null #end;
            __self__.location = #if !macro function():Ref<Location> return _afterTenMinutes.location() #else null #end;
            __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _afterTenMinutes.marshalBinary() #else null #end;
            __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _afterTenMinutes.marshalJSON() #else null #end;
            __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _afterTenMinutes.marshalText() #else null #end;
            __self__.minute = #if !macro function():GoInt return _afterTenMinutes.minute() #else null #end;
            __self__.month = #if !macro function():Month return _afterTenMinutes.month() #else null #end;
            __self__.nanosecond = #if !macro function():GoInt return _afterTenMinutes.nanosecond() #else null #end;
            __self__.round = #if !macro function(_d:Duration):Time return _afterTenMinutes.round(_d) #else null #end;
            __self__.second = #if !macro function():GoInt return _afterTenMinutes.second() #else null #end;
            __self__.string = #if !macro function():GoString return _afterTenMinutes.string() #else null #end;
            __self__.sub = #if !macro function(__0:Time):Duration return _afterTenMinutes.sub(__0) #else null #end;
            __self__.truncate = #if !macro function(_d:Duration):Time return _afterTenMinutes.truncate(_d) #else null #end;
            __self__.utc = #if !macro function():Time return _afterTenMinutes.utc() #else null #end;
            __self__.unix = #if !macro function():GoInt64 return _afterTenMinutes.unix() #else null #end;
            __self__.unixMicro = #if !macro function():GoInt64 return _afterTenMinutes.unixMicro() #else null #end;
            __self__.unixMilli = #if !macro function():GoInt64 return _afterTenMinutes.unixMilli() #else null #end;
            __self__.unixNano = #if !macro function():GoInt64 return _afterTenMinutes.unixNano() #else null #end;
            __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _afterTenMinutes.unmarshalBinary(__0) #else null #end;
            __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _afterTenMinutes.unmarshalJSON(__0) #else null #end;
            __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _afterTenMinutes.unmarshalText(__0) #else null #end;
            __self__.weekday = #if !macro function():Weekday return _afterTenMinutes.weekday() #else null #end;
            __self__.year = #if !macro function():GoInt return _afterTenMinutes.year() #else null #end;
            __self__.yearDay = #if !macro function():GoInt return _afterTenMinutes.yearDay() #else null #end;
            __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _afterTenMinutes.zone() #else null #end;
            __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _afterTenMinutes.zoneBounds() #else null #end;
            __self__._abs = #if !macro function():GoUInt64 return _afterTenMinutes._abs() #else null #end;
            __self__._addSec = #if !macro function(_sec:GoInt64):Void _afterTenMinutes._addSec(_sec) #else null #end;
            __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _afterTenMinutes._date(__0) #else null #end;
            __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _afterTenMinutes._locabs() #else null #end;
            __self__._mono = #if !macro function():GoInt64 return _afterTenMinutes._mono() #else null #end;
            __self__._nsec = #if !macro function():GoInt32 return _afterTenMinutes._nsec() #else null #end;
            __self__._sec = #if !macro function():GoInt64 return _afterTenMinutes._sec() #else null #end;
            __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _afterTenMinutes._setLoc(__0) #else null #end;
            __self__._setMono = #if !macro function(_sec:GoInt64):Void _afterTenMinutes._setMono(_sec) #else null #end;
            __self__._stripMono = #if !macro function():Void _afterTenMinutes._stripMono() #else null #end;
            __self__._unixSec = #if !macro function():GoInt64 return _afterTenMinutes._unixSec() #else null #end;
            __self__;
        }));
        stdgo.fmt.Fmt.printf(((((("start.Add(time.Hour * 10) = %v\n" : GoString))) : GoString)), Go.toInterface({
            final __self__ = new Time_wrapper(_afterTenHours);
            __self__.add = #if !macro function(_d:Duration):Time return _afterTenHours.add(_d) #else null #end;
            __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _afterTenHours.addDate(_years, _months, _days) #else null #end;
            __self__.after = #if !macro function(__0:Time):Bool return _afterTenHours.after(__0) #else null #end;
            __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _afterTenHours.appendFormat(_b, _layout) #else null #end;
            __self__.before = #if !macro function(__0:Time):Bool return _afterTenHours.before(__0) #else null #end;
            __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _afterTenHours.clock() #else null #end;
            __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _afterTenHours.date() #else null #end;
            __self__.day = #if !macro function():GoInt return _afterTenHours.day() #else null #end;
            __self__.equal = #if !macro function(__0:Time):Bool return _afterTenHours.equal(__0) #else null #end;
            __self__.format = #if !macro function(__0:GoString):GoString return _afterTenHours.format(__0) #else null #end;
            __self__.goString = #if !macro function():GoString return _afterTenHours.goString() #else null #end;
            __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _afterTenHours.gobDecode(__0) #else null #end;
            __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _afterTenHours.gobEncode() #else null #end;
            __self__.hour = #if !macro function():GoInt return _afterTenHours.hour() #else null #end;
            __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _afterTenHours.isoweek() #else null #end;
            __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _afterTenHours.in_(__0) #else null #end;
            __self__.isDST = #if !macro function():Bool return _afterTenHours.isDST() #else null #end;
            __self__.isZero = #if !macro function():Bool return _afterTenHours.isZero() #else null #end;
            __self__.local = #if !macro function():Time return _afterTenHours.local() #else null #end;
            __self__.location = #if !macro function():Ref<Location> return _afterTenHours.location() #else null #end;
            __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _afterTenHours.marshalBinary() #else null #end;
            __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _afterTenHours.marshalJSON() #else null #end;
            __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _afterTenHours.marshalText() #else null #end;
            __self__.minute = #if !macro function():GoInt return _afterTenHours.minute() #else null #end;
            __self__.month = #if !macro function():Month return _afterTenHours.month() #else null #end;
            __self__.nanosecond = #if !macro function():GoInt return _afterTenHours.nanosecond() #else null #end;
            __self__.round = #if !macro function(_d:Duration):Time return _afterTenHours.round(_d) #else null #end;
            __self__.second = #if !macro function():GoInt return _afterTenHours.second() #else null #end;
            __self__.string = #if !macro function():GoString return _afterTenHours.string() #else null #end;
            __self__.sub = #if !macro function(__0:Time):Duration return _afterTenHours.sub(__0) #else null #end;
            __self__.truncate = #if !macro function(_d:Duration):Time return _afterTenHours.truncate(_d) #else null #end;
            __self__.utc = #if !macro function():Time return _afterTenHours.utc() #else null #end;
            __self__.unix = #if !macro function():GoInt64 return _afterTenHours.unix() #else null #end;
            __self__.unixMicro = #if !macro function():GoInt64 return _afterTenHours.unixMicro() #else null #end;
            __self__.unixMilli = #if !macro function():GoInt64 return _afterTenHours.unixMilli() #else null #end;
            __self__.unixNano = #if !macro function():GoInt64 return _afterTenHours.unixNano() #else null #end;
            __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _afterTenHours.unmarshalBinary(__0) #else null #end;
            __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _afterTenHours.unmarshalJSON(__0) #else null #end;
            __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _afterTenHours.unmarshalText(__0) #else null #end;
            __self__.weekday = #if !macro function():Weekday return _afterTenHours.weekday() #else null #end;
            __self__.year = #if !macro function():GoInt return _afterTenHours.year() #else null #end;
            __self__.yearDay = #if !macro function():GoInt return _afterTenHours.yearDay() #else null #end;
            __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _afterTenHours.zone() #else null #end;
            __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _afterTenHours.zoneBounds() #else null #end;
            __self__._abs = #if !macro function():GoUInt64 return _afterTenHours._abs() #else null #end;
            __self__._addSec = #if !macro function(_sec:GoInt64):Void _afterTenHours._addSec(_sec) #else null #end;
            __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _afterTenHours._date(__0) #else null #end;
            __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _afterTenHours._locabs() #else null #end;
            __self__._mono = #if !macro function():GoInt64 return _afterTenHours._mono() #else null #end;
            __self__._nsec = #if !macro function():GoInt32 return _afterTenHours._nsec() #else null #end;
            __self__._sec = #if !macro function():GoInt64 return _afterTenHours._sec() #else null #end;
            __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _afterTenHours._setLoc(__0) #else null #end;
            __self__._setMono = #if !macro function(_sec:GoInt64):Void _afterTenHours._setMono(_sec) #else null #end;
            __self__._stripMono = #if !macro function():Void _afterTenHours._stripMono() #else null #end;
            __self__._unixSec = #if !macro function():GoInt64 return _afterTenHours._unixSec() #else null #end;
            __self__;
        }));
        stdgo.fmt.Fmt.printf(((((("start.Add(time.Hour * 24 * 10) = %v\n" : GoString))) : GoString)), Go.toInterface({
            final __self__ = new Time_wrapper(_afterTenDays);
            __self__.add = #if !macro function(_d:Duration):Time return _afterTenDays.add(_d) #else null #end;
            __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _afterTenDays.addDate(_years, _months, _days) #else null #end;
            __self__.after = #if !macro function(__0:Time):Bool return _afterTenDays.after(__0) #else null #end;
            __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _afterTenDays.appendFormat(_b, _layout) #else null #end;
            __self__.before = #if !macro function(__0:Time):Bool return _afterTenDays.before(__0) #else null #end;
            __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _afterTenDays.clock() #else null #end;
            __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _afterTenDays.date() #else null #end;
            __self__.day = #if !macro function():GoInt return _afterTenDays.day() #else null #end;
            __self__.equal = #if !macro function(__0:Time):Bool return _afterTenDays.equal(__0) #else null #end;
            __self__.format = #if !macro function(__0:GoString):GoString return _afterTenDays.format(__0) #else null #end;
            __self__.goString = #if !macro function():GoString return _afterTenDays.goString() #else null #end;
            __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _afterTenDays.gobDecode(__0) #else null #end;
            __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _afterTenDays.gobEncode() #else null #end;
            __self__.hour = #if !macro function():GoInt return _afterTenDays.hour() #else null #end;
            __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _afterTenDays.isoweek() #else null #end;
            __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _afterTenDays.in_(__0) #else null #end;
            __self__.isDST = #if !macro function():Bool return _afterTenDays.isDST() #else null #end;
            __self__.isZero = #if !macro function():Bool return _afterTenDays.isZero() #else null #end;
            __self__.local = #if !macro function():Time return _afterTenDays.local() #else null #end;
            __self__.location = #if !macro function():Ref<Location> return _afterTenDays.location() #else null #end;
            __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _afterTenDays.marshalBinary() #else null #end;
            __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _afterTenDays.marshalJSON() #else null #end;
            __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _afterTenDays.marshalText() #else null #end;
            __self__.minute = #if !macro function():GoInt return _afterTenDays.minute() #else null #end;
            __self__.month = #if !macro function():Month return _afterTenDays.month() #else null #end;
            __self__.nanosecond = #if !macro function():GoInt return _afterTenDays.nanosecond() #else null #end;
            __self__.round = #if !macro function(_d:Duration):Time return _afterTenDays.round(_d) #else null #end;
            __self__.second = #if !macro function():GoInt return _afterTenDays.second() #else null #end;
            __self__.string = #if !macro function():GoString return _afterTenDays.string() #else null #end;
            __self__.sub = #if !macro function(__0:Time):Duration return _afterTenDays.sub(__0) #else null #end;
            __self__.truncate = #if !macro function(_d:Duration):Time return _afterTenDays.truncate(_d) #else null #end;
            __self__.utc = #if !macro function():Time return _afterTenDays.utc() #else null #end;
            __self__.unix = #if !macro function():GoInt64 return _afterTenDays.unix() #else null #end;
            __self__.unixMicro = #if !macro function():GoInt64 return _afterTenDays.unixMicro() #else null #end;
            __self__.unixMilli = #if !macro function():GoInt64 return _afterTenDays.unixMilli() #else null #end;
            __self__.unixNano = #if !macro function():GoInt64 return _afterTenDays.unixNano() #else null #end;
            __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _afterTenDays.unmarshalBinary(__0) #else null #end;
            __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _afterTenDays.unmarshalJSON(__0) #else null #end;
            __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _afterTenDays.unmarshalText(__0) #else null #end;
            __self__.weekday = #if !macro function():Weekday return _afterTenDays.weekday() #else null #end;
            __self__.year = #if !macro function():GoInt return _afterTenDays.year() #else null #end;
            __self__.yearDay = #if !macro function():GoInt return _afterTenDays.yearDay() #else null #end;
            __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _afterTenDays.zone() #else null #end;
            __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _afterTenDays.zoneBounds() #else null #end;
            __self__._abs = #if !macro function():GoUInt64 return _afterTenDays._abs() #else null #end;
            __self__._addSec = #if !macro function(_sec:GoInt64):Void _afterTenDays._addSec(_sec) #else null #end;
            __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _afterTenDays._date(__0) #else null #end;
            __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _afterTenDays._locabs() #else null #end;
            __self__._mono = #if !macro function():GoInt64 return _afterTenDays._mono() #else null #end;
            __self__._nsec = #if !macro function():GoInt32 return _afterTenDays._nsec() #else null #end;
            __self__._sec = #if !macro function():GoInt64 return _afterTenDays._sec() #else null #end;
            __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _afterTenDays._setLoc(__0) #else null #end;
            __self__._setMono = #if !macro function(_sec:GoInt64):Void _afterTenDays._setMono(_sec) #else null #end;
            __self__._stripMono = #if !macro function():Void _afterTenDays._stripMono() #else null #end;
            __self__._unixSec = #if !macro function():GoInt64 return _afterTenDays._unixSec() #else null #end;
            __self__;
        }));
    }
function exampleTime_AddDate():Void {
        var _start:Time = (stdgo.time.Time.date(((2009 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc) == null ? null : stdgo.time.Time.date(((2009 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc).__copy__());
        var _oneDayLater:Time = (_start.addDate(((0 : GoInt)), ((0 : GoInt)), ((1 : GoInt))) == null ? null : _start.addDate(((0 : GoInt)), ((0 : GoInt)), ((1 : GoInt))).__copy__());
        var _oneMonthLater:Time = (_start.addDate(((0 : GoInt)), ((1 : GoInt)), ((0 : GoInt))) == null ? null : _start.addDate(((0 : GoInt)), ((1 : GoInt)), ((0 : GoInt))).__copy__());
        var _oneYearLater:Time = (_start.addDate(((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt))) == null ? null : _start.addDate(((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt))).__copy__());
        stdgo.fmt.Fmt.printf(((((("oneDayLater: start.AddDate(0, 0, 1) = %v\n" : GoString))) : GoString)), Go.toInterface({
            final __self__ = new Time_wrapper(_oneDayLater);
            __self__.add = #if !macro function(_d:Duration):Time return _oneDayLater.add(_d) #else null #end;
            __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _oneDayLater.addDate(_years, _months, _days) #else null #end;
            __self__.after = #if !macro function(__0:Time):Bool return _oneDayLater.after(__0) #else null #end;
            __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _oneDayLater.appendFormat(_b, _layout) #else null #end;
            __self__.before = #if !macro function(__0:Time):Bool return _oneDayLater.before(__0) #else null #end;
            __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _oneDayLater.clock() #else null #end;
            __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _oneDayLater.date() #else null #end;
            __self__.day = #if !macro function():GoInt return _oneDayLater.day() #else null #end;
            __self__.equal = #if !macro function(__0:Time):Bool return _oneDayLater.equal(__0) #else null #end;
            __self__.format = #if !macro function(__0:GoString):GoString return _oneDayLater.format(__0) #else null #end;
            __self__.goString = #if !macro function():GoString return _oneDayLater.goString() #else null #end;
            __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _oneDayLater.gobDecode(__0) #else null #end;
            __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _oneDayLater.gobEncode() #else null #end;
            __self__.hour = #if !macro function():GoInt return _oneDayLater.hour() #else null #end;
            __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _oneDayLater.isoweek() #else null #end;
            __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _oneDayLater.in_(__0) #else null #end;
            __self__.isDST = #if !macro function():Bool return _oneDayLater.isDST() #else null #end;
            __self__.isZero = #if !macro function():Bool return _oneDayLater.isZero() #else null #end;
            __self__.local = #if !macro function():Time return _oneDayLater.local() #else null #end;
            __self__.location = #if !macro function():Ref<Location> return _oneDayLater.location() #else null #end;
            __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _oneDayLater.marshalBinary() #else null #end;
            __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _oneDayLater.marshalJSON() #else null #end;
            __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _oneDayLater.marshalText() #else null #end;
            __self__.minute = #if !macro function():GoInt return _oneDayLater.minute() #else null #end;
            __self__.month = #if !macro function():Month return _oneDayLater.month() #else null #end;
            __self__.nanosecond = #if !macro function():GoInt return _oneDayLater.nanosecond() #else null #end;
            __self__.round = #if !macro function(_d:Duration):Time return _oneDayLater.round(_d) #else null #end;
            __self__.second = #if !macro function():GoInt return _oneDayLater.second() #else null #end;
            __self__.string = #if !macro function():GoString return _oneDayLater.string() #else null #end;
            __self__.sub = #if !macro function(__0:Time):Duration return _oneDayLater.sub(__0) #else null #end;
            __self__.truncate = #if !macro function(_d:Duration):Time return _oneDayLater.truncate(_d) #else null #end;
            __self__.utc = #if !macro function():Time return _oneDayLater.utc() #else null #end;
            __self__.unix = #if !macro function():GoInt64 return _oneDayLater.unix() #else null #end;
            __self__.unixMicro = #if !macro function():GoInt64 return _oneDayLater.unixMicro() #else null #end;
            __self__.unixMilli = #if !macro function():GoInt64 return _oneDayLater.unixMilli() #else null #end;
            __self__.unixNano = #if !macro function():GoInt64 return _oneDayLater.unixNano() #else null #end;
            __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _oneDayLater.unmarshalBinary(__0) #else null #end;
            __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _oneDayLater.unmarshalJSON(__0) #else null #end;
            __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _oneDayLater.unmarshalText(__0) #else null #end;
            __self__.weekday = #if !macro function():Weekday return _oneDayLater.weekday() #else null #end;
            __self__.year = #if !macro function():GoInt return _oneDayLater.year() #else null #end;
            __self__.yearDay = #if !macro function():GoInt return _oneDayLater.yearDay() #else null #end;
            __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _oneDayLater.zone() #else null #end;
            __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _oneDayLater.zoneBounds() #else null #end;
            __self__._abs = #if !macro function():GoUInt64 return _oneDayLater._abs() #else null #end;
            __self__._addSec = #if !macro function(_sec:GoInt64):Void _oneDayLater._addSec(_sec) #else null #end;
            __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _oneDayLater._date(__0) #else null #end;
            __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _oneDayLater._locabs() #else null #end;
            __self__._mono = #if !macro function():GoInt64 return _oneDayLater._mono() #else null #end;
            __self__._nsec = #if !macro function():GoInt32 return _oneDayLater._nsec() #else null #end;
            __self__._sec = #if !macro function():GoInt64 return _oneDayLater._sec() #else null #end;
            __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _oneDayLater._setLoc(__0) #else null #end;
            __self__._setMono = #if !macro function(_sec:GoInt64):Void _oneDayLater._setMono(_sec) #else null #end;
            __self__._stripMono = #if !macro function():Void _oneDayLater._stripMono() #else null #end;
            __self__._unixSec = #if !macro function():GoInt64 return _oneDayLater._unixSec() #else null #end;
            __self__;
        }));
        stdgo.fmt.Fmt.printf(((((("oneMonthLater: start.AddDate(0, 1, 0) = %v\n" : GoString))) : GoString)), Go.toInterface({
            final __self__ = new Time_wrapper(_oneMonthLater);
            __self__.add = #if !macro function(_d:Duration):Time return _oneMonthLater.add(_d) #else null #end;
            __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _oneMonthLater.addDate(_years, _months, _days) #else null #end;
            __self__.after = #if !macro function(__0:Time):Bool return _oneMonthLater.after(__0) #else null #end;
            __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _oneMonthLater.appendFormat(_b, _layout) #else null #end;
            __self__.before = #if !macro function(__0:Time):Bool return _oneMonthLater.before(__0) #else null #end;
            __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _oneMonthLater.clock() #else null #end;
            __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _oneMonthLater.date() #else null #end;
            __self__.day = #if !macro function():GoInt return _oneMonthLater.day() #else null #end;
            __self__.equal = #if !macro function(__0:Time):Bool return _oneMonthLater.equal(__0) #else null #end;
            __self__.format = #if !macro function(__0:GoString):GoString return _oneMonthLater.format(__0) #else null #end;
            __self__.goString = #if !macro function():GoString return _oneMonthLater.goString() #else null #end;
            __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _oneMonthLater.gobDecode(__0) #else null #end;
            __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _oneMonthLater.gobEncode() #else null #end;
            __self__.hour = #if !macro function():GoInt return _oneMonthLater.hour() #else null #end;
            __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _oneMonthLater.isoweek() #else null #end;
            __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _oneMonthLater.in_(__0) #else null #end;
            __self__.isDST = #if !macro function():Bool return _oneMonthLater.isDST() #else null #end;
            __self__.isZero = #if !macro function():Bool return _oneMonthLater.isZero() #else null #end;
            __self__.local = #if !macro function():Time return _oneMonthLater.local() #else null #end;
            __self__.location = #if !macro function():Ref<Location> return _oneMonthLater.location() #else null #end;
            __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _oneMonthLater.marshalBinary() #else null #end;
            __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _oneMonthLater.marshalJSON() #else null #end;
            __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _oneMonthLater.marshalText() #else null #end;
            __self__.minute = #if !macro function():GoInt return _oneMonthLater.minute() #else null #end;
            __self__.month = #if !macro function():Month return _oneMonthLater.month() #else null #end;
            __self__.nanosecond = #if !macro function():GoInt return _oneMonthLater.nanosecond() #else null #end;
            __self__.round = #if !macro function(_d:Duration):Time return _oneMonthLater.round(_d) #else null #end;
            __self__.second = #if !macro function():GoInt return _oneMonthLater.second() #else null #end;
            __self__.string = #if !macro function():GoString return _oneMonthLater.string() #else null #end;
            __self__.sub = #if !macro function(__0:Time):Duration return _oneMonthLater.sub(__0) #else null #end;
            __self__.truncate = #if !macro function(_d:Duration):Time return _oneMonthLater.truncate(_d) #else null #end;
            __self__.utc = #if !macro function():Time return _oneMonthLater.utc() #else null #end;
            __self__.unix = #if !macro function():GoInt64 return _oneMonthLater.unix() #else null #end;
            __self__.unixMicro = #if !macro function():GoInt64 return _oneMonthLater.unixMicro() #else null #end;
            __self__.unixMilli = #if !macro function():GoInt64 return _oneMonthLater.unixMilli() #else null #end;
            __self__.unixNano = #if !macro function():GoInt64 return _oneMonthLater.unixNano() #else null #end;
            __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _oneMonthLater.unmarshalBinary(__0) #else null #end;
            __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _oneMonthLater.unmarshalJSON(__0) #else null #end;
            __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _oneMonthLater.unmarshalText(__0) #else null #end;
            __self__.weekday = #if !macro function():Weekday return _oneMonthLater.weekday() #else null #end;
            __self__.year = #if !macro function():GoInt return _oneMonthLater.year() #else null #end;
            __self__.yearDay = #if !macro function():GoInt return _oneMonthLater.yearDay() #else null #end;
            __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _oneMonthLater.zone() #else null #end;
            __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _oneMonthLater.zoneBounds() #else null #end;
            __self__._abs = #if !macro function():GoUInt64 return _oneMonthLater._abs() #else null #end;
            __self__._addSec = #if !macro function(_sec:GoInt64):Void _oneMonthLater._addSec(_sec) #else null #end;
            __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _oneMonthLater._date(__0) #else null #end;
            __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _oneMonthLater._locabs() #else null #end;
            __self__._mono = #if !macro function():GoInt64 return _oneMonthLater._mono() #else null #end;
            __self__._nsec = #if !macro function():GoInt32 return _oneMonthLater._nsec() #else null #end;
            __self__._sec = #if !macro function():GoInt64 return _oneMonthLater._sec() #else null #end;
            __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _oneMonthLater._setLoc(__0) #else null #end;
            __self__._setMono = #if !macro function(_sec:GoInt64):Void _oneMonthLater._setMono(_sec) #else null #end;
            __self__._stripMono = #if !macro function():Void _oneMonthLater._stripMono() #else null #end;
            __self__._unixSec = #if !macro function():GoInt64 return _oneMonthLater._unixSec() #else null #end;
            __self__;
        }));
        stdgo.fmt.Fmt.printf(((((("oneYearLater: start.AddDate(1, 0, 0) = %v\n" : GoString))) : GoString)), Go.toInterface({
            final __self__ = new Time_wrapper(_oneYearLater);
            __self__.add = #if !macro function(_d:Duration):Time return _oneYearLater.add(_d) #else null #end;
            __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _oneYearLater.addDate(_years, _months, _days) #else null #end;
            __self__.after = #if !macro function(__0:Time):Bool return _oneYearLater.after(__0) #else null #end;
            __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _oneYearLater.appendFormat(_b, _layout) #else null #end;
            __self__.before = #if !macro function(__0:Time):Bool return _oneYearLater.before(__0) #else null #end;
            __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _oneYearLater.clock() #else null #end;
            __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _oneYearLater.date() #else null #end;
            __self__.day = #if !macro function():GoInt return _oneYearLater.day() #else null #end;
            __self__.equal = #if !macro function(__0:Time):Bool return _oneYearLater.equal(__0) #else null #end;
            __self__.format = #if !macro function(__0:GoString):GoString return _oneYearLater.format(__0) #else null #end;
            __self__.goString = #if !macro function():GoString return _oneYearLater.goString() #else null #end;
            __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _oneYearLater.gobDecode(__0) #else null #end;
            __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _oneYearLater.gobEncode() #else null #end;
            __self__.hour = #if !macro function():GoInt return _oneYearLater.hour() #else null #end;
            __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _oneYearLater.isoweek() #else null #end;
            __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _oneYearLater.in_(__0) #else null #end;
            __self__.isDST = #if !macro function():Bool return _oneYearLater.isDST() #else null #end;
            __self__.isZero = #if !macro function():Bool return _oneYearLater.isZero() #else null #end;
            __self__.local = #if !macro function():Time return _oneYearLater.local() #else null #end;
            __self__.location = #if !macro function():Ref<Location> return _oneYearLater.location() #else null #end;
            __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _oneYearLater.marshalBinary() #else null #end;
            __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _oneYearLater.marshalJSON() #else null #end;
            __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _oneYearLater.marshalText() #else null #end;
            __self__.minute = #if !macro function():GoInt return _oneYearLater.minute() #else null #end;
            __self__.month = #if !macro function():Month return _oneYearLater.month() #else null #end;
            __self__.nanosecond = #if !macro function():GoInt return _oneYearLater.nanosecond() #else null #end;
            __self__.round = #if !macro function(_d:Duration):Time return _oneYearLater.round(_d) #else null #end;
            __self__.second = #if !macro function():GoInt return _oneYearLater.second() #else null #end;
            __self__.string = #if !macro function():GoString return _oneYearLater.string() #else null #end;
            __self__.sub = #if !macro function(__0:Time):Duration return _oneYearLater.sub(__0) #else null #end;
            __self__.truncate = #if !macro function(_d:Duration):Time return _oneYearLater.truncate(_d) #else null #end;
            __self__.utc = #if !macro function():Time return _oneYearLater.utc() #else null #end;
            __self__.unix = #if !macro function():GoInt64 return _oneYearLater.unix() #else null #end;
            __self__.unixMicro = #if !macro function():GoInt64 return _oneYearLater.unixMicro() #else null #end;
            __self__.unixMilli = #if !macro function():GoInt64 return _oneYearLater.unixMilli() #else null #end;
            __self__.unixNano = #if !macro function():GoInt64 return _oneYearLater.unixNano() #else null #end;
            __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _oneYearLater.unmarshalBinary(__0) #else null #end;
            __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _oneYearLater.unmarshalJSON(__0) #else null #end;
            __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _oneYearLater.unmarshalText(__0) #else null #end;
            __self__.weekday = #if !macro function():Weekday return _oneYearLater.weekday() #else null #end;
            __self__.year = #if !macro function():GoInt return _oneYearLater.year() #else null #end;
            __self__.yearDay = #if !macro function():GoInt return _oneYearLater.yearDay() #else null #end;
            __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _oneYearLater.zone() #else null #end;
            __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _oneYearLater.zoneBounds() #else null #end;
            __self__._abs = #if !macro function():GoUInt64 return _oneYearLater._abs() #else null #end;
            __self__._addSec = #if !macro function(_sec:GoInt64):Void _oneYearLater._addSec(_sec) #else null #end;
            __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _oneYearLater._date(__0) #else null #end;
            __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _oneYearLater._locabs() #else null #end;
            __self__._mono = #if !macro function():GoInt64 return _oneYearLater._mono() #else null #end;
            __self__._nsec = #if !macro function():GoInt32 return _oneYearLater._nsec() #else null #end;
            __self__._sec = #if !macro function():GoInt64 return _oneYearLater._sec() #else null #end;
            __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _oneYearLater._setLoc(__0) #else null #end;
            __self__._setMono = #if !macro function(_sec:GoInt64):Void _oneYearLater._setMono(_sec) #else null #end;
            __self__._stripMono = #if !macro function():Void _oneYearLater._stripMono() #else null #end;
            __self__._unixSec = #if !macro function():GoInt64 return _oneYearLater._unixSec() #else null #end;
            __self__;
        }));
    }
function exampleTime_After():Void {
        var _year2000:Time = (stdgo.time.Time.date(((2000 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc) == null ? null : stdgo.time.Time.date(((2000 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc).__copy__());
        var _year3000:Time = (stdgo.time.Time.date(((3000 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc) == null ? null : stdgo.time.Time.date(((3000 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc).__copy__());
        var _isYear3000AfterYear2000:Bool = _year3000.after((_year2000 == null ? null : _year2000.__copy__()));
        var _isYear2000AfterYear3000:Bool = _year2000.after((_year3000 == null ? null : _year3000.__copy__()));
        stdgo.fmt.Fmt.printf(((((("year3000.After(year2000) = %v\n" : GoString))) : GoString)), Go.toInterface(_isYear3000AfterYear2000));
        stdgo.fmt.Fmt.printf(((((("year2000.After(year3000) = %v\n" : GoString))) : GoString)), Go.toInterface(_isYear2000AfterYear3000));
    }
function exampleTime_Before():Void {
        var _year2000:Time = (stdgo.time.Time.date(((2000 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc) == null ? null : stdgo.time.Time.date(((2000 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc).__copy__());
        var _year3000:Time = (stdgo.time.Time.date(((3000 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc) == null ? null : stdgo.time.Time.date(((3000 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc).__copy__());
        var _isYear2000BeforeYear3000:Bool = _year2000.before((_year3000 == null ? null : _year3000.__copy__()));
        var _isYear3000BeforeYear2000:Bool = _year3000.before((_year2000 == null ? null : _year2000.__copy__()));
        stdgo.fmt.Fmt.printf(((((("year2000.Before(year3000) = %v\n" : GoString))) : GoString)), Go.toInterface(_isYear2000BeforeYear3000));
        stdgo.fmt.Fmt.printf(((((("year3000.Before(year2000) = %v\n" : GoString))) : GoString)), Go.toInterface(_isYear3000BeforeYear2000));
    }
function exampleTime_Date():Void {
        var _d:Time = (stdgo.time.Time.date(((2000 : GoInt)), ((2 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((30 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc) == null ? null : stdgo.time.Time.date(((2000 : GoInt)), ((2 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((30 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc).__copy__());
        var __tmp__ = _d.date(), _year:GoInt = __tmp__._0, _month:Month = __tmp__._1, _day:GoInt = __tmp__._2;
        stdgo.fmt.Fmt.printf(((((("year = %v\n" : GoString))) : GoString)), Go.toInterface(_year));
        stdgo.fmt.Fmt.printf(((((("month = %v\n" : GoString))) : GoString)), Go.toInterface({
            final __self__ = new Month_wrapper(_month);
            __self__.string = #if !macro function():GoString return _month.string() #else null #end;
            __self__;
        }));
        stdgo.fmt.Fmt.printf(((((("day = %v\n" : GoString))) : GoString)), Go.toInterface(_day));
    }
function exampleTime_Day():Void {
        var _d:Time = (stdgo.time.Time.date(((2000 : GoInt)), ((2 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((30 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc) == null ? null : stdgo.time.Time.date(((2000 : GoInt)), ((2 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((30 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc).__copy__());
        var _day:GoInt = _d.day();
        stdgo.fmt.Fmt.printf(((((("day = %v\n" : GoString))) : GoString)), Go.toInterface(_day));
    }
function exampleTime_Equal():Void {
        var _secondsEastOfUTC:GoInt = (((("28800000000000" : Duration)).seconds() : GoInt));
        var _beijing = stdgo.time.Time.fixedZone(((((("Beijing Time" : GoString))) : GoString)), _secondsEastOfUTC);
        var _d1:Time = (stdgo.time.Time.date(((2000 : GoInt)), ((2 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((30 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc) == null ? null : stdgo.time.Time.date(((2000 : GoInt)), ((2 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((30 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc).__copy__());
        var _d2:Time = (stdgo.time.Time.date(((2000 : GoInt)), ((2 : Month)), ((1 : GoInt)), ((20 : GoInt)), ((30 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _beijing) == null ? null : stdgo.time.Time.date(((2000 : GoInt)), ((2 : Month)), ((1 : GoInt)), ((20 : GoInt)), ((30 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _beijing).__copy__());
        var _datesEqualUsingEqualOperator:Bool = _d1 == _d2;
        var _datesEqualUsingFunction:Bool = _d1.equal((_d2 == null ? null : _d2.__copy__()));
        stdgo.fmt.Fmt.printf(((((("datesEqualUsingEqualOperator = %v\n" : GoString))) : GoString)), Go.toInterface(_datesEqualUsingEqualOperator));
        stdgo.fmt.Fmt.printf(((((("datesEqualUsingFunction = %v\n" : GoString))) : GoString)), Go.toInterface(_datesEqualUsingFunction));
    }
function exampleTime_String():Void {
        var _timeWithNanoseconds:Time = (stdgo.time.Time.date(((2000 : GoInt)), ((2 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((13 : GoInt)), ((14 : GoInt)), ((15 : GoInt)), stdgo.time.Time.utc) == null ? null : stdgo.time.Time.date(((2000 : GoInt)), ((2 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((13 : GoInt)), ((14 : GoInt)), ((15 : GoInt)), stdgo.time.Time.utc).__copy__());
        var _withNanoseconds:GoString = ((_timeWithNanoseconds.string() : GoString));
        var _timeWithoutNanoseconds:Time = (stdgo.time.Time.date(((2000 : GoInt)), ((2 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((13 : GoInt)), ((14 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc) == null ? null : stdgo.time.Time.date(((2000 : GoInt)), ((2 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((13 : GoInt)), ((14 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc).__copy__());
        var _withoutNanoseconds:GoString = ((_timeWithoutNanoseconds.string() : GoString));
        stdgo.fmt.Fmt.printf(((((("withNanoseconds = %v\n" : GoString))) : GoString)), Go.toInterface(((_withNanoseconds : GoString))));
        stdgo.fmt.Fmt.printf(((((("withoutNanoseconds = %v\n" : GoString))) : GoString)), Go.toInterface(((_withoutNanoseconds : GoString))));
    }
function exampleTime_Sub():Void {
        var _start:Time = (stdgo.time.Time.date(((2000 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc) == null ? null : stdgo.time.Time.date(((2000 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc).__copy__());
        var _end:Time = (stdgo.time.Time.date(((2000 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc) == null ? null : stdgo.time.Time.date(((2000 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc).__copy__());
        var _difference:Duration = _end.sub((_start == null ? null : _start.__copy__()));
        stdgo.fmt.Fmt.printf(((((("difference = %v\n" : GoString))) : GoString)), Go.toInterface({
            final __self__ = new Duration_wrapper(_difference);
            __self__.abs = #if !macro function():Duration return _difference.abs() #else null #end;
            __self__.hours = #if !macro function():GoFloat64 return _difference.hours() #else null #end;
            __self__.microseconds = #if !macro function():GoInt64 return _difference.microseconds() #else null #end;
            __self__.milliseconds = #if !macro function():GoInt64 return _difference.milliseconds() #else null #end;
            __self__.minutes = #if !macro function():GoFloat64 return _difference.minutes() #else null #end;
            __self__.nanoseconds = #if !macro function():GoInt64 return _difference.nanoseconds() #else null #end;
            __self__.round = #if !macro function(_d:Duration):Duration return _difference.round(_d) #else null #end;
            __self__.seconds = #if !macro function():GoFloat64 return _difference.seconds() #else null #end;
            __self__.string = #if !macro function():GoString return _difference.string() #else null #end;
            __self__.truncate = #if !macro function(_d:Duration):Duration return _difference.truncate(_d) #else null #end;
            __self__;
        }));
    }
function exampleTime_AppendFormat():Void {
        var _t:Time = (stdgo.time.Time.date(((2017 : GoInt)), ((11 : Month)), ((4 : GoInt)), ((11 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc) == null ? null : stdgo.time.Time.date(((2017 : GoInt)), ((11 : Month)), ((4 : GoInt)), ((11 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), stdgo.time.Time.utc).__copy__());
        var _text = ((((((("Time: " : GoString))) : GoString)) : Slice<GoByte>));
        _text = _t.appendFormat(_text, ((((("3:04PM" : GoString))) : GoString)));
        stdgo.fmt.Fmt.println(((_text : GoString)));
    }
function exampleFixedZone():Void {
        var _loc = stdgo.time.Time.fixedZone(((((("UTC-8" : GoString))) : GoString)), ((-28800 : GoInt)));
        var _t:Time = (stdgo.time.Time.date(((2009 : GoInt)), ((11 : Month)), ((10 : GoInt)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc) == null ? null : stdgo.time.Time.date(((2009 : GoInt)), ((11 : Month)), ((10 : GoInt)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc).__copy__());
        stdgo.fmt.Fmt.println(((((("The time is:" : GoString))) : GoString)), _t.format(((((("02 Jan 06 15:04 MST" : GoString))) : GoString))));
    }
function testNextStdChunk(_t:stdgo.testing.Testing.T):Void {
        var _markChunks:GoString -> GoString = function(_format:GoString):GoString {
            var _out:GoString = ((((("" : GoString))) : GoString));
            {
                var _s:GoString = _format;
                while (_s != ((((("" : GoString))) : GoString))) {
                    var __tmp__ = nextStdChunk(_s), _prefix:GoString = __tmp__._0, _std:GoInt = __tmp__._1, _suffix:GoString = __tmp__._2;
                    _out = _out + (_prefix);
                    if (_std > ((0 : GoInt))) {
                        _out = _out + ((((((("(" : GoString))) : GoString)) + (stdChunkNames != null ? stdChunkNames[_std] : (("" : GoString)))) + (((((")" : GoString))) : GoString)));
                    };
                    _s = _suffix;
                };
            };
            return _out;
        };
        var _noParens:GoInt32 -> GoInt32 = function(_r:GoRune):GoRune {
            if ((_r == (("(".code : GoInt32))) || (_r == ((")".code : GoInt32)))) {
                return ((-1 : GoInt32));
            };
            return _r;
        };
        for (_0 => _marked in _nextStdChunkTests) {
            var _format:GoString = stdgo.strings.Strings.map(_noParens, _marked);
            var _out:GoString = _markChunks(_format);
            if (_out != _marked) {
                _t.errorf(((((("nextStdChunk parses %q as %q, want %q" : GoString))) : GoString)), Go.toInterface(_format), Go.toInterface(_out), Go.toInterface(_marked));
            };
        };
    }
function testRFC3339Conversion(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _f in _rfc3339Formats) {
            if (_f._time.format(((((("2006-01-02T15:04:05Z07:00" : GoString))) : GoString))) != _f._formattedValue) {
                _t.error(Go.toInterface(((((("RFC3339:" : GoString))) : GoString))));
                _t.errorf(((((("  want=%+v" : GoString))) : GoString)), Go.toInterface(_f._formattedValue));
                _t.errorf(((((("  have=%+v" : GoString))) : GoString)), Go.toInterface(_f._time.format(((((("2006-01-02T15:04:05Z07:00" : GoString))) : GoString)))));
            };
        };
    }
function testFormat(_t:stdgo.testing.Testing.T):Void {
        var _time:Time = (unix(((0 : GoInt64)), (("1233810057012345600" : GoInt64))) == null ? null : unix(((0 : GoInt64)), (("1233810057012345600" : GoInt64))).__copy__());
        for (_0 => _test in _formatTests) {
            var _result:GoString = _time.format(_test._format);
            if (_result != _test._result) {
                _t.errorf(((((("%s expected %q got %q" : GoString))) : GoString)), Go.toInterface(_test._name), Go.toInterface(_test._result), Go.toInterface(_result));
            };
        };
    }
function testGoString(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _tt in _goStringTests) {
            if (_tt._in.goString() != _tt._want) {
                _t.errorf(((((("GoString (%q): got %q want %q" : GoString))) : GoString)), Go.toInterface({
                    final __self__ = new Time_wrapper(_tt._in);
                    __self__.add = #if !macro function(_d:Duration):Time return _tt._in.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _tt._in.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _tt._in.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _tt._in.appendFormat(_b, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _tt._in.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _tt._in.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _tt._in.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _tt._in.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _tt._in.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _tt._in.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _tt._in.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._in.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._in.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _tt._in.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _tt._in.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _tt._in.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _tt._in.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _tt._in.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _tt._in.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _tt._in.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._in.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._in.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._in.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _tt._in.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _tt._in.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _tt._in.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _tt._in.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _tt._in.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _tt._in.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _tt._in.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _tt._in.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _tt._in.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _tt._in.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _tt._in.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _tt._in.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _tt._in.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._in.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._in.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._in.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _tt._in.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _tt._in.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _tt._in.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _tt._in.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _tt._in.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _tt._in._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec:GoInt64):Void _tt._in._addSec(_sec) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _tt._in._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _tt._in._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _tt._in._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _tt._in._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _tt._in._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _tt._in._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec:GoInt64):Void _tt._in._setMono(_sec) #else null #end;
                    __self__._stripMono = #if !macro function():Void _tt._in._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _tt._in._unixSec() #else null #end;
                    __self__;
                }), Go.toInterface(_tt._in.goString()), Go.toInterface(_tt._want));
            };
        };
    }
/**
    // issue 12440.
**/
function testFormatSingleDigits(_t:stdgo.testing.Testing.T):Void {
        var _time:Time = (date(((2001 : GoInt)), ((2 : Month)), ((3 : GoInt)), ((4 : GoInt)), ((5 : GoInt)), ((6 : GoInt)), ((700000000 : GoInt)), utc) == null ? null : date(((2001 : GoInt)), ((2 : Month)), ((3 : GoInt)), ((4 : GoInt)), ((5 : GoInt)), ((6 : GoInt)), ((700000000 : GoInt)), utc).__copy__());
        var _test:stdgo.time_test.Time_test.FormatTest = ((new stdgo.time_test.Time_test.FormatTest(((((("single digit format" : GoString))) : GoString)), ((((("3:4:5" : GoString))) : GoString)), ((((("4:5:6" : GoString))) : GoString))) : stdgo.time_test.Time_test.FormatTest));
        var _result:GoString = _time.format(_test._format);
        if (_result != _test._result) {
            _t.errorf(((((("%s expected %q got %q" : GoString))) : GoString)), Go.toInterface(_test._name), Go.toInterface(_test._result), Go.toInterface(_result));
        };
    }
function testFormatShortYear(_t:stdgo.testing.Testing.T):Void {
        var _years = ((new Slice<GoInt>(
((-100001 : GoInt)),
((-100000 : GoInt)),
((-99999 : GoInt)),
((-10001 : GoInt)),
((-10000 : GoInt)),
((-9999 : GoInt)),
((-1001 : GoInt)),
((-1000 : GoInt)),
((-999 : GoInt)),
((-101 : GoInt)),
((-100 : GoInt)),
((-99 : GoInt)),
((-11 : GoInt)),
((-10 : GoInt)),
((-9 : GoInt)),
((-1 : GoInt)),
((0 : GoInt)),
((1 : GoInt)),
((9 : GoInt)),
((10 : GoInt)),
((11 : GoInt)),
((99 : GoInt)),
((100 : GoInt)),
((101 : GoInt)),
((999 : GoInt)),
((1000 : GoInt)),
((1001 : GoInt)),
((9999 : GoInt)),
((10000 : GoInt)),
((10001 : GoInt)),
((99999 : GoInt)),
((100000 : GoInt)),
((100001 : GoInt))) : Slice<GoInt>));
        for (_0 => _y in _years) {
            var _time:Time = (date(_y, ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(_y, ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__());
            var _result:GoString = _time.format(((((("2006.01.02" : GoString))) : GoString)));
            var _want:GoString = (("" : GoString));
            if (_y < ((0 : GoInt))) {
                _want = stdgo.fmt.Fmt.sprintf(((((("-%04d.%02d.%02d" : GoString))) : GoString)), Go.toInterface(-_y), Go.toInterface(((1 : GoInt))), Go.toInterface(((1 : GoInt))));
            } else {
                _want = stdgo.fmt.Fmt.sprintf(((((("%04d.%02d.%02d" : GoString))) : GoString)), Go.toInterface(_y), Go.toInterface(((1 : GoInt))), Go.toInterface(((1 : GoInt))));
            };
            if (_result != _want) {
                _t.errorf(((((("(jan 1 %d).Format(\"2006.01.02\") = %q, want %q" : GoString))) : GoString)), Go.toInterface(_y), Go.toInterface(_result), Go.toInterface(_want));
            };
        };
    }
function testParse(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _test in _parseTests) {
            var __tmp__ = parse(_test._format, _test._value), _time:Time = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if (_err != null) {
                _t.errorf(((((("%s error: %v" : GoString))) : GoString)), Go.toInterface(_test._name), Go.toInterface(_err));
            } else {
                _checkTime((_time == null ? null : _time.__copy__()), _test, _t);
            };
        };
    }
function testParseDayOutOfRange(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _test in _dayOutOfRangeTests) {
            var __tmp__ = parse(((((("Mon Jan _2 15:04:05 2006" : GoString))) : GoString)), _test._date), _1:Time = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if (_test._ok && (_err == null)) {} else if (!_test._ok && (_err != null)) {
                if (!stdgo.strings.Strings.contains(_err.error(), ((((("day out of range" : GoString))) : GoString)))) {
                    _t.errorf(((((("%q: expected \'day\' error, got %v" : GoString))) : GoString)), Go.toInterface(_test._date), Go.toInterface(_err));
                };
            } else if (_test._ok && (_err != null)) {
                _t.errorf(((((("%q: unexpected error: %v" : GoString))) : GoString)), Go.toInterface(_test._date), Go.toInterface(_err));
            } else if (!_test._ok && (_err == null)) {
                _t.errorf(((((("%q: expected \'day\' error, got none" : GoString))) : GoString)), Go.toInterface(_test._date));
            };
        };
    }
/**
    // TestParseInLocation checks that the Parse and ParseInLocation
    // functions do not get confused by the fact that AST (Arabia Standard
    // Time) and AST (Atlantic Standard Time) are different time zones,
    // even though they have the same abbreviation.
    //
    // ICANN has been slowly phasing out invented abbreviation in favor of
    // numeric time zones (for example, the Asia/Baghdad time zone
    // abbreviation got changed from AST to +03 in the 2017a tzdata
    // release); but we still want to make sure that the time package does
    // not get confused on systems with slightly older tzdata packages.
**/
function testParseInLocation(_t:stdgo.testing.Testing.T):Void {
        var __tmp__ = loadLocation(((((("Asia/Baghdad" : GoString))) : GoString))), _baghdad:Ref<Location> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
        if (_err != null) {
            _t.fatal(Go.toInterface(_err));
        };
        var _t1:Time = (({  } : Time)), _t2:Time = (({  } : Time));
        {
            var __tmp__ = parseInLocation(((((("Jan 02 2006 MST" : GoString))) : GoString)), ((((("Feb 01 2013 AST" : GoString))) : GoString)), _baghdad);
            _t1 = (__tmp__._0 == null ? null : __tmp__._0.__copy__());
            _err = __tmp__._1;
        };
        if (_err != null) {
            _t.fatal(Go.toInterface(_err));
        };
        var __tmp__ = _t1.zone(), _0:GoString = __tmp__._0, _offset:GoInt = __tmp__._1;
        if (_offset != ((0 : GoInt))) {
            _t2 = (date(((2013 : GoInt)), ((2 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _baghdad) == null ? null : date(((2013 : GoInt)), ((2 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _baghdad).__copy__());
            if (_t1 != _t2) {
                _t.fatalf(((((("ParseInLocation(Feb 01 2013 AST, Baghdad) = %v, want %v" : GoString))) : GoString)), Go.toInterface({
                    final __self__ = new Time_wrapper(_t1);
                    __self__.add = #if !macro function(_d:Duration):Time return _t1.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _t1.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _t1.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _t1.appendFormat(_b, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _t1.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _t1.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _t1.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _t1.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _t1.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _t1.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _t1.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _t1.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _t1.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _t1.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _t1.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _t1.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _t1.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _t1.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _t1.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _t1.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _t1.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _t1.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _t1.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _t1.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _t1.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _t1.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _t1.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _t1.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _t1.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _t1.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _t1.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _t1.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _t1.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _t1.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _t1.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _t1.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _t1._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec:GoInt64):Void _t1._addSec(_sec) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _t1._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _t1._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _t1._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _t1._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _t1._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _t1._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec:GoInt64):Void _t1._setMono(_sec) #else null #end;
                    __self__._stripMono = #if !macro function():Void _t1._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _t1._unixSec() #else null #end;
                    __self__;
                }), Go.toInterface({
                    final __self__ = new Time_wrapper(_t2);
                    __self__.add = #if !macro function(_d:Duration):Time return _t2.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _t2.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _t2.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _t2.appendFormat(_b, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _t2.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _t2.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _t2.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _t2.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _t2.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _t2.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _t2.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _t2.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _t2.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _t2.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _t2.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _t2.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _t2.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _t2.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _t2.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _t2.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _t2.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _t2.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _t2.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _t2.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _t2.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _t2.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _t2.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _t2.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _t2.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _t2.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _t2.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _t2.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _t2.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _t2.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _t2.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _t2.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _t2._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec:GoInt64):Void _t2._addSec(_sec) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _t2._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _t2._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _t2._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _t2._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _t2._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _t2._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec:GoInt64):Void _t2._setMono(_sec) #else null #end;
                    __self__._stripMono = #if !macro function():Void _t2._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _t2._unixSec() #else null #end;
                    __self__;
                }));
            };
            if (_offset != ((10800 : GoInt))) {
                _t.fatalf(((((("ParseInLocation(Feb 01 2013 AST, Baghdad).Zone = _, %d, want _, %d" : GoString))) : GoString)), Go.toInterface(_offset), Go.toInterface(((10800 : GoInt))));
            };
        };
        var __tmp__ = loadLocation(((((("America/Blanc-Sablon" : GoString))) : GoString))), _blancSablon:Ref<Location> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
        if (_err != null) {
            _t.fatal(Go.toInterface(_err));
        };
        {
            var __tmp__ = parseInLocation(((((("Jan 02 2006 MST" : GoString))) : GoString)), ((((("Feb 01 2013 AST" : GoString))) : GoString)), _blancSablon);
            _t1 = (__tmp__._0 == null ? null : __tmp__._0.__copy__());
            _err = __tmp__._1;
        };
        if (_err != null) {
            _t.fatal(Go.toInterface(_err));
        };
        _t2 = (date(((2013 : GoInt)), ((2 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _blancSablon) == null ? null : date(((2013 : GoInt)), ((2 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _blancSablon).__copy__());
        if (_t1 != _t2) {
            _t.fatalf(((((("ParseInLocation(Feb 01 2013 AST, Blanc-Sablon) = %v, want %v" : GoString))) : GoString)), Go.toInterface({
                final __self__ = new Time_wrapper(_t1);
                __self__.add = #if !macro function(_d:Duration):Time return _t1.add(_d) #else null #end;
                __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _t1.addDate(_years, _months, _days) #else null #end;
                __self__.after = #if !macro function(__0:Time):Bool return _t1.after(__0) #else null #end;
                __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _t1.appendFormat(_b, _layout) #else null #end;
                __self__.before = #if !macro function(__0:Time):Bool return _t1.before(__0) #else null #end;
                __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _t1.clock() #else null #end;
                __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _t1.date() #else null #end;
                __self__.day = #if !macro function():GoInt return _t1.day() #else null #end;
                __self__.equal = #if !macro function(__0:Time):Bool return _t1.equal(__0) #else null #end;
                __self__.format = #if !macro function(__0:GoString):GoString return _t1.format(__0) #else null #end;
                __self__.goString = #if !macro function():GoString return _t1.goString() #else null #end;
                __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.gobDecode(__0) #else null #end;
                __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.gobEncode() #else null #end;
                __self__.hour = #if !macro function():GoInt return _t1.hour() #else null #end;
                __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _t1.isoweek() #else null #end;
                __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _t1.in_(__0) #else null #end;
                __self__.isDST = #if !macro function():Bool return _t1.isDST() #else null #end;
                __self__.isZero = #if !macro function():Bool return _t1.isZero() #else null #end;
                __self__.local = #if !macro function():Time return _t1.local() #else null #end;
                __self__.location = #if !macro function():Ref<Location> return _t1.location() #else null #end;
                __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalBinary() #else null #end;
                __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalJSON() #else null #end;
                __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalText() #else null #end;
                __self__.minute = #if !macro function():GoInt return _t1.minute() #else null #end;
                __self__.month = #if !macro function():Month return _t1.month() #else null #end;
                __self__.nanosecond = #if !macro function():GoInt return _t1.nanosecond() #else null #end;
                __self__.round = #if !macro function(_d:Duration):Time return _t1.round(_d) #else null #end;
                __self__.second = #if !macro function():GoInt return _t1.second() #else null #end;
                __self__.string = #if !macro function():GoString return _t1.string() #else null #end;
                __self__.sub = #if !macro function(__0:Time):Duration return _t1.sub(__0) #else null #end;
                __self__.truncate = #if !macro function(_d:Duration):Time return _t1.truncate(_d) #else null #end;
                __self__.utc = #if !macro function():Time return _t1.utc() #else null #end;
                __self__.unix = #if !macro function():GoInt64 return _t1.unix() #else null #end;
                __self__.unixMicro = #if !macro function():GoInt64 return _t1.unixMicro() #else null #end;
                __self__.unixMilli = #if !macro function():GoInt64 return _t1.unixMilli() #else null #end;
                __self__.unixNano = #if !macro function():GoInt64 return _t1.unixNano() #else null #end;
                __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalBinary(__0) #else null #end;
                __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalJSON(__0) #else null #end;
                __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalText(__0) #else null #end;
                __self__.weekday = #if !macro function():Weekday return _t1.weekday() #else null #end;
                __self__.year = #if !macro function():GoInt return _t1.year() #else null #end;
                __self__.yearDay = #if !macro function():GoInt return _t1.yearDay() #else null #end;
                __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _t1.zone() #else null #end;
                __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _t1.zoneBounds() #else null #end;
                __self__._abs = #if !macro function():GoUInt64 return _t1._abs() #else null #end;
                __self__._addSec = #if !macro function(_sec:GoInt64):Void _t1._addSec(_sec) #else null #end;
                __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _t1._date(__0) #else null #end;
                __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _t1._locabs() #else null #end;
                __self__._mono = #if !macro function():GoInt64 return _t1._mono() #else null #end;
                __self__._nsec = #if !macro function():GoInt32 return _t1._nsec() #else null #end;
                __self__._sec = #if !macro function():GoInt64 return _t1._sec() #else null #end;
                __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _t1._setLoc(__0) #else null #end;
                __self__._setMono = #if !macro function(_sec:GoInt64):Void _t1._setMono(_sec) #else null #end;
                __self__._stripMono = #if !macro function():Void _t1._stripMono() #else null #end;
                __self__._unixSec = #if !macro function():GoInt64 return _t1._unixSec() #else null #end;
                __self__;
            }), Go.toInterface({
                final __self__ = new Time_wrapper(_t2);
                __self__.add = #if !macro function(_d:Duration):Time return _t2.add(_d) #else null #end;
                __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _t2.addDate(_years, _months, _days) #else null #end;
                __self__.after = #if !macro function(__0:Time):Bool return _t2.after(__0) #else null #end;
                __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _t2.appendFormat(_b, _layout) #else null #end;
                __self__.before = #if !macro function(__0:Time):Bool return _t2.before(__0) #else null #end;
                __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _t2.clock() #else null #end;
                __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _t2.date() #else null #end;
                __self__.day = #if !macro function():GoInt return _t2.day() #else null #end;
                __self__.equal = #if !macro function(__0:Time):Bool return _t2.equal(__0) #else null #end;
                __self__.format = #if !macro function(__0:GoString):GoString return _t2.format(__0) #else null #end;
                __self__.goString = #if !macro function():GoString return _t2.goString() #else null #end;
                __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.gobDecode(__0) #else null #end;
                __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.gobEncode() #else null #end;
                __self__.hour = #if !macro function():GoInt return _t2.hour() #else null #end;
                __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _t2.isoweek() #else null #end;
                __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _t2.in_(__0) #else null #end;
                __self__.isDST = #if !macro function():Bool return _t2.isDST() #else null #end;
                __self__.isZero = #if !macro function():Bool return _t2.isZero() #else null #end;
                __self__.local = #if !macro function():Time return _t2.local() #else null #end;
                __self__.location = #if !macro function():Ref<Location> return _t2.location() #else null #end;
                __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.marshalBinary() #else null #end;
                __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.marshalJSON() #else null #end;
                __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.marshalText() #else null #end;
                __self__.minute = #if !macro function():GoInt return _t2.minute() #else null #end;
                __self__.month = #if !macro function():Month return _t2.month() #else null #end;
                __self__.nanosecond = #if !macro function():GoInt return _t2.nanosecond() #else null #end;
                __self__.round = #if !macro function(_d:Duration):Time return _t2.round(_d) #else null #end;
                __self__.second = #if !macro function():GoInt return _t2.second() #else null #end;
                __self__.string = #if !macro function():GoString return _t2.string() #else null #end;
                __self__.sub = #if !macro function(__0:Time):Duration return _t2.sub(__0) #else null #end;
                __self__.truncate = #if !macro function(_d:Duration):Time return _t2.truncate(_d) #else null #end;
                __self__.utc = #if !macro function():Time return _t2.utc() #else null #end;
                __self__.unix = #if !macro function():GoInt64 return _t2.unix() #else null #end;
                __self__.unixMicro = #if !macro function():GoInt64 return _t2.unixMicro() #else null #end;
                __self__.unixMilli = #if !macro function():GoInt64 return _t2.unixMilli() #else null #end;
                __self__.unixNano = #if !macro function():GoInt64 return _t2.unixNano() #else null #end;
                __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.unmarshalBinary(__0) #else null #end;
                __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.unmarshalJSON(__0) #else null #end;
                __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.unmarshalText(__0) #else null #end;
                __self__.weekday = #if !macro function():Weekday return _t2.weekday() #else null #end;
                __self__.year = #if !macro function():GoInt return _t2.year() #else null #end;
                __self__.yearDay = #if !macro function():GoInt return _t2.yearDay() #else null #end;
                __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _t2.zone() #else null #end;
                __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _t2.zoneBounds() #else null #end;
                __self__._abs = #if !macro function():GoUInt64 return _t2._abs() #else null #end;
                __self__._addSec = #if !macro function(_sec:GoInt64):Void _t2._addSec(_sec) #else null #end;
                __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _t2._date(__0) #else null #end;
                __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _t2._locabs() #else null #end;
                __self__._mono = #if !macro function():GoInt64 return _t2._mono() #else null #end;
                __self__._nsec = #if !macro function():GoInt32 return _t2._nsec() #else null #end;
                __self__._sec = #if !macro function():GoInt64 return _t2._sec() #else null #end;
                __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _t2._setLoc(__0) #else null #end;
                __self__._setMono = #if !macro function(_sec:GoInt64):Void _t2._setMono(_sec) #else null #end;
                __self__._stripMono = #if !macro function():Void _t2._stripMono() #else null #end;
                __self__._unixSec = #if !macro function():GoInt64 return _t2._unixSec() #else null #end;
                __self__;
            }));
        };
        {
            var __tmp__ = _t1.zone();
            _offset = __tmp__._1;
        };
        if (_offset != ((-14400 : GoInt))) {
            _t.fatalf(((((("ParseInLocation(Feb 01 2013 AST, Blanc-Sablon).Zone = _, %d, want _, %d" : GoString))) : GoString)), Go.toInterface(_offset), Go.toInterface(((-14400 : GoInt))));
        };
    }
function testLoadLocationZipFile(_t:stdgo.testing.Testing.T):Void {
        var __recover_exception__:AnyInterface = null;
        var __deferstack__:Array<Void -> Void> = [];
        try {
            var _undo:() -> Void = disablePlatformSources();
            __deferstack__.unshift(() -> _undo());
            var __tmp__ = loadLocation(((((("Australia/Sydney" : GoString))) : GoString))), _0:Ref<Location> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if (_err != null) {
                _t.fatal(Go.toInterface(_err));
            };
            for (defer in __deferstack__) {
                defer();
            };
            {
                for (defer in __deferstack__) {
                    defer();
                };
                if (__recover_exception__ != null) throw __recover_exception__;
                return;
            };
        } catch(__exception__) {
            if (!(__exception__.native is AnyInterfaceData)) throw __exception__;
            __recover_exception__ = __exception__.native;
            for (defer in __deferstack__) {
                defer();
            };
            if (__recover_exception__ != null) throw __recover_exception__;
            return;
        };
    }
/**
    // Problematic time zone format needs special tests.
**/
function testRubyParse(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _test in _rubyTests) {
            var __tmp__ = parse(_test._format, _test._value), _time:Time = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if (_err != null) {
                _t.errorf(((((("%s error: %v" : GoString))) : GoString)), Go.toInterface(_test._name), Go.toInterface(_err));
            } else {
                _checkTime((_time == null ? null : _time.__copy__()), _test, _t);
            };
        };
    }
function _checkTime(_time:Time, _test:ParseTest, _t:stdgo.testing.Testing.T):Void {
        if ((_test._yearSign >= ((0 : GoInt))) && ((_test._yearSign * _time.year()) != ((2010 : GoInt)))) {
            _t.errorf(((((("%s: bad year: %d not %d" : GoString))) : GoString)), Go.toInterface(_test._name), Go.toInterface(_time.year()), Go.toInterface(((2010 : GoInt))));
        };
        if (_time.month() != ((2 : Month))) {
            _t.errorf(((((("%s: bad month: %s not %s" : GoString))) : GoString)), Go.toInterface(_test._name), Go.toInterface({
                final __self__ = new Month_wrapper(_time.month());
                __self__.string = #if !macro function():GoString return _time.month().string() #else null #end;
                __self__;
            }), Go.toInterface({
                final __self__ = new Month_wrapper(((2 : Month)));
                __self__.string = #if !macro function():GoString return ((2 : Month)).string() #else null #end;
                __self__;
            }));
        };
        if (_time.day() != ((4 : GoInt))) {
            _t.errorf(((((("%s: bad day: %d not %d" : GoString))) : GoString)), Go.toInterface(_test._name), Go.toInterface(_time.day()), Go.toInterface(((4 : GoInt))));
        };
        if (_time.hour() != ((21 : GoInt))) {
            _t.errorf(((((("%s: bad hour: %d not %d" : GoString))) : GoString)), Go.toInterface(_test._name), Go.toInterface(_time.hour()), Go.toInterface(((21 : GoInt))));
        };
        if (_time.minute() != ((0 : GoInt))) {
            _t.errorf(((((("%s: bad minute: %d not %d" : GoString))) : GoString)), Go.toInterface(_test._name), Go.toInterface(_time.minute()), Go.toInterface(((0 : GoInt))));
        };
        if (_time.second() != ((57 : GoInt))) {
            _t.errorf(((((("%s: bad second: %d not %d" : GoString))) : GoString)), Go.toInterface(_test._name), Go.toInterface(_time.second()), Go.toInterface(((57 : GoInt))));
        };
        var __tmp__ = stdgo.strconv.Strconv.parseUint(((((((("012345678" : GoString))) : GoString)).__slice__(0, _test._fracDigits) : GoString)) + ((((((("000000000" : GoString))) : GoString)).__slice__(0, ((9 : GoInt)) - _test._fracDigits) : GoString)), ((10 : GoInt)), ((0 : GoInt))), _nanosec:GoUInt64 = __tmp__._0, _err:stdgo.Error = __tmp__._1;
        if (_err != null) {
            throw Go.toInterface(_err);
        };
        if (_time.nanosecond() != ((_nanosec : GoInt))) {
            _t.errorf(((((("%s: bad nanosecond: %d not %d" : GoString))) : GoString)), Go.toInterface(_test._name), Go.toInterface(_time.nanosecond()), Go.toInterface(_nanosec));
        };
        var __tmp__ = _time.zone(), _name:GoString = __tmp__._0, _offset:GoInt = __tmp__._1;
        if (_test._hasTZ && (_offset != ((-28800 : GoInt)))) {
            _t.errorf(((((("%s: bad tz offset: %s %d not %d" : GoString))) : GoString)), Go.toInterface(_test._name), Go.toInterface(_name), Go.toInterface(_offset), Go.toInterface(((-28800 : GoInt))));
        };
        if (_test._hasWD && (_time.weekday() != ((4 : Weekday)))) {
            _t.errorf(((((("%s: bad weekday: %s not %s" : GoString))) : GoString)), Go.toInterface(_test._name), Go.toInterface({
                final __self__ = new Weekday_wrapper(_time.weekday());
                __self__.string = #if !macro function():GoString return _time.weekday().string() #else null #end;
                __self__;
            }), Go.toInterface({
                final __self__ = new Weekday_wrapper(((4 : Weekday)));
                __self__.string = #if !macro function():GoString return ((4 : Weekday)).string() #else null #end;
                __self__;
            }));
        };
    }
function testFormatAndParse(_t:stdgo.testing.Testing.T):Void {
        {};
        var _f:GoInt64 -> Bool = function(_sec:GoInt64):Bool {
            var _t1:Time = (unix(_sec / ((2 : GoInt64)), ((0 : GoInt64))) == null ? null : unix(_sec / ((2 : GoInt64)), ((0 : GoInt64))).__copy__());
            if (((_t1.year() < ((1000 : GoInt))) || (_t1.year() > ((9999 : GoInt)))) || (_t1.unix() != _sec)) {
                return true;
            };
            var __tmp__ = parse(((((("Mon MST 2006-01-02T15:04:05Z07:00" : GoString))) : GoString)), _t1.format(((((("Mon MST 2006-01-02T15:04:05Z07:00" : GoString))) : GoString)))), _t2:Time = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if (_err != null) {
                _t.errorf(((((("error: %s" : GoString))) : GoString)), Go.toInterface(_err));
                return false;
            };
            if ((_t1.unix() != _t2.unix()) || (_t1.nanosecond() != _t2.nanosecond())) {
                _t.errorf(((((("FormatAndParse %d: %q(%d) %q(%d)" : GoString))) : GoString)), Go.toInterface(_sec), Go.toInterface({
                    final __self__ = new Time_wrapper(_t1);
                    __self__.add = #if !macro function(_d:Duration):Time return _t1.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _t1.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _t1.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _t1.appendFormat(_b, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _t1.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _t1.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _t1.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _t1.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _t1.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _t1.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _t1.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _t1.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _t1.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _t1.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _t1.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _t1.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _t1.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _t1.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _t1.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _t1.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _t1.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _t1.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _t1.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _t1.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _t1.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _t1.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _t1.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _t1.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _t1.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _t1.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _t1.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _t1.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _t1.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _t1.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _t1.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _t1.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _t1._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec_:GoInt64):Void _t1._addSec(_sec_) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _t1._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _t1._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _t1._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _t1._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _t1._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _t1._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec__:GoInt64):Void _t1._setMono(_sec__) #else null #end;
                    __self__._stripMono = #if !macro function():Void _t1._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _t1._unixSec() #else null #end;
                    __self__;
                }), Go.toInterface(_t1.unix()), Go.toInterface({
                    final __self__ = new Time_wrapper(_t2);
                    __self__.add = #if !macro function(_d:Duration):Time return _t2.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _t2.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _t2.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _t2.appendFormat(_b, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _t2.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _t2.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _t2.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _t2.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _t2.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _t2.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _t2.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _t2.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _t2.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _t2.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _t2.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _t2.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _t2.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _t2.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _t2.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _t2.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _t2.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _t2.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _t2.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _t2.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _t2.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _t2.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _t2.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _t2.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _t2.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _t2.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _t2.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _t2.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _t2.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _t2.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _t2.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _t2.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _t2._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec_:GoInt64):Void _t2._addSec(_sec_) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _t2._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _t2._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _t2._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _t2._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _t2._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _t2._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec__:GoInt64):Void _t2._setMono(_sec__) #else null #end;
                    __self__._stripMono = #if !macro function():Void _t2._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _t2._unixSec() #else null #end;
                    __self__;
                }), Go.toInterface(_t2.unix()));
                return false;
            };
            return true;
        };
        var _f32:GoInt32 -> Bool = function(_sec:GoInt32):Bool {
            return _f(((_sec : GoInt64)));
        };
        var _cfg = (({ maxCount : ((10000 : GoInt)) } : stdgo.testing.quick.Quick.Config));
        {
            var _err:stdgo.Error = stdgo.testing.quick.Quick.check(Go.toInterface(_f32), _cfg);
            if (_err != null) {
                _t.fatal(Go.toInterface(_err));
            };
        };
        {
            var _err:stdgo.Error = stdgo.testing.quick.Quick.check(Go.toInterface(_f), _cfg);
            if (_err != null) {
                _t.fatal(Go.toInterface(_err));
            };
        };
    }
function testParseTimeZone(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _test in _parseTimeZoneTests) {
            var __tmp__ = parseTimeZone(_test._value), _length:GoInt = __tmp__._0, _ok:Bool = __tmp__._1;
            if (_ok != _test._ok) {
                _t.errorf(((((("expected %t for %q got %t" : GoString))) : GoString)), Go.toInterface(_test._ok), Go.toInterface(_test._value), Go.toInterface(_ok));
            } else if (_length != _test._length) {
                _t.errorf(((((("expected %d for %q got %d" : GoString))) : GoString)), Go.toInterface(_test._length), Go.toInterface(_test._value), Go.toInterface(_length));
            };
        };
    }
function testParseErrors(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _test in _parseErrorTests) {
            var __tmp__ = parse(_test._format, _test._value), _1:Time = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if (_err == null) {
                _t.errorf(((((("expected error for %q %q" : GoString))) : GoString)), Go.toInterface(_test._format), Go.toInterface(_test._value));
            } else if (!stdgo.strings.Strings.contains(_err.error(), _test._expect)) {
                _t.errorf(((((("expected error with %q for %q %q; got %s" : GoString))) : GoString)), Go.toInterface(_test._expect), Go.toInterface(_test._format), Go.toInterface(_test._value), Go.toInterface(_err));
            };
        };
    }
function testNoonIs12PM(_t:stdgo.testing.Testing.T):Void {
        var _noon:Time = (date(((0 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((0 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__());
        {};
        var _got:GoString = _noon.format(((((("3:04PM" : GoString))) : GoString)));
        if (_got != ((((("12:00PM" : GoString))) : GoString))) {
            _t.errorf(((((("got %q; expect %q" : GoString))) : GoString)), Go.toInterface(_got), Go.toInterface(((((("12:00PM" : GoString))) : GoString))));
        };
        _got = _noon.format(((((("03:04PM" : GoString))) : GoString)));
        if (_got != ((((("12:00PM" : GoString))) : GoString))) {
            _t.errorf(((((("got %q; expect %q" : GoString))) : GoString)), Go.toInterface(_got), Go.toInterface(((((("12:00PM" : GoString))) : GoString))));
        };
    }
function testMidnightIs12AM(_t:stdgo.testing.Testing.T):Void {
        var _midnight:Time = (date(((0 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((0 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__());
        var _expect:GoString = ((((("12:00AM" : GoString))) : GoString));
        var _got:GoString = _midnight.format(((((("3:04PM" : GoString))) : GoString)));
        if (_got != _expect) {
            _t.errorf(((((("got %q; expect %q" : GoString))) : GoString)), Go.toInterface(_got), Go.toInterface(_expect));
        };
        _got = _midnight.format(((((("03:04PM" : GoString))) : GoString)));
        if (_got != _expect) {
            _t.errorf(((((("got %q; expect %q" : GoString))) : GoString)), Go.toInterface(_got), Go.toInterface(_expect));
        };
    }
function test12PMIsNoon(_t:stdgo.testing.Testing.T):Void {
        var __tmp__ = parse(((((("3:04PM" : GoString))) : GoString)), ((((("12:00PM" : GoString))) : GoString))), _noon:Time = __tmp__._0, _err:stdgo.Error = __tmp__._1;
        if (_err != null) {
            _t.fatal(Go.toInterface(((((("error parsing date:" : GoString))) : GoString))), Go.toInterface(_err));
        };
        if (_noon.hour() != ((12 : GoInt))) {
            _t.errorf(((((("got %d; expect 12" : GoString))) : GoString)), Go.toInterface(_noon.hour()));
        };
        {
            var __tmp__ = parse(((((("03:04PM" : GoString))) : GoString)), ((((("12:00PM" : GoString))) : GoString)));
            _noon = (__tmp__._0 == null ? null : __tmp__._0.__copy__());
            _err = __tmp__._1;
        };
        if (_err != null) {
            _t.fatal(Go.toInterface(((((("error parsing date:" : GoString))) : GoString))), Go.toInterface(_err));
        };
        if (_noon.hour() != ((12 : GoInt))) {
            _t.errorf(((((("got %d; expect 12" : GoString))) : GoString)), Go.toInterface(_noon.hour()));
        };
    }
function test12AMIsMidnight(_t:stdgo.testing.Testing.T):Void {
        var __tmp__ = parse(((((("3:04PM" : GoString))) : GoString)), ((((("12:00AM" : GoString))) : GoString))), _midnight:Time = __tmp__._0, _err:stdgo.Error = __tmp__._1;
        if (_err != null) {
            _t.fatal(Go.toInterface(((((("error parsing date:" : GoString))) : GoString))), Go.toInterface(_err));
        };
        if (_midnight.hour() != ((0 : GoInt))) {
            _t.errorf(((((("got %d; expect 0" : GoString))) : GoString)), Go.toInterface(_midnight.hour()));
        };
        {
            var __tmp__ = parse(((((("03:04PM" : GoString))) : GoString)), ((((("12:00AM" : GoString))) : GoString)));
            _midnight = (__tmp__._0 == null ? null : __tmp__._0.__copy__());
            _err = __tmp__._1;
        };
        if (_err != null) {
            _t.fatal(Go.toInterface(((((("error parsing date:" : GoString))) : GoString))), Go.toInterface(_err));
        };
        if (_midnight.hour() != ((0 : GoInt))) {
            _t.errorf(((((("got %d; expect 0" : GoString))) : GoString)), Go.toInterface(_midnight.hour()));
        };
    }
/**
    // Check that a time without a Zone still produces a (numeric) time zone
    // when formatted with MST as a requested zone.
**/
function testMissingZone(_t:stdgo.testing.Testing.T):Void {
        var __tmp__ = parse(((((("Mon Jan 02 15:04:05 -0700 2006" : GoString))) : GoString)), ((((("Thu Feb 02 16:10:03 -0500 2006" : GoString))) : GoString))), _time:Time = __tmp__._0, _err:stdgo.Error = __tmp__._1;
        if (_err != null) {
            _t.fatal(Go.toInterface(((((("error parsing date:" : GoString))) : GoString))), Go.toInterface(_err));
        };
        var _expect:GoString = ((((("Thu Feb  2 16:10:03 -0500 2006" : GoString))) : GoString));
        var _str:GoString = _time.format(((((("Mon Jan _2 15:04:05 MST 2006" : GoString))) : GoString)));
        if (_str != _expect) {
            _t.errorf(((((("got %s; expect %s" : GoString))) : GoString)), Go.toInterface(_str), Go.toInterface(_expect));
        };
    }
function testMinutesInTimeZone(_t:stdgo.testing.Testing.T):Void {
        var __tmp__ = parse(((((("Mon Jan 02 15:04:05 -0700 2006" : GoString))) : GoString)), ((((("Mon Jan 02 15:04:05 +0123 2006" : GoString))) : GoString))), _time:Time = __tmp__._0, _err:stdgo.Error = __tmp__._1;
        if (_err != null) {
            _t.fatal(Go.toInterface(((((("error parsing date:" : GoString))) : GoString))), Go.toInterface(_err));
        };
        var _expected:GoInt = ((4980 : GoInt));
        var __tmp__ = _time.zone(), _0:GoString = __tmp__._0, _offset:GoInt = __tmp__._1;
        if (_offset != _expected) {
            _t.errorf(((((("ZoneOffset = %d, want %d" : GoString))) : GoString)), Go.toInterface(_offset), Go.toInterface(_expected));
        };
    }
function testParseSecondsInTimeZone(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _test in _secondsTimeZoneOffsetTests) {
            var __tmp__ = parse(_test._format, _test._value), _time:Time = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if (_err != null) {
                _t.fatal(Go.toInterface(((((("error parsing date:" : GoString))) : GoString))), Go.toInterface(_err));
            };
            var __tmp__ = _time.zone(), _1:GoString = __tmp__._0, _offset:GoInt = __tmp__._1;
            if (_offset != _test._expectedoffset) {
                _t.errorf(((((("ZoneOffset = %d, want %d" : GoString))) : GoString)), Go.toInterface(_offset), Go.toInterface(_test._expectedoffset));
            };
        };
    }
function testFormatSecondsInTimeZone(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _test in _secondsTimeZoneOffsetTests) {
            var _d:Time = (date(((1871 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((5 : GoInt)), ((33 : GoInt)), ((2 : GoInt)), ((0 : GoInt)), fixedZone(((((("LMT" : GoString))) : GoString)), _test._expectedoffset)) == null ? null : date(((1871 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((5 : GoInt)), ((33 : GoInt)), ((2 : GoInt)), ((0 : GoInt)), fixedZone(((((("LMT" : GoString))) : GoString)), _test._expectedoffset)).__copy__());
            var _timestr:GoString = _d.format(_test._format);
            if (_timestr != _test._value) {
                _t.errorf(((((("Format = %s, want %s" : GoString))) : GoString)), Go.toInterface(_timestr), Go.toInterface(_test._value));
            };
        };
    }
/**
    // Issue 11334.
**/
function testUnderscoreTwoThousand(_t:stdgo.testing.Testing.T):Void {
        var _format:GoString = ((((("15:04_20060102" : GoString))) : GoString));
        var _input:GoString = ((((("14:38_20150618" : GoString))) : GoString));
        var __tmp__ = parse(_format, _input), _time:Time = __tmp__._0, _err:stdgo.Error = __tmp__._1;
        if (_err != null) {
            _t.error(Go.toInterface(_err));
        };
        {
            var __tmp__ = _time.date(), _y:GoInt = __tmp__._0, _m:Month = __tmp__._1, _d:GoInt = __tmp__._2;
            if (((_y != ((2015 : GoInt))) || (_m != ((6 : Month)))) || (_d != ((18 : GoInt)))) {
                _t.errorf(((((("Incorrect y/m/d, got %d/%d/%d" : GoString))) : GoString)), Go.toInterface(_y), Go.toInterface({
                    final __self__ = new Month_wrapper(_m);
                    __self__.string = #if !macro function():GoString return _m.string() #else null #end;
                    __self__;
                }), Go.toInterface(_d));
            };
        };
        {
            var _h:GoInt = _time.hour();
            if (_h != ((14 : GoInt))) {
                _t.errorf(((((("Incorrect hour, got %d" : GoString))) : GoString)), Go.toInterface(_h));
            };
        };
        {
            var _m:GoInt = _time.minute();
            if (_m != ((38 : GoInt))) {
                _t.errorf(((((("Incorrect minute, got %d" : GoString))) : GoString)), Go.toInterface(_m));
            };
        };
    }
/**
    // Issue 29918, 29916
**/
function testStd0xParseError(_t:stdgo.testing.Testing.T):Void {
        var _tests = ((new Slice<T__struct_2>((({ _format : ((((("01 MST" : GoString))) : GoString)), _value : ((((("0 MST" : GoString))) : GoString)), _valueElemPrefix : ((((("0" : GoString))) : GoString)) } : T__struct_2)), (({ _format : ((((("01 MST" : GoString))) : GoString)), _value : ((((("1 MST" : GoString))) : GoString)), _valueElemPrefix : ((((("1" : GoString))) : GoString)) } : T__struct_2)), (({ _format : ((((("Monday, 02-Jan-06 15:04:05 MST" : GoString))) : GoString)), _value : ((((("Thursday, 04-Feb-1 21:00:57 PST" : GoString))) : GoString)), _valueElemPrefix : ((((("1" : GoString))) : GoString)) } : T__struct_2))) : Slice<T__struct_2>));
        for (_0 => _tt in _tests) {
            var __tmp__ = parse(_tt._format, _tt._value), _1:Time = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if (_err == null) {
                _t.errorf(((((("Parse(%q, %q) did not fail as expected" : GoString))) : GoString)), Go.toInterface(_tt._format), Go.toInterface(_tt._value));
            } else {
                var __tmp__ = try {
                    { value : ((((_err.__underlying__().value : Dynamic)) : ParseError)), ok : true };
                } catch(_) {
                    { value : ((null : ParseError)), ok : false };
                }, _perr = __tmp__.value, _ok = __tmp__.ok;
                if (!_ok) {
                    _t.errorf(((((("Parse(%q, %q) returned error type %T, expected ParseError" : GoString))) : GoString)), Go.toInterface(_tt._format), Go.toInterface(_tt._value), Go.toInterface(_perr));
                } else if (!stdgo.strings.Strings.contains(_perr.error(), ((((("cannot parse" : GoString))) : GoString))) || !stdgo.strings.Strings.hasPrefix(_perr.valueElem, _tt._valueElemPrefix)) {
                    _t.errorf(((((("Parse(%q, %q) returned wrong parsing error message: %v" : GoString))) : GoString)), Go.toInterface(_tt._format), Go.toInterface(_tt._value), Go.toInterface(_perr));
                };
            };
        };
    }
function testParseMonthOutOfRange(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _test in _monthOutOfRangeTests) {
            var __tmp__ = parse(((((("01-02" : GoString))) : GoString)), _test._value), _1:Time = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if (!_test._ok && (_err != null)) {
                if (!stdgo.strings.Strings.contains(_err.error(), ((((("month out of range" : GoString))) : GoString)))) {
                    _t.errorf(((((("%q: expected \'month\' error, got %v" : GoString))) : GoString)), Go.toInterface(_test._value), Go.toInterface(_err));
                };
            } else if (_test._ok && (_err != null)) {
                _t.errorf(((((("%q: unexpected error: %v" : GoString))) : GoString)), Go.toInterface(_test._value), Go.toInterface(_err));
            } else if (!_test._ok && (_err == null)) {
                _t.errorf(((((("%q: expected \'month\' error, got none" : GoString))) : GoString)), Go.toInterface(_test._value));
            };
        };
    }
/**
    // Issue 37387.
**/
function testParseYday(_t:stdgo.testing.Testing.T):Void {
        _t.parallel();
        {
            var _i:GoInt = ((1 : GoInt));
            Go.cfor(_i <= ((365 : GoInt)), _i++, {
                var _d:GoString = stdgo.fmt.Fmt.sprintf(((((("2020-%03d" : GoString))) : GoString)), Go.toInterface(_i));
                var __tmp__ = parse(((((("2006-002" : GoString))) : GoString)), _d), _tm:Time = __tmp__._0, _err:stdgo.Error = __tmp__._1;
                if (_err != null) {
                    _t.errorf(((((("unexpected error for %s: %v" : GoString))) : GoString)), Go.toInterface(_d), Go.toInterface(_err));
                } else if ((_tm.year() != ((2020 : GoInt))) || (_tm.yearDay() != _i)) {
                    _t.errorf(((((("got year %d yearday %d, want %d %d" : GoString))) : GoString)), Go.toInterface(_tm.year()), Go.toInterface(_tm.yearDay()), Go.toInterface(((2020 : GoInt))), Go.toInterface(_i));
                };
            });
        };
    }
/**
    // Issue 45391.
**/
function testQuote(_t:stdgo.testing.Testing.T):Void {
        var _tests = ((new Slice<T__struct_4>((({ _s : (("\"" : GoString)), _want : (("\"\\\"\"" : GoString)) } : T__struct_4)), (({ _s : (("abc\"xyz\"" : GoString)), _want : (("\"abc\\\"xyz\\\"\"" : GoString)) } : T__struct_4)), (({ _s : ((((("" : GoString))) : GoString)), _want : (("\"\"" : GoString)) } : T__struct_4)), (({ _s : ((((("abc" : GoString))) : GoString)), _want : (("\"abc\"" : GoString)) } : T__struct_4)), (({ _s : (("☺" : GoString)), _want : (("\"\\xe2\\x98\\xba\"" : GoString)) } : T__struct_4)), (({ _s : (("☺ hello ☺ hello" : GoString)), _want : (("\"\\xe2\\x98\\xba hello \\xe2\\x98\\xba hello\"" : GoString)) } : T__struct_4)), (({ _s : (((((haxe.io.Bytes.ofHex("04") : GoString))) : GoString)), _want : (("\"\\x04\"" : GoString)) } : T__struct_4))) : Slice<T__struct_4>));
        for (_0 => _tt in _tests) {
            {
                var _q:GoString = quote(_tt._s);
                if (_q != _tt._want) {
                    _t.errorf(((((("Quote(%q) = got %q, want %q" : GoString))) : GoString)), Go.toInterface(_tt._s), Go.toInterface(_q), Go.toInterface(_tt._want));
                };
            };
        };
    }
/**
    // Issue 48037
**/
function testFormatFractionalSecondSeparators(_t:stdgo.testing.Testing.T):Void {
        var _tests = ((new Slice<T__struct_4>((({ _s : (("15:04:05.000" : GoString)), _want : (("21:00:57.012" : GoString)) } : T__struct_4)), (({ _s : (("15:04:05.999" : GoString)), _want : (("21:00:57.012" : GoString)) } : T__struct_4)), (({ _s : (("15:04:05,000" : GoString)), _want : (("21:00:57,012" : GoString)) } : T__struct_4)), (({ _s : (("15:04:05,999" : GoString)), _want : (("21:00:57,012" : GoString)) } : T__struct_4))) : Slice<T__struct_4>));
        var _time:Time = (unix(((0 : GoInt64)), (("1233810057012345600" : GoInt64))) == null ? null : unix(((0 : GoInt64)), (("1233810057012345600" : GoInt64))).__copy__());
        for (_0 => _tt in _tests) {
            {
                var _q:GoString = _time.format(_tt._s);
                if (_q != _tt._want) {
                    _t.errorf(((((("Format(%q) = got %q, want %q" : GoString))) : GoString)), Go.toInterface(_tt._s), Go.toInterface(_q), Go.toInterface(_tt._want));
                };
            };
        };
    }
/**
    // Issue 48685
**/
function testParseFractionalSecondsLongerThanNineDigits(_t:stdgo.testing.Testing.T):Void {
        var _tests = ((new Slice<T__struct_5>(
(({ _s : ((((("2021-09-29T16:04:33.000000000Z" : GoString))) : GoString)), _want : ((0 : GoInt)) } : T__struct_5)),
(({ _s : ((((("2021-09-29T16:04:33.000000001Z" : GoString))) : GoString)), _want : ((1 : GoInt)) } : T__struct_5)),
(({ _s : ((((("2021-09-29T16:04:33.100000000Z" : GoString))) : GoString)), _want : ((100000000 : GoInt)) } : T__struct_5)),
(({ _s : ((((("2021-09-29T16:04:33.100000001Z" : GoString))) : GoString)), _want : ((100000001 : GoInt)) } : T__struct_5)),
(({ _s : ((((("2021-09-29T16:04:33.999999999Z" : GoString))) : GoString)), _want : ((999999999 : GoInt)) } : T__struct_5)),
(({ _s : ((((("2021-09-29T16:04:33.012345678Z" : GoString))) : GoString)), _want : ((12345678 : GoInt)) } : T__struct_5)),
(({ _s : ((((("2021-09-29T16:04:33.0000000000Z" : GoString))) : GoString)), _want : ((0 : GoInt)) } : T__struct_5)),
(({ _s : ((((("2021-09-29T16:04:33.0000000001Z" : GoString))) : GoString)), _want : ((0 : GoInt)) } : T__struct_5)),
(({ _s : ((((("2021-09-29T16:04:33.1000000000Z" : GoString))) : GoString)), _want : ((100000000 : GoInt)) } : T__struct_5)),
(({ _s : ((((("2021-09-29T16:04:33.1000000009Z" : GoString))) : GoString)), _want : ((100000000 : GoInt)) } : T__struct_5)),
(({ _s : ((((("2021-09-29T16:04:33.9999999999Z" : GoString))) : GoString)), _want : ((999999999 : GoInt)) } : T__struct_5)),
(({ _s : ((((("2021-09-29T16:04:33.0123456789Z" : GoString))) : GoString)), _want : ((12345678 : GoInt)) } : T__struct_5)),
(({ _s : ((((("2021-09-29T16:04:33.10000000000Z" : GoString))) : GoString)), _want : ((100000000 : GoInt)) } : T__struct_5)),
(({ _s : ((((("2021-09-29T16:04:33.00123456789Z" : GoString))) : GoString)), _want : ((1234567 : GoInt)) } : T__struct_5)),
(({ _s : ((((("2021-09-29T16:04:33.000123456789Z" : GoString))) : GoString)), _want : ((123456 : GoInt)) } : T__struct_5)),
(({ _s : ((((("2021-09-29T16:04:33.9999999999999999Z" : GoString))) : GoString)), _want : ((999999999 : GoInt)) } : T__struct_5))) : Slice<T__struct_5>));
        for (_0 => _tt in _tests) {
            var __tmp__ = parse(((((("2006-01-02T15:04:05Z07:00" : GoString))) : GoString)), _tt._s), _tm:Time = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if (_err != null) {
                _t.errorf(((((("Unexpected error: %v" : GoString))) : GoString)), Go.toInterface(_err));
                continue;
            };
            {
                var _got:GoInt = _tm.nanosecond();
                if (_got != _tt._want) {
                    _t.errorf(((((("Parse(%q) = got %d, want %d" : GoString))) : GoString)), Go.toInterface(_tt._s), Go.toInterface(_got), Go.toInterface(_tt._want));
                };
            };
        };
    }
function testHasMonotonicClock(_t:stdgo.testing.Testing.T):Void {
        var _yes:(GoString, Time) -> Void = function(_expr:GoString, _tt:Time):Void {
            if (getMono(_tt) == ((0 : GoInt64))) {
                _t.errorf(((((("%s: missing monotonic clock reading" : GoString))) : GoString)), Go.toInterface(_expr));
            };
        };
        var _no:(GoString, Time) -> Void = function(_expr:GoString, _tt:Time):Void {
            if (getMono(_tt) != ((0 : GoInt64))) {
                _t.errorf(((((("%s: unexpected monotonic clock reading" : GoString))) : GoString)), Go.toInterface(_expr));
            };
        };
        _yes(((((("<-After(1)" : GoString))) : GoString)), (after(((1 : Duration))).__get__() == null ? null : after(((1 : Duration))).__get__().__copy__()));
        var _ticker = newTicker(((1 : Duration)));
        _yes(((((("<-Tick(1)" : GoString))) : GoString)), (_ticker.c.__get__() == null ? null : _ticker.c.__get__().__copy__()));
        _ticker.stop();
        _no(((((("Date(2009, 11, 23, 0, 0, 0, 0, UTC)" : GoString))) : GoString)), (date(((2009 : GoInt)), ((11 : Month)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((2009 : GoInt)), ((11 : Month)), ((23 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()));
        var __tmp__ = parse(((((("Mon Jan _2 15:04:05 MST 2006" : GoString))) : GoString)), ((((("Sat Mar  7 11:06:39 PST 2015" : GoString))) : GoString))), _tp:Time = __tmp__._0, _0:stdgo.Error = __tmp__._1;
        _no((("Parse(UnixDate, \"Sat Mar  7 11:06:39 PST 2015\")" : GoString)), (_tp == null ? null : _tp.__copy__()));
        _no(((((("Unix(1486057371, 0)" : GoString))) : GoString)), (unix(((1486057371 : GoInt64)), ((0 : GoInt64))) == null ? null : unix(((1486057371 : GoInt64)), ((0 : GoInt64))).__copy__()));
        _yes(((((("Now()" : GoString))) : GoString)), (now() == null ? null : now().__copy__()));
        var _tu:Time = (unix(((1486057371 : GoInt64)), ((0 : GoInt64))) == null ? null : unix(((1486057371 : GoInt64)), ((0 : GoInt64))).__copy__());
        var _tm:Time = (_tu == null ? null : _tu.__copy__());
        setMono(_tm, ((123456 : GoInt64)));
        _no(((((("tu" : GoString))) : GoString)), (_tu == null ? null : _tu.__copy__()));
        _yes(((((("tm" : GoString))) : GoString)), (_tm == null ? null : _tm.__copy__()));
        _no(((((("tu.Add(1)" : GoString))) : GoString)), (_tu.add(((1 : Duration))) == null ? null : _tu.add(((1 : Duration))).__copy__()));
        _no(((((("tu.In(UTC)" : GoString))) : GoString)), (_tu.in_(utc) == null ? null : _tu.in_(utc).__copy__()));
        _no(((((("tu.AddDate(1, 1, 1)" : GoString))) : GoString)), (_tu.addDate(((1 : GoInt)), ((1 : GoInt)), ((1 : GoInt))) == null ? null : _tu.addDate(((1 : GoInt)), ((1 : GoInt)), ((1 : GoInt))).__copy__()));
        _no(((((("tu.AddDate(0, 0, 0)" : GoString))) : GoString)), (_tu.addDate(((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt))) == null ? null : _tu.addDate(((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt))).__copy__()));
        _no(((((("tu.Local()" : GoString))) : GoString)), (_tu.local() == null ? null : _tu.local().__copy__()));
        _no(((((("tu.UTC()" : GoString))) : GoString)), (_tu.utc() == null ? null : _tu.utc().__copy__()));
        _no(((((("tu.Round(2)" : GoString))) : GoString)), (_tu.round(((2 : Duration))) == null ? null : _tu.round(((2 : Duration))).__copy__()));
        _no(((((("tu.Truncate(2)" : GoString))) : GoString)), (_tu.truncate(((2 : Duration))) == null ? null : _tu.truncate(((2 : Duration))).__copy__()));
        _yes(((((("tm.Add(1)" : GoString))) : GoString)), (_tm.add(((1 : Duration))) == null ? null : _tm.add(((1 : Duration))).__copy__()));
        _no(((((("tm.AddDate(1, 1, 1)" : GoString))) : GoString)), (_tm.addDate(((1 : GoInt)), ((1 : GoInt)), ((1 : GoInt))) == null ? null : _tm.addDate(((1 : GoInt)), ((1 : GoInt)), ((1 : GoInt))).__copy__()));
        _no(((((("tm.AddDate(0, 0, 0)" : GoString))) : GoString)), (_tm.addDate(((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt))) == null ? null : _tm.addDate(((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt))).__copy__()));
        _no(((((("tm.In(UTC)" : GoString))) : GoString)), (_tm.in_(utc) == null ? null : _tm.in_(utc).__copy__()));
        _no(((((("tm.Local()" : GoString))) : GoString)), (_tm.local() == null ? null : _tm.local().__copy__()));
        _no(((((("tm.UTC()" : GoString))) : GoString)), (_tm.utc() == null ? null : _tm.utc().__copy__()));
        _no(((((("tm.Round(2)" : GoString))) : GoString)), (_tm.round(((2 : Duration))) == null ? null : _tm.round(((2 : Duration))).__copy__()));
        _no(((((("tm.Truncate(2)" : GoString))) : GoString)), (_tm.truncate(((2 : Duration))) == null ? null : _tm.truncate(((2 : Duration))).__copy__()));
    }
function testMonotonicAdd(_t:stdgo.testing.Testing.T):Void {
        var _tm:Time = (unix(((1486057371 : GoInt64)), ((123456 : GoInt64))) == null ? null : unix(((1486057371 : GoInt64)), ((123456 : GoInt64))).__copy__());
        setMono(_tm, (("123456789012345" : GoInt64)));
        var _t2:Time = (_tm.add(((1e+08 : Duration))) == null ? null : _tm.add(((1e+08 : Duration))).__copy__());
        if (_t2.nanosecond() != ((100123456 : GoInt))) {
            _t.errorf(((((("t2.Nanosecond() = %d, want 100123456" : GoString))) : GoString)), Go.toInterface(_t2.nanosecond()));
        };
        if (getMono(_t2) != (("123456889012345" : GoInt64))) {
            _t.errorf(((((("t2.mono = %d, want 123456889012345" : GoString))) : GoString)), Go.toInterface(getMono(_t2)));
        };
        var _t3:Time = (_tm.add((("-9000000000000000000" : Duration))) == null ? null : _tm.add((("-9000000000000000000" : Duration))).__copy__());
        if (_t3.nanosecond() != ((123456 : GoInt))) {
            _t.errorf(((((("t3.Nanosecond() = %d, want 123456" : GoString))) : GoString)), Go.toInterface(_t3.nanosecond()));
        };
        if (getMono(_t3) != ((0 : GoInt64))) {
            _t.errorf(((((("t3.mono = %d, want 0 (wall time out of range for monotonic reading)" : GoString))) : GoString)), Go.toInterface(getMono(_t3)));
        };
        var _t4:Time = (_tm.add((("9000000000000000000" : Duration))) == null ? null : _tm.add((("9000000000000000000" : Duration))).__copy__());
        if (_t4.nanosecond() != ((123456 : GoInt))) {
            _t.errorf(((((("t4.Nanosecond() = %d, want 123456" : GoString))) : GoString)), Go.toInterface(_t4.nanosecond()));
        };
        if (getMono(_t4) != ((0 : GoInt64))) {
            _t.errorf(((((("t4.mono = %d, want 0 (wall time out of range for monotonic reading)" : GoString))) : GoString)), Go.toInterface(getMono(_t4)));
        };
        var _tn:Time = (now() == null ? null : now().__copy__());
        var _tn1:Time = (_tn.add((("3600000000000" : Duration))) == null ? null : _tn.add((("3600000000000" : Duration))).__copy__());
        sleep(((100000000 : Duration)));
        var _d:Duration = until((_tn1 == null ? null : _tn1.__copy__()));
        if (_d < (("3540000000000" : Duration))) {
            _t.errorf(((((("Until(Now().Add(1*Hour)) = %v, wanted at least 59m" : GoString))) : GoString)), Go.toInterface({
                final __self__ = new Duration_wrapper(_d);
                __self__.abs = #if !macro function():Duration return _d.abs() #else null #end;
                __self__.hours = #if !macro function():GoFloat64 return _d.hours() #else null #end;
                __self__.microseconds = #if !macro function():GoInt64 return _d.microseconds() #else null #end;
                __self__.milliseconds = #if !macro function():GoInt64 return _d.milliseconds() #else null #end;
                __self__.minutes = #if !macro function():GoFloat64 return _d.minutes() #else null #end;
                __self__.nanoseconds = #if !macro function():GoInt64 return _d.nanoseconds() #else null #end;
                __self__.round = #if !macro function(_d_:Duration):Duration return _d.round(_d_) #else null #end;
                __self__.seconds = #if !macro function():GoFloat64 return _d.seconds() #else null #end;
                __self__.string = #if !macro function():GoString return _d.string() #else null #end;
                __self__.truncate = #if !macro function(_d__:Duration):Duration return _d.truncate(_d__) #else null #end;
                __self__;
            }));
        };
        var _now:Time = (now() == null ? null : now().__copy__());
        if (_now.after((_tn1 == null ? null : _tn1.__copy__()))) {
            _t.errorf(((((("Now().After(Now().Add(1*Hour)) = true, want false" : GoString))) : GoString)));
        };
        if (!_tn1.after((_now == null ? null : _now.__copy__()))) {
            _t.errorf(((((("Now().Add(1*Hour).After(now) = false, want true" : GoString))) : GoString)));
        };
        if (_tn1.before((_now == null ? null : _now.__copy__()))) {
            _t.errorf(((((("Now().Add(1*Hour).Before(Now()) = true, want false" : GoString))) : GoString)));
        };
        if (!_now.before((_tn1 == null ? null : _tn1.__copy__()))) {
            _t.errorf(((((("Now().Before(Now().Add(1*Hour)) = false, want true" : GoString))) : GoString)));
        };
    }
function testMonotonicSub(_t:stdgo.testing.Testing.T):Void {
        var _t1:Time = (unix(((1483228799 : GoInt64)), ((9.95e+08 : GoInt64))) == null ? null : unix(((1483228799 : GoInt64)), ((9.95e+08 : GoInt64))).__copy__());
        setMono(_t1, (("123456789012345" : GoInt64)));
        var _t2:Time = (unix(((1483228799 : GoInt64)), ((5e+06 : GoInt64))) == null ? null : unix(((1483228799 : GoInt64)), ((5e+06 : GoInt64))).__copy__());
        setMono(_t2, (("123456799012345" : GoInt64)));
        var _t3:Time = (unix(((1483228799 : GoInt64)), ((9.95e+08 : GoInt64))) == null ? null : unix(((1483228799 : GoInt64)), ((9.95e+08 : GoInt64))).__copy__());
        setMono(_t3, (("123457789012345" : GoInt64)));
        var _t1w:Time = (_t1.addDate(((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt))) == null ? null : _t1.addDate(((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt))).__copy__());
        if (getMono(_t1w) != ((0 : GoInt64))) {
            _t.fatalf(((((("AddDate didn\'t strip monotonic clock reading" : GoString))) : GoString)));
        };
        var _t2w:Time = (_t2.addDate(((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt))) == null ? null : _t2.addDate(((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt))).__copy__());
        if (getMono(_t2w) != ((0 : GoInt64))) {
            _t.fatalf(((((("AddDate didn\'t strip monotonic clock reading" : GoString))) : GoString)));
        };
        var _t3w:Time = (_t3.addDate(((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt))) == null ? null : _t3.addDate(((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt))).__copy__());
        if (getMono(_t3w) != ((0 : GoInt64))) {
            _t.fatalf(((((("AddDate didn\'t strip monotonic clock reading" : GoString))) : GoString)));
        };
        var _sub:(GoString, GoString, Time, Time, Time, Time, Duration, Duration) -> Void = function(_txs:GoString, _tys:GoString, _tx:Time, _txw:Time, _ty:Time, _tyw:Time, _d:Duration, _dw:Duration):Void {
            var _check:(GoString, Duration, Duration) -> Void = function(_expr:GoString, _d:Duration, _want:Duration):Void {
                if (_d != _want) {
                    _t.errorf(((((("%s = %v, want %v" : GoString))) : GoString)), Go.toInterface(_expr), Go.toInterface({
                        final __self__ = new Duration_wrapper(_d);
                        __self__.abs = #if !macro function():Duration return _d.abs() #else null #end;
                        __self__.hours = #if !macro function():GoFloat64 return _d.hours() #else null #end;
                        __self__.microseconds = #if !macro function():GoInt64 return _d.microseconds() #else null #end;
                        __self__.milliseconds = #if !macro function():GoInt64 return _d.milliseconds() #else null #end;
                        __self__.minutes = #if !macro function():GoFloat64 return _d.minutes() #else null #end;
                        __self__.nanoseconds = #if !macro function():GoInt64 return _d.nanoseconds() #else null #end;
                        __self__.round = #if !macro function(_d_:Duration):Duration return _d.round(_d_) #else null #end;
                        __self__.seconds = #if !macro function():GoFloat64 return _d.seconds() #else null #end;
                        __self__.string = #if !macro function():GoString return _d.string() #else null #end;
                        __self__.truncate = #if !macro function(_d__:Duration):Duration return _d.truncate(_d__) #else null #end;
                        __self__;
                    }), Go.toInterface({
                        final __self__ = new Duration_wrapper(_want);
                        __self__.abs = #if !macro function():Duration return _want.abs() #else null #end;
                        __self__.hours = #if !macro function():GoFloat64 return _want.hours() #else null #end;
                        __self__.microseconds = #if !macro function():GoInt64 return _want.microseconds() #else null #end;
                        __self__.milliseconds = #if !macro function():GoInt64 return _want.milliseconds() #else null #end;
                        __self__.minutes = #if !macro function():GoFloat64 return _want.minutes() #else null #end;
                        __self__.nanoseconds = #if !macro function():GoInt64 return _want.nanoseconds() #else null #end;
                        __self__.round = #if !macro function(_d_:Duration):Duration return _want.round(_d_) #else null #end;
                        __self__.seconds = #if !macro function():GoFloat64 return _want.seconds() #else null #end;
                        __self__.string = #if !macro function():GoString return _want.string() #else null #end;
                        __self__.truncate = #if !macro function(_d__:Duration):Duration return _want.truncate(_d__) #else null #end;
                        __self__;
                    }));
                };
            };
            _check(((_txs + (((((".Sub(" : GoString))) : GoString))) + _tys) + (((((")" : GoString))) : GoString)), _tx.sub((_ty == null ? null : _ty.__copy__())), _d);
            _check(((_txs + ((((("w.Sub(" : GoString))) : GoString))) + _tys) + (((((")" : GoString))) : GoString)), _txw.sub((_ty == null ? null : _ty.__copy__())), _dw);
            _check(((_txs + (((((".Sub(" : GoString))) : GoString))) + _tys) + ((((("w)" : GoString))) : GoString)), _tx.sub((_tyw == null ? null : _tyw.__copy__())), _dw);
            _check(((_txs + ((((("w.Sub(" : GoString))) : GoString))) + _tys) + ((((("w)" : GoString))) : GoString)), _txw.sub((_tyw == null ? null : _tyw.__copy__())), _dw);
        };
        _sub(((((("t1" : GoString))) : GoString)), ((((("t1" : GoString))) : GoString)), (_t1 == null ? null : _t1.__copy__()), (_t1w == null ? null : _t1w.__copy__()), (_t1 == null ? null : _t1.__copy__()), (_t1w == null ? null : _t1w.__copy__()), ((0 : Duration)), ((0 : Duration)));
        _sub(((((("t1" : GoString))) : GoString)), ((((("t2" : GoString))) : GoString)), (_t1 == null ? null : _t1.__copy__()), (_t1w == null ? null : _t1w.__copy__()), (_t2 == null ? null : _t2.__copy__()), (_t2w == null ? null : _t2w.__copy__()), ((-10000000 : Duration)), ((990000000 : Duration)));
        _sub(((((("t1" : GoString))) : GoString)), ((((("t3" : GoString))) : GoString)), (_t1 == null ? null : _t1.__copy__()), (_t1w == null ? null : _t1w.__copy__()), (_t3 == null ? null : _t3.__copy__()), (_t3w == null ? null : _t3w.__copy__()), ((-1000000000 : Duration)), ((0 : Duration)));
        _sub(((((("t2" : GoString))) : GoString)), ((((("t1" : GoString))) : GoString)), (_t2 == null ? null : _t2.__copy__()), (_t2w == null ? null : _t2w.__copy__()), (_t1 == null ? null : _t1.__copy__()), (_t1w == null ? null : _t1w.__copy__()), ((10000000 : Duration)), ((-990000000 : Duration)));
        _sub(((((("t2" : GoString))) : GoString)), ((((("t2" : GoString))) : GoString)), (_t2 == null ? null : _t2.__copy__()), (_t2w == null ? null : _t2w.__copy__()), (_t2 == null ? null : _t2.__copy__()), (_t2w == null ? null : _t2w.__copy__()), ((0 : Duration)), ((0 : Duration)));
        _sub(((((("t2" : GoString))) : GoString)), ((((("t3" : GoString))) : GoString)), (_t2 == null ? null : _t2.__copy__()), (_t2w == null ? null : _t2w.__copy__()), (_t3 == null ? null : _t3.__copy__()), (_t3w == null ? null : _t3w.__copy__()), ((-990000000 : Duration)), ((-990000000 : Duration)));
        _sub(((((("t3" : GoString))) : GoString)), ((((("t1" : GoString))) : GoString)), (_t3 == null ? null : _t3.__copy__()), (_t3w == null ? null : _t3w.__copy__()), (_t1 == null ? null : _t1.__copy__()), (_t1w == null ? null : _t1w.__copy__()), ((1000000000 : Duration)), ((0 : Duration)));
        _sub(((((("t3" : GoString))) : GoString)), ((((("t2" : GoString))) : GoString)), (_t3 == null ? null : _t3.__copy__()), (_t3w == null ? null : _t3w.__copy__()), (_t2 == null ? null : _t2.__copy__()), (_t2w == null ? null : _t2w.__copy__()), ((990000000 : Duration)), ((990000000 : Duration)));
        _sub(((((("t3" : GoString))) : GoString)), ((((("t3" : GoString))) : GoString)), (_t3 == null ? null : _t3.__copy__()), (_t3w == null ? null : _t3w.__copy__()), (_t3 == null ? null : _t3.__copy__()), (_t3w == null ? null : _t3w.__copy__()), ((0 : Duration)), ((0 : Duration)));
        var _cmp:(GoString, GoString, Time, Time, Time, Time, GoInt, GoInt) -> Void = function(_txs:GoString, _tys:GoString, _tx:Time, _txw:Time, _ty:Time, _tyw:Time, _c:GoInt, _cw:GoInt):Void {
            var _check:(GoString, Bool, Bool) -> Void = function(_expr:GoString, _b:Bool, _want:Bool):Void {
                if (_b != _want) {
                    _t.errorf(((((("%s = %v, want %v" : GoString))) : GoString)), Go.toInterface(_expr), Go.toInterface(_b), Go.toInterface(_want));
                };
            };
            _check(((_txs + (((((".After(" : GoString))) : GoString))) + _tys) + (((((")" : GoString))) : GoString)), _tx.after((_ty == null ? null : _ty.__copy__())), _c > ((0 : GoInt)));
            _check(((_txs + ((((("w.After(" : GoString))) : GoString))) + _tys) + (((((")" : GoString))) : GoString)), _txw.after((_ty == null ? null : _ty.__copy__())), _cw > ((0 : GoInt)));
            _check(((_txs + (((((".After(" : GoString))) : GoString))) + _tys) + ((((("w)" : GoString))) : GoString)), _tx.after((_tyw == null ? null : _tyw.__copy__())), _cw > ((0 : GoInt)));
            _check(((_txs + ((((("w.After(" : GoString))) : GoString))) + _tys) + ((((("w)" : GoString))) : GoString)), _txw.after((_tyw == null ? null : _tyw.__copy__())), _cw > ((0 : GoInt)));
            _check(((_txs + (((((".Before(" : GoString))) : GoString))) + _tys) + (((((")" : GoString))) : GoString)), _tx.before((_ty == null ? null : _ty.__copy__())), _c < ((0 : GoInt)));
            _check(((_txs + ((((("w.Before(" : GoString))) : GoString))) + _tys) + (((((")" : GoString))) : GoString)), _txw.before((_ty == null ? null : _ty.__copy__())), _cw < ((0 : GoInt)));
            _check(((_txs + (((((".Before(" : GoString))) : GoString))) + _tys) + ((((("w)" : GoString))) : GoString)), _tx.before((_tyw == null ? null : _tyw.__copy__())), _cw < ((0 : GoInt)));
            _check(((_txs + ((((("w.Before(" : GoString))) : GoString))) + _tys) + ((((("w)" : GoString))) : GoString)), _txw.before((_tyw == null ? null : _tyw.__copy__())), _cw < ((0 : GoInt)));
            _check(((_txs + (((((".Equal(" : GoString))) : GoString))) + _tys) + (((((")" : GoString))) : GoString)), _tx.equal((_ty == null ? null : _ty.__copy__())), _c == ((0 : GoInt)));
            _check(((_txs + ((((("w.Equal(" : GoString))) : GoString))) + _tys) + (((((")" : GoString))) : GoString)), _txw.equal((_ty == null ? null : _ty.__copy__())), _cw == ((0 : GoInt)));
            _check(((_txs + (((((".Equal(" : GoString))) : GoString))) + _tys) + ((((("w)" : GoString))) : GoString)), _tx.equal((_tyw == null ? null : _tyw.__copy__())), _cw == ((0 : GoInt)));
            _check(((_txs + ((((("w.Equal(" : GoString))) : GoString))) + _tys) + ((((("w)" : GoString))) : GoString)), _txw.equal((_tyw == null ? null : _tyw.__copy__())), _cw == ((0 : GoInt)));
        };
        _cmp(((((("t1" : GoString))) : GoString)), ((((("t1" : GoString))) : GoString)), (_t1 == null ? null : _t1.__copy__()), (_t1w == null ? null : _t1w.__copy__()), (_t1 == null ? null : _t1.__copy__()), (_t1w == null ? null : _t1w.__copy__()), ((0 : GoInt)), ((0 : GoInt)));
        _cmp(((((("t1" : GoString))) : GoString)), ((((("t2" : GoString))) : GoString)), (_t1 == null ? null : _t1.__copy__()), (_t1w == null ? null : _t1w.__copy__()), (_t2 == null ? null : _t2.__copy__()), (_t2w == null ? null : _t2w.__copy__()), ((-1 : GoInt)), ((1 : GoInt)));
        _cmp(((((("t1" : GoString))) : GoString)), ((((("t3" : GoString))) : GoString)), (_t1 == null ? null : _t1.__copy__()), (_t1w == null ? null : _t1w.__copy__()), (_t3 == null ? null : _t3.__copy__()), (_t3w == null ? null : _t3w.__copy__()), ((-1 : GoInt)), ((0 : GoInt)));
        _cmp(((((("t2" : GoString))) : GoString)), ((((("t1" : GoString))) : GoString)), (_t2 == null ? null : _t2.__copy__()), (_t2w == null ? null : _t2w.__copy__()), (_t1 == null ? null : _t1.__copy__()), (_t1w == null ? null : _t1w.__copy__()), ((1 : GoInt)), ((-1 : GoInt)));
        _cmp(((((("t2" : GoString))) : GoString)), ((((("t2" : GoString))) : GoString)), (_t2 == null ? null : _t2.__copy__()), (_t2w == null ? null : _t2w.__copy__()), (_t2 == null ? null : _t2.__copy__()), (_t2w == null ? null : _t2w.__copy__()), ((0 : GoInt)), ((0 : GoInt)));
        _cmp(((((("t2" : GoString))) : GoString)), ((((("t3" : GoString))) : GoString)), (_t2 == null ? null : _t2.__copy__()), (_t2w == null ? null : _t2w.__copy__()), (_t3 == null ? null : _t3.__copy__()), (_t3w == null ? null : _t3w.__copy__()), ((-1 : GoInt)), ((-1 : GoInt)));
        _cmp(((((("t3" : GoString))) : GoString)), ((((("t1" : GoString))) : GoString)), (_t3 == null ? null : _t3.__copy__()), (_t3w == null ? null : _t3w.__copy__()), (_t1 == null ? null : _t1.__copy__()), (_t1w == null ? null : _t1w.__copy__()), ((1 : GoInt)), ((0 : GoInt)));
        _cmp(((((("t3" : GoString))) : GoString)), ((((("t2" : GoString))) : GoString)), (_t3 == null ? null : _t3.__copy__()), (_t3w == null ? null : _t3w.__copy__()), (_t2 == null ? null : _t2.__copy__()), (_t2w == null ? null : _t2w.__copy__()), ((1 : GoInt)), ((1 : GoInt)));
        _cmp(((((("t3" : GoString))) : GoString)), ((((("t3" : GoString))) : GoString)), (_t3 == null ? null : _t3.__copy__()), (_t3w == null ? null : _t3w.__copy__()), (_t3 == null ? null : _t3.__copy__()), (_t3w == null ? null : _t3w.__copy__()), ((0 : GoInt)), ((0 : GoInt)));
    }
function testMonotonicOverflow(_t:stdgo.testing.Testing.T):Void {
        var _t1:Time = (now().add((("-30000000000" : Duration))) == null ? null : now().add((("-30000000000" : Duration))).__copy__());
        var _d:Duration = until((_t1 == null ? null : _t1.__copy__()));
        if ((_d < (("-35000000000" : Duration))) || ((("-30000000000" : Duration)) < _d)) {
            _t.errorf(((((("Until(Now().Add(-30s)) = %v, want roughly -30s (-35s to -30s)" : GoString))) : GoString)), Go.toInterface({
                final __self__ = new Duration_wrapper(_d);
                __self__.abs = #if !macro function():Duration return _d.abs() #else null #end;
                __self__.hours = #if !macro function():GoFloat64 return _d.hours() #else null #end;
                __self__.microseconds = #if !macro function():GoInt64 return _d.microseconds() #else null #end;
                __self__.milliseconds = #if !macro function():GoInt64 return _d.milliseconds() #else null #end;
                __self__.minutes = #if !macro function():GoFloat64 return _d.minutes() #else null #end;
                __self__.nanoseconds = #if !macro function():GoInt64 return _d.nanoseconds() #else null #end;
                __self__.round = #if !macro function(_d_:Duration):Duration return _d.round(_d_) #else null #end;
                __self__.seconds = #if !macro function():GoFloat64 return _d.seconds() #else null #end;
                __self__.string = #if !macro function():GoString return _d.string() #else null #end;
                __self__.truncate = #if !macro function(_d__:Duration):Duration return _d.truncate(_d__) #else null #end;
                __self__;
            }));
        };
        _t1 = (now().add((("30000000000" : Duration))) == null ? null : now().add((("30000000000" : Duration))).__copy__());
        _d = until((_t1 == null ? null : _t1.__copy__()));
        if ((_d < (("25000000000" : Duration))) || ((("30000000000" : Duration)) < _d)) {
            _t.errorf(((((("Until(Now().Add(-30s)) = %v, want roughly 30s (25s to 30s)" : GoString))) : GoString)), Go.toInterface({
                final __self__ = new Duration_wrapper(_d);
                __self__.abs = #if !macro function():Duration return _d.abs() #else null #end;
                __self__.hours = #if !macro function():GoFloat64 return _d.hours() #else null #end;
                __self__.microseconds = #if !macro function():GoInt64 return _d.microseconds() #else null #end;
                __self__.milliseconds = #if !macro function():GoInt64 return _d.milliseconds() #else null #end;
                __self__.minutes = #if !macro function():GoFloat64 return _d.minutes() #else null #end;
                __self__.nanoseconds = #if !macro function():GoInt64 return _d.nanoseconds() #else null #end;
                __self__.round = #if !macro function(_d_:Duration):Duration return _d.round(_d_) #else null #end;
                __self__.seconds = #if !macro function():GoFloat64 return _d.seconds() #else null #end;
                __self__.string = #if !macro function():GoString return _d.string() #else null #end;
                __self__.truncate = #if !macro function(_d__:Duration):Duration return _d.truncate(_d__) #else null #end;
                __self__;
            }));
        };
        var _t0:Time = (now() == null ? null : now().__copy__());
        _t1 = (_t0.add((((("9223372036854775807" : Duration)) : Duration))) == null ? null : _t0.add((((("9223372036854775807" : Duration)) : Duration))).__copy__());
        if (getMono(_t1) != ((0 : GoInt64))) {
            _t.errorf(((((("Now().Add(maxDuration) has monotonic clock reading (%v => %v %d %d)" : GoString))) : GoString)), Go.toInterface(((_t0.string() : GoString))), Go.toInterface(((_t1.string() : GoString))), Go.toInterface(_t0.unix()), Go.toInterface(_t1.unix()));
        };
        var _t2:Time = (_t1.add((("-9223372036854775807" : Duration))) == null ? null : _t1.add((("-9223372036854775807" : Duration))).__copy__());
        _d = since((_t2 == null ? null : _t2.__copy__()));
        if ((_d < (("-10000000000" : Duration))) || ((("10000000000" : Duration)) < _d)) {
            _t.errorf(((((("Since(Now().Add(max).Add(-max)) = %v, want [-10s, 10s]" : GoString))) : GoString)), Go.toInterface({
                final __self__ = new Duration_wrapper(_d);
                __self__.abs = #if !macro function():Duration return _d.abs() #else null #end;
                __self__.hours = #if !macro function():GoFloat64 return _d.hours() #else null #end;
                __self__.microseconds = #if !macro function():GoInt64 return _d.microseconds() #else null #end;
                __self__.milliseconds = #if !macro function():GoInt64 return _d.milliseconds() #else null #end;
                __self__.minutes = #if !macro function():GoFloat64 return _d.minutes() #else null #end;
                __self__.nanoseconds = #if !macro function():GoInt64 return _d.nanoseconds() #else null #end;
                __self__.round = #if !macro function(_d_:Duration):Duration return _d.round(_d_) #else null #end;
                __self__.seconds = #if !macro function():GoFloat64 return _d.seconds() #else null #end;
                __self__.string = #if !macro function():GoString return _d.string() #else null #end;
                __self__.truncate = #if !macro function(_d__:Duration):Duration return _d.truncate(_d__) #else null #end;
                __self__;
            }));
        };
        _t0 = (now() == null ? null : now().__copy__());
        _t1 = (_t0.add((("3600000000000" : Duration))) == null ? null : _t0.add((("3600000000000" : Duration))).__copy__());
        sleep(((100000000 : Duration)));
        _t2 = (now().add((("-5000000000" : Duration))) == null ? null : now().add((("-5000000000" : Duration))).__copy__());
        if (!_t1.after((_t2 == null ? null : _t2.__copy__()))) {
            _t.errorf(((((("Now().Add(1*Hour).After(Now().Add(-5*Second)) = false, want true\nt1=%v\nt2=%v" : GoString))) : GoString)), Go.toInterface({
                final __self__ = new Time_wrapper(_t1);
                __self__.add = #if !macro function(_d_:Duration):Time return _t1.add(_d_) #else null #end;
                __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _t1.addDate(_years, _months, _days) #else null #end;
                __self__.after = #if !macro function(__0:Time):Bool return _t1.after(__0) #else null #end;
                __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _t1.appendFormat(_b, _layout) #else null #end;
                __self__.before = #if !macro function(__0:Time):Bool return _t1.before(__0) #else null #end;
                __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _t1.clock() #else null #end;
                __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _t1.date() #else null #end;
                __self__.day = #if !macro function():GoInt return _t1.day() #else null #end;
                __self__.equal = #if !macro function(__0:Time):Bool return _t1.equal(__0) #else null #end;
                __self__.format = #if !macro function(__0:GoString):GoString return _t1.format(__0) #else null #end;
                __self__.goString = #if !macro function():GoString return _t1.goString() #else null #end;
                __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.gobDecode(__0) #else null #end;
                __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.gobEncode() #else null #end;
                __self__.hour = #if !macro function():GoInt return _t1.hour() #else null #end;
                __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _t1.isoweek() #else null #end;
                __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _t1.in_(__0) #else null #end;
                __self__.isDST = #if !macro function():Bool return _t1.isDST() #else null #end;
                __self__.isZero = #if !macro function():Bool return _t1.isZero() #else null #end;
                __self__.local = #if !macro function():Time return _t1.local() #else null #end;
                __self__.location = #if !macro function():Ref<Location> return _t1.location() #else null #end;
                __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalBinary() #else null #end;
                __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalJSON() #else null #end;
                __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalText() #else null #end;
                __self__.minute = #if !macro function():GoInt return _t1.minute() #else null #end;
                __self__.month = #if !macro function():Month return _t1.month() #else null #end;
                __self__.nanosecond = #if !macro function():GoInt return _t1.nanosecond() #else null #end;
                __self__.round = #if !macro function(_d__:Duration):Time return _t1.round(_d__) #else null #end;
                __self__.second = #if !macro function():GoInt return _t1.second() #else null #end;
                __self__.string = #if !macro function():GoString return _t1.string() #else null #end;
                __self__.sub = #if !macro function(__0:Time):Duration return _t1.sub(__0) #else null #end;
                __self__.truncate = #if !macro function(_d___:Duration):Time return _t1.truncate(_d___) #else null #end;
                __self__.utc = #if !macro function():Time return _t1.utc() #else null #end;
                __self__.unix = #if !macro function():GoInt64 return _t1.unix() #else null #end;
                __self__.unixMicro = #if !macro function():GoInt64 return _t1.unixMicro() #else null #end;
                __self__.unixMilli = #if !macro function():GoInt64 return _t1.unixMilli() #else null #end;
                __self__.unixNano = #if !macro function():GoInt64 return _t1.unixNano() #else null #end;
                __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalBinary(__0) #else null #end;
                __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalJSON(__0) #else null #end;
                __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalText(__0) #else null #end;
                __self__.weekday = #if !macro function():Weekday return _t1.weekday() #else null #end;
                __self__.year = #if !macro function():GoInt return _t1.year() #else null #end;
                __self__.yearDay = #if !macro function():GoInt return _t1.yearDay() #else null #end;
                __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _t1.zone() #else null #end;
                __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _t1.zoneBounds() #else null #end;
                __self__._abs = #if !macro function():GoUInt64 return _t1._abs() #else null #end;
                __self__._addSec = #if !macro function(_sec:GoInt64):Void _t1._addSec(_sec) #else null #end;
                __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _t1._date(__0) #else null #end;
                __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _t1._locabs() #else null #end;
                __self__._mono = #if !macro function():GoInt64 return _t1._mono() #else null #end;
                __self__._nsec = #if !macro function():GoInt32 return _t1._nsec() #else null #end;
                __self__._sec = #if !macro function():GoInt64 return _t1._sec() #else null #end;
                __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _t1._setLoc(__0) #else null #end;
                __self__._setMono = #if !macro function(_sec:GoInt64):Void _t1._setMono(_sec) #else null #end;
                __self__._stripMono = #if !macro function():Void _t1._stripMono() #else null #end;
                __self__._unixSec = #if !macro function():GoInt64 return _t1._unixSec() #else null #end;
                __self__;
            }), Go.toInterface({
                final __self__ = new Time_wrapper(_t2);
                __self__.add = #if !macro function(_d_:Duration):Time return _t2.add(_d_) #else null #end;
                __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _t2.addDate(_years, _months, _days) #else null #end;
                __self__.after = #if !macro function(__0:Time):Bool return _t2.after(__0) #else null #end;
                __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _t2.appendFormat(_b, _layout) #else null #end;
                __self__.before = #if !macro function(__0:Time):Bool return _t2.before(__0) #else null #end;
                __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _t2.clock() #else null #end;
                __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _t2.date() #else null #end;
                __self__.day = #if !macro function():GoInt return _t2.day() #else null #end;
                __self__.equal = #if !macro function(__0:Time):Bool return _t2.equal(__0) #else null #end;
                __self__.format = #if !macro function(__0:GoString):GoString return _t2.format(__0) #else null #end;
                __self__.goString = #if !macro function():GoString return _t2.goString() #else null #end;
                __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.gobDecode(__0) #else null #end;
                __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.gobEncode() #else null #end;
                __self__.hour = #if !macro function():GoInt return _t2.hour() #else null #end;
                __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _t2.isoweek() #else null #end;
                __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _t2.in_(__0) #else null #end;
                __self__.isDST = #if !macro function():Bool return _t2.isDST() #else null #end;
                __self__.isZero = #if !macro function():Bool return _t2.isZero() #else null #end;
                __self__.local = #if !macro function():Time return _t2.local() #else null #end;
                __self__.location = #if !macro function():Ref<Location> return _t2.location() #else null #end;
                __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.marshalBinary() #else null #end;
                __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.marshalJSON() #else null #end;
                __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.marshalText() #else null #end;
                __self__.minute = #if !macro function():GoInt return _t2.minute() #else null #end;
                __self__.month = #if !macro function():Month return _t2.month() #else null #end;
                __self__.nanosecond = #if !macro function():GoInt return _t2.nanosecond() #else null #end;
                __self__.round = #if !macro function(_d__:Duration):Time return _t2.round(_d__) #else null #end;
                __self__.second = #if !macro function():GoInt return _t2.second() #else null #end;
                __self__.string = #if !macro function():GoString return _t2.string() #else null #end;
                __self__.sub = #if !macro function(__0:Time):Duration return _t2.sub(__0) #else null #end;
                __self__.truncate = #if !macro function(_d___:Duration):Time return _t2.truncate(_d___) #else null #end;
                __self__.utc = #if !macro function():Time return _t2.utc() #else null #end;
                __self__.unix = #if !macro function():GoInt64 return _t2.unix() #else null #end;
                __self__.unixMicro = #if !macro function():GoInt64 return _t2.unixMicro() #else null #end;
                __self__.unixMilli = #if !macro function():GoInt64 return _t2.unixMilli() #else null #end;
                __self__.unixNano = #if !macro function():GoInt64 return _t2.unixNano() #else null #end;
                __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.unmarshalBinary(__0) #else null #end;
                __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.unmarshalJSON(__0) #else null #end;
                __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.unmarshalText(__0) #else null #end;
                __self__.weekday = #if !macro function():Weekday return _t2.weekday() #else null #end;
                __self__.year = #if !macro function():GoInt return _t2.year() #else null #end;
                __self__.yearDay = #if !macro function():GoInt return _t2.yearDay() #else null #end;
                __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _t2.zone() #else null #end;
                __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _t2.zoneBounds() #else null #end;
                __self__._abs = #if !macro function():GoUInt64 return _t2._abs() #else null #end;
                __self__._addSec = #if !macro function(_sec:GoInt64):Void _t2._addSec(_sec) #else null #end;
                __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _t2._date(__0) #else null #end;
                __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _t2._locabs() #else null #end;
                __self__._mono = #if !macro function():GoInt64 return _t2._mono() #else null #end;
                __self__._nsec = #if !macro function():GoInt32 return _t2._nsec() #else null #end;
                __self__._sec = #if !macro function():GoInt64 return _t2._sec() #else null #end;
                __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _t2._setLoc(__0) #else null #end;
                __self__._setMono = #if !macro function(_sec:GoInt64):Void _t2._setMono(_sec) #else null #end;
                __self__._stripMono = #if !macro function():Void _t2._stripMono() #else null #end;
                __self__._unixSec = #if !macro function():GoInt64 return _t2._unixSec() #else null #end;
                __self__;
            }));
        };
        if (_t2.after((_t1 == null ? null : _t1.__copy__()))) {
            _t.errorf(((((("Now().Add(-5*Second).After(Now().Add(1*Hour)) = true, want false\nt1=%v\nt2=%v" : GoString))) : GoString)), Go.toInterface({
                final __self__ = new Time_wrapper(_t1);
                __self__.add = #if !macro function(_d_:Duration):Time return _t1.add(_d_) #else null #end;
                __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _t1.addDate(_years, _months, _days) #else null #end;
                __self__.after = #if !macro function(__0:Time):Bool return _t1.after(__0) #else null #end;
                __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _t1.appendFormat(_b, _layout) #else null #end;
                __self__.before = #if !macro function(__0:Time):Bool return _t1.before(__0) #else null #end;
                __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _t1.clock() #else null #end;
                __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _t1.date() #else null #end;
                __self__.day = #if !macro function():GoInt return _t1.day() #else null #end;
                __self__.equal = #if !macro function(__0:Time):Bool return _t1.equal(__0) #else null #end;
                __self__.format = #if !macro function(__0:GoString):GoString return _t1.format(__0) #else null #end;
                __self__.goString = #if !macro function():GoString return _t1.goString() #else null #end;
                __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.gobDecode(__0) #else null #end;
                __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.gobEncode() #else null #end;
                __self__.hour = #if !macro function():GoInt return _t1.hour() #else null #end;
                __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _t1.isoweek() #else null #end;
                __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _t1.in_(__0) #else null #end;
                __self__.isDST = #if !macro function():Bool return _t1.isDST() #else null #end;
                __self__.isZero = #if !macro function():Bool return _t1.isZero() #else null #end;
                __self__.local = #if !macro function():Time return _t1.local() #else null #end;
                __self__.location = #if !macro function():Ref<Location> return _t1.location() #else null #end;
                __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalBinary() #else null #end;
                __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalJSON() #else null #end;
                __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalText() #else null #end;
                __self__.minute = #if !macro function():GoInt return _t1.minute() #else null #end;
                __self__.month = #if !macro function():Month return _t1.month() #else null #end;
                __self__.nanosecond = #if !macro function():GoInt return _t1.nanosecond() #else null #end;
                __self__.round = #if !macro function(_d__:Duration):Time return _t1.round(_d__) #else null #end;
                __self__.second = #if !macro function():GoInt return _t1.second() #else null #end;
                __self__.string = #if !macro function():GoString return _t1.string() #else null #end;
                __self__.sub = #if !macro function(__0:Time):Duration return _t1.sub(__0) #else null #end;
                __self__.truncate = #if !macro function(_d___:Duration):Time return _t1.truncate(_d___) #else null #end;
                __self__.utc = #if !macro function():Time return _t1.utc() #else null #end;
                __self__.unix = #if !macro function():GoInt64 return _t1.unix() #else null #end;
                __self__.unixMicro = #if !macro function():GoInt64 return _t1.unixMicro() #else null #end;
                __self__.unixMilli = #if !macro function():GoInt64 return _t1.unixMilli() #else null #end;
                __self__.unixNano = #if !macro function():GoInt64 return _t1.unixNano() #else null #end;
                __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalBinary(__0) #else null #end;
                __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalJSON(__0) #else null #end;
                __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalText(__0) #else null #end;
                __self__.weekday = #if !macro function():Weekday return _t1.weekday() #else null #end;
                __self__.year = #if !macro function():GoInt return _t1.year() #else null #end;
                __self__.yearDay = #if !macro function():GoInt return _t1.yearDay() #else null #end;
                __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _t1.zone() #else null #end;
                __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _t1.zoneBounds() #else null #end;
                __self__._abs = #if !macro function():GoUInt64 return _t1._abs() #else null #end;
                __self__._addSec = #if !macro function(_sec:GoInt64):Void _t1._addSec(_sec) #else null #end;
                __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _t1._date(__0) #else null #end;
                __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _t1._locabs() #else null #end;
                __self__._mono = #if !macro function():GoInt64 return _t1._mono() #else null #end;
                __self__._nsec = #if !macro function():GoInt32 return _t1._nsec() #else null #end;
                __self__._sec = #if !macro function():GoInt64 return _t1._sec() #else null #end;
                __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _t1._setLoc(__0) #else null #end;
                __self__._setMono = #if !macro function(_sec:GoInt64):Void _t1._setMono(_sec) #else null #end;
                __self__._stripMono = #if !macro function():Void _t1._stripMono() #else null #end;
                __self__._unixSec = #if !macro function():GoInt64 return _t1._unixSec() #else null #end;
                __self__;
            }), Go.toInterface({
                final __self__ = new Time_wrapper(_t2);
                __self__.add = #if !macro function(_d_:Duration):Time return _t2.add(_d_) #else null #end;
                __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _t2.addDate(_years, _months, _days) #else null #end;
                __self__.after = #if !macro function(__0:Time):Bool return _t2.after(__0) #else null #end;
                __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _t2.appendFormat(_b, _layout) #else null #end;
                __self__.before = #if !macro function(__0:Time):Bool return _t2.before(__0) #else null #end;
                __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _t2.clock() #else null #end;
                __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _t2.date() #else null #end;
                __self__.day = #if !macro function():GoInt return _t2.day() #else null #end;
                __self__.equal = #if !macro function(__0:Time):Bool return _t2.equal(__0) #else null #end;
                __self__.format = #if !macro function(__0:GoString):GoString return _t2.format(__0) #else null #end;
                __self__.goString = #if !macro function():GoString return _t2.goString() #else null #end;
                __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.gobDecode(__0) #else null #end;
                __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.gobEncode() #else null #end;
                __self__.hour = #if !macro function():GoInt return _t2.hour() #else null #end;
                __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _t2.isoweek() #else null #end;
                __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _t2.in_(__0) #else null #end;
                __self__.isDST = #if !macro function():Bool return _t2.isDST() #else null #end;
                __self__.isZero = #if !macro function():Bool return _t2.isZero() #else null #end;
                __self__.local = #if !macro function():Time return _t2.local() #else null #end;
                __self__.location = #if !macro function():Ref<Location> return _t2.location() #else null #end;
                __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.marshalBinary() #else null #end;
                __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.marshalJSON() #else null #end;
                __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.marshalText() #else null #end;
                __self__.minute = #if !macro function():GoInt return _t2.minute() #else null #end;
                __self__.month = #if !macro function():Month return _t2.month() #else null #end;
                __self__.nanosecond = #if !macro function():GoInt return _t2.nanosecond() #else null #end;
                __self__.round = #if !macro function(_d__:Duration):Time return _t2.round(_d__) #else null #end;
                __self__.second = #if !macro function():GoInt return _t2.second() #else null #end;
                __self__.string = #if !macro function():GoString return _t2.string() #else null #end;
                __self__.sub = #if !macro function(__0:Time):Duration return _t2.sub(__0) #else null #end;
                __self__.truncate = #if !macro function(_d___:Duration):Time return _t2.truncate(_d___) #else null #end;
                __self__.utc = #if !macro function():Time return _t2.utc() #else null #end;
                __self__.unix = #if !macro function():GoInt64 return _t2.unix() #else null #end;
                __self__.unixMicro = #if !macro function():GoInt64 return _t2.unixMicro() #else null #end;
                __self__.unixMilli = #if !macro function():GoInt64 return _t2.unixMilli() #else null #end;
                __self__.unixNano = #if !macro function():GoInt64 return _t2.unixNano() #else null #end;
                __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.unmarshalBinary(__0) #else null #end;
                __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.unmarshalJSON(__0) #else null #end;
                __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.unmarshalText(__0) #else null #end;
                __self__.weekday = #if !macro function():Weekday return _t2.weekday() #else null #end;
                __self__.year = #if !macro function():GoInt return _t2.year() #else null #end;
                __self__.yearDay = #if !macro function():GoInt return _t2.yearDay() #else null #end;
                __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _t2.zone() #else null #end;
                __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _t2.zoneBounds() #else null #end;
                __self__._abs = #if !macro function():GoUInt64 return _t2._abs() #else null #end;
                __self__._addSec = #if !macro function(_sec:GoInt64):Void _t2._addSec(_sec) #else null #end;
                __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _t2._date(__0) #else null #end;
                __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _t2._locabs() #else null #end;
                __self__._mono = #if !macro function():GoInt64 return _t2._mono() #else null #end;
                __self__._nsec = #if !macro function():GoInt32 return _t2._nsec() #else null #end;
                __self__._sec = #if !macro function():GoInt64 return _t2._sec() #else null #end;
                __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _t2._setLoc(__0) #else null #end;
                __self__._setMono = #if !macro function(_sec:GoInt64):Void _t2._setMono(_sec) #else null #end;
                __self__._stripMono = #if !macro function():Void _t2._stripMono() #else null #end;
                __self__._unixSec = #if !macro function():GoInt64 return _t2._unixSec() #else null #end;
                __self__;
            }));
        };
        if (_t1.before((_t2 == null ? null : _t2.__copy__()))) {
            _t.errorf(((((("Now().Add(1*Hour).Before(Now().Add(-5*Second)) = true, want false\nt1=%v\nt2=%v" : GoString))) : GoString)), Go.toInterface({
                final __self__ = new Time_wrapper(_t1);
                __self__.add = #if !macro function(_d_:Duration):Time return _t1.add(_d_) #else null #end;
                __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _t1.addDate(_years, _months, _days) #else null #end;
                __self__.after = #if !macro function(__0:Time):Bool return _t1.after(__0) #else null #end;
                __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _t1.appendFormat(_b, _layout) #else null #end;
                __self__.before = #if !macro function(__0:Time):Bool return _t1.before(__0) #else null #end;
                __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _t1.clock() #else null #end;
                __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _t1.date() #else null #end;
                __self__.day = #if !macro function():GoInt return _t1.day() #else null #end;
                __self__.equal = #if !macro function(__0:Time):Bool return _t1.equal(__0) #else null #end;
                __self__.format = #if !macro function(__0:GoString):GoString return _t1.format(__0) #else null #end;
                __self__.goString = #if !macro function():GoString return _t1.goString() #else null #end;
                __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.gobDecode(__0) #else null #end;
                __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.gobEncode() #else null #end;
                __self__.hour = #if !macro function():GoInt return _t1.hour() #else null #end;
                __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _t1.isoweek() #else null #end;
                __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _t1.in_(__0) #else null #end;
                __self__.isDST = #if !macro function():Bool return _t1.isDST() #else null #end;
                __self__.isZero = #if !macro function():Bool return _t1.isZero() #else null #end;
                __self__.local = #if !macro function():Time return _t1.local() #else null #end;
                __self__.location = #if !macro function():Ref<Location> return _t1.location() #else null #end;
                __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalBinary() #else null #end;
                __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalJSON() #else null #end;
                __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalText() #else null #end;
                __self__.minute = #if !macro function():GoInt return _t1.minute() #else null #end;
                __self__.month = #if !macro function():Month return _t1.month() #else null #end;
                __self__.nanosecond = #if !macro function():GoInt return _t1.nanosecond() #else null #end;
                __self__.round = #if !macro function(_d__:Duration):Time return _t1.round(_d__) #else null #end;
                __self__.second = #if !macro function():GoInt return _t1.second() #else null #end;
                __self__.string = #if !macro function():GoString return _t1.string() #else null #end;
                __self__.sub = #if !macro function(__0:Time):Duration return _t1.sub(__0) #else null #end;
                __self__.truncate = #if !macro function(_d___:Duration):Time return _t1.truncate(_d___) #else null #end;
                __self__.utc = #if !macro function():Time return _t1.utc() #else null #end;
                __self__.unix = #if !macro function():GoInt64 return _t1.unix() #else null #end;
                __self__.unixMicro = #if !macro function():GoInt64 return _t1.unixMicro() #else null #end;
                __self__.unixMilli = #if !macro function():GoInt64 return _t1.unixMilli() #else null #end;
                __self__.unixNano = #if !macro function():GoInt64 return _t1.unixNano() #else null #end;
                __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalBinary(__0) #else null #end;
                __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalJSON(__0) #else null #end;
                __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalText(__0) #else null #end;
                __self__.weekday = #if !macro function():Weekday return _t1.weekday() #else null #end;
                __self__.year = #if !macro function():GoInt return _t1.year() #else null #end;
                __self__.yearDay = #if !macro function():GoInt return _t1.yearDay() #else null #end;
                __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _t1.zone() #else null #end;
                __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _t1.zoneBounds() #else null #end;
                __self__._abs = #if !macro function():GoUInt64 return _t1._abs() #else null #end;
                __self__._addSec = #if !macro function(_sec:GoInt64):Void _t1._addSec(_sec) #else null #end;
                __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _t1._date(__0) #else null #end;
                __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _t1._locabs() #else null #end;
                __self__._mono = #if !macro function():GoInt64 return _t1._mono() #else null #end;
                __self__._nsec = #if !macro function():GoInt32 return _t1._nsec() #else null #end;
                __self__._sec = #if !macro function():GoInt64 return _t1._sec() #else null #end;
                __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _t1._setLoc(__0) #else null #end;
                __self__._setMono = #if !macro function(_sec:GoInt64):Void _t1._setMono(_sec) #else null #end;
                __self__._stripMono = #if !macro function():Void _t1._stripMono() #else null #end;
                __self__._unixSec = #if !macro function():GoInt64 return _t1._unixSec() #else null #end;
                __self__;
            }), Go.toInterface({
                final __self__ = new Time_wrapper(_t2);
                __self__.add = #if !macro function(_d_:Duration):Time return _t2.add(_d_) #else null #end;
                __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _t2.addDate(_years, _months, _days) #else null #end;
                __self__.after = #if !macro function(__0:Time):Bool return _t2.after(__0) #else null #end;
                __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _t2.appendFormat(_b, _layout) #else null #end;
                __self__.before = #if !macro function(__0:Time):Bool return _t2.before(__0) #else null #end;
                __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _t2.clock() #else null #end;
                __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _t2.date() #else null #end;
                __self__.day = #if !macro function():GoInt return _t2.day() #else null #end;
                __self__.equal = #if !macro function(__0:Time):Bool return _t2.equal(__0) #else null #end;
                __self__.format = #if !macro function(__0:GoString):GoString return _t2.format(__0) #else null #end;
                __self__.goString = #if !macro function():GoString return _t2.goString() #else null #end;
                __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.gobDecode(__0) #else null #end;
                __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.gobEncode() #else null #end;
                __self__.hour = #if !macro function():GoInt return _t2.hour() #else null #end;
                __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _t2.isoweek() #else null #end;
                __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _t2.in_(__0) #else null #end;
                __self__.isDST = #if !macro function():Bool return _t2.isDST() #else null #end;
                __self__.isZero = #if !macro function():Bool return _t2.isZero() #else null #end;
                __self__.local = #if !macro function():Time return _t2.local() #else null #end;
                __self__.location = #if !macro function():Ref<Location> return _t2.location() #else null #end;
                __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.marshalBinary() #else null #end;
                __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.marshalJSON() #else null #end;
                __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.marshalText() #else null #end;
                __self__.minute = #if !macro function():GoInt return _t2.minute() #else null #end;
                __self__.month = #if !macro function():Month return _t2.month() #else null #end;
                __self__.nanosecond = #if !macro function():GoInt return _t2.nanosecond() #else null #end;
                __self__.round = #if !macro function(_d__:Duration):Time return _t2.round(_d__) #else null #end;
                __self__.second = #if !macro function():GoInt return _t2.second() #else null #end;
                __self__.string = #if !macro function():GoString return _t2.string() #else null #end;
                __self__.sub = #if !macro function(__0:Time):Duration return _t2.sub(__0) #else null #end;
                __self__.truncate = #if !macro function(_d___:Duration):Time return _t2.truncate(_d___) #else null #end;
                __self__.utc = #if !macro function():Time return _t2.utc() #else null #end;
                __self__.unix = #if !macro function():GoInt64 return _t2.unix() #else null #end;
                __self__.unixMicro = #if !macro function():GoInt64 return _t2.unixMicro() #else null #end;
                __self__.unixMilli = #if !macro function():GoInt64 return _t2.unixMilli() #else null #end;
                __self__.unixNano = #if !macro function():GoInt64 return _t2.unixNano() #else null #end;
                __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.unmarshalBinary(__0) #else null #end;
                __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.unmarshalJSON(__0) #else null #end;
                __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.unmarshalText(__0) #else null #end;
                __self__.weekday = #if !macro function():Weekday return _t2.weekday() #else null #end;
                __self__.year = #if !macro function():GoInt return _t2.year() #else null #end;
                __self__.yearDay = #if !macro function():GoInt return _t2.yearDay() #else null #end;
                __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _t2.zone() #else null #end;
                __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _t2.zoneBounds() #else null #end;
                __self__._abs = #if !macro function():GoUInt64 return _t2._abs() #else null #end;
                __self__._addSec = #if !macro function(_sec:GoInt64):Void _t2._addSec(_sec) #else null #end;
                __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _t2._date(__0) #else null #end;
                __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _t2._locabs() #else null #end;
                __self__._mono = #if !macro function():GoInt64 return _t2._mono() #else null #end;
                __self__._nsec = #if !macro function():GoInt32 return _t2._nsec() #else null #end;
                __self__._sec = #if !macro function():GoInt64 return _t2._sec() #else null #end;
                __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _t2._setLoc(__0) #else null #end;
                __self__._setMono = #if !macro function(_sec:GoInt64):Void _t2._setMono(_sec) #else null #end;
                __self__._stripMono = #if !macro function():Void _t2._stripMono() #else null #end;
                __self__._unixSec = #if !macro function():GoInt64 return _t2._unixSec() #else null #end;
                __self__;
            }));
        };
        if (!_t2.before((_t1 == null ? null : _t1.__copy__()))) {
            _t.errorf(((((("Now().Add(-5*Second).Before(Now().Add(1*Hour)) = false, want true\nt1=%v\nt2=%v" : GoString))) : GoString)), Go.toInterface({
                final __self__ = new Time_wrapper(_t1);
                __self__.add = #if !macro function(_d_:Duration):Time return _t1.add(_d_) #else null #end;
                __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _t1.addDate(_years, _months, _days) #else null #end;
                __self__.after = #if !macro function(__0:Time):Bool return _t1.after(__0) #else null #end;
                __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _t1.appendFormat(_b, _layout) #else null #end;
                __self__.before = #if !macro function(__0:Time):Bool return _t1.before(__0) #else null #end;
                __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _t1.clock() #else null #end;
                __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _t1.date() #else null #end;
                __self__.day = #if !macro function():GoInt return _t1.day() #else null #end;
                __self__.equal = #if !macro function(__0:Time):Bool return _t1.equal(__0) #else null #end;
                __self__.format = #if !macro function(__0:GoString):GoString return _t1.format(__0) #else null #end;
                __self__.goString = #if !macro function():GoString return _t1.goString() #else null #end;
                __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.gobDecode(__0) #else null #end;
                __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.gobEncode() #else null #end;
                __self__.hour = #if !macro function():GoInt return _t1.hour() #else null #end;
                __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _t1.isoweek() #else null #end;
                __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _t1.in_(__0) #else null #end;
                __self__.isDST = #if !macro function():Bool return _t1.isDST() #else null #end;
                __self__.isZero = #if !macro function():Bool return _t1.isZero() #else null #end;
                __self__.local = #if !macro function():Time return _t1.local() #else null #end;
                __self__.location = #if !macro function():Ref<Location> return _t1.location() #else null #end;
                __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalBinary() #else null #end;
                __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalJSON() #else null #end;
                __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalText() #else null #end;
                __self__.minute = #if !macro function():GoInt return _t1.minute() #else null #end;
                __self__.month = #if !macro function():Month return _t1.month() #else null #end;
                __self__.nanosecond = #if !macro function():GoInt return _t1.nanosecond() #else null #end;
                __self__.round = #if !macro function(_d__:Duration):Time return _t1.round(_d__) #else null #end;
                __self__.second = #if !macro function():GoInt return _t1.second() #else null #end;
                __self__.string = #if !macro function():GoString return _t1.string() #else null #end;
                __self__.sub = #if !macro function(__0:Time):Duration return _t1.sub(__0) #else null #end;
                __self__.truncate = #if !macro function(_d___:Duration):Time return _t1.truncate(_d___) #else null #end;
                __self__.utc = #if !macro function():Time return _t1.utc() #else null #end;
                __self__.unix = #if !macro function():GoInt64 return _t1.unix() #else null #end;
                __self__.unixMicro = #if !macro function():GoInt64 return _t1.unixMicro() #else null #end;
                __self__.unixMilli = #if !macro function():GoInt64 return _t1.unixMilli() #else null #end;
                __self__.unixNano = #if !macro function():GoInt64 return _t1.unixNano() #else null #end;
                __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalBinary(__0) #else null #end;
                __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalJSON(__0) #else null #end;
                __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalText(__0) #else null #end;
                __self__.weekday = #if !macro function():Weekday return _t1.weekday() #else null #end;
                __self__.year = #if !macro function():GoInt return _t1.year() #else null #end;
                __self__.yearDay = #if !macro function():GoInt return _t1.yearDay() #else null #end;
                __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _t1.zone() #else null #end;
                __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _t1.zoneBounds() #else null #end;
                __self__._abs = #if !macro function():GoUInt64 return _t1._abs() #else null #end;
                __self__._addSec = #if !macro function(_sec:GoInt64):Void _t1._addSec(_sec) #else null #end;
                __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _t1._date(__0) #else null #end;
                __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _t1._locabs() #else null #end;
                __self__._mono = #if !macro function():GoInt64 return _t1._mono() #else null #end;
                __self__._nsec = #if !macro function():GoInt32 return _t1._nsec() #else null #end;
                __self__._sec = #if !macro function():GoInt64 return _t1._sec() #else null #end;
                __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _t1._setLoc(__0) #else null #end;
                __self__._setMono = #if !macro function(_sec:GoInt64):Void _t1._setMono(_sec) #else null #end;
                __self__._stripMono = #if !macro function():Void _t1._stripMono() #else null #end;
                __self__._unixSec = #if !macro function():GoInt64 return _t1._unixSec() #else null #end;
                __self__;
            }), Go.toInterface({
                final __self__ = new Time_wrapper(_t2);
                __self__.add = #if !macro function(_d_:Duration):Time return _t2.add(_d_) #else null #end;
                __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _t2.addDate(_years, _months, _days) #else null #end;
                __self__.after = #if !macro function(__0:Time):Bool return _t2.after(__0) #else null #end;
                __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _t2.appendFormat(_b, _layout) #else null #end;
                __self__.before = #if !macro function(__0:Time):Bool return _t2.before(__0) #else null #end;
                __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _t2.clock() #else null #end;
                __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _t2.date() #else null #end;
                __self__.day = #if !macro function():GoInt return _t2.day() #else null #end;
                __self__.equal = #if !macro function(__0:Time):Bool return _t2.equal(__0) #else null #end;
                __self__.format = #if !macro function(__0:GoString):GoString return _t2.format(__0) #else null #end;
                __self__.goString = #if !macro function():GoString return _t2.goString() #else null #end;
                __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.gobDecode(__0) #else null #end;
                __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.gobEncode() #else null #end;
                __self__.hour = #if !macro function():GoInt return _t2.hour() #else null #end;
                __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _t2.isoweek() #else null #end;
                __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _t2.in_(__0) #else null #end;
                __self__.isDST = #if !macro function():Bool return _t2.isDST() #else null #end;
                __self__.isZero = #if !macro function():Bool return _t2.isZero() #else null #end;
                __self__.local = #if !macro function():Time return _t2.local() #else null #end;
                __self__.location = #if !macro function():Ref<Location> return _t2.location() #else null #end;
                __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.marshalBinary() #else null #end;
                __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.marshalJSON() #else null #end;
                __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.marshalText() #else null #end;
                __self__.minute = #if !macro function():GoInt return _t2.minute() #else null #end;
                __self__.month = #if !macro function():Month return _t2.month() #else null #end;
                __self__.nanosecond = #if !macro function():GoInt return _t2.nanosecond() #else null #end;
                __self__.round = #if !macro function(_d__:Duration):Time return _t2.round(_d__) #else null #end;
                __self__.second = #if !macro function():GoInt return _t2.second() #else null #end;
                __self__.string = #if !macro function():GoString return _t2.string() #else null #end;
                __self__.sub = #if !macro function(__0:Time):Duration return _t2.sub(__0) #else null #end;
                __self__.truncate = #if !macro function(_d___:Duration):Time return _t2.truncate(_d___) #else null #end;
                __self__.utc = #if !macro function():Time return _t2.utc() #else null #end;
                __self__.unix = #if !macro function():GoInt64 return _t2.unix() #else null #end;
                __self__.unixMicro = #if !macro function():GoInt64 return _t2.unixMicro() #else null #end;
                __self__.unixMilli = #if !macro function():GoInt64 return _t2.unixMilli() #else null #end;
                __self__.unixNano = #if !macro function():GoInt64 return _t2.unixNano() #else null #end;
                __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.unmarshalBinary(__0) #else null #end;
                __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.unmarshalJSON(__0) #else null #end;
                __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.unmarshalText(__0) #else null #end;
                __self__.weekday = #if !macro function():Weekday return _t2.weekday() #else null #end;
                __self__.year = #if !macro function():GoInt return _t2.year() #else null #end;
                __self__.yearDay = #if !macro function():GoInt return _t2.yearDay() #else null #end;
                __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _t2.zone() #else null #end;
                __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _t2.zoneBounds() #else null #end;
                __self__._abs = #if !macro function():GoUInt64 return _t2._abs() #else null #end;
                __self__._addSec = #if !macro function(_sec:GoInt64):Void _t2._addSec(_sec) #else null #end;
                __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _t2._date(__0) #else null #end;
                __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _t2._locabs() #else null #end;
                __self__._mono = #if !macro function():GoInt64 return _t2._mono() #else null #end;
                __self__._nsec = #if !macro function():GoInt32 return _t2._nsec() #else null #end;
                __self__._sec = #if !macro function():GoInt64 return _t2._sec() #else null #end;
                __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _t2._setLoc(__0) #else null #end;
                __self__._setMono = #if !macro function(_sec:GoInt64):Void _t2._setMono(_sec) #else null #end;
                __self__._stripMono = #if !macro function():Void _t2._stripMono() #else null #end;
                __self__._unixSec = #if !macro function():GoInt64 return _t2._unixSec() #else null #end;
                __self__;
            }));
        };
    }
function testMonotonicString(_t:stdgo.testing.Testing.T):Void {
        var _t1:Time = (now() == null ? null : now().__copy__());
        _t.logf(((((("Now() = %v" : GoString))) : GoString)), Go.toInterface({
            final __self__ = new Time_wrapper(_t1);
            __self__.add = #if !macro function(_d:Duration):Time return _t1.add(_d) #else null #end;
            __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _t1.addDate(_years, _months, _days) #else null #end;
            __self__.after = #if !macro function(__0:Time):Bool return _t1.after(__0) #else null #end;
            __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _t1.appendFormat(_b, _layout) #else null #end;
            __self__.before = #if !macro function(__0:Time):Bool return _t1.before(__0) #else null #end;
            __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _t1.clock() #else null #end;
            __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _t1.date() #else null #end;
            __self__.day = #if !macro function():GoInt return _t1.day() #else null #end;
            __self__.equal = #if !macro function(__0:Time):Bool return _t1.equal(__0) #else null #end;
            __self__.format = #if !macro function(__0:GoString):GoString return _t1.format(__0) #else null #end;
            __self__.goString = #if !macro function():GoString return _t1.goString() #else null #end;
            __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.gobDecode(__0) #else null #end;
            __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.gobEncode() #else null #end;
            __self__.hour = #if !macro function():GoInt return _t1.hour() #else null #end;
            __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _t1.isoweek() #else null #end;
            __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _t1.in_(__0) #else null #end;
            __self__.isDST = #if !macro function():Bool return _t1.isDST() #else null #end;
            __self__.isZero = #if !macro function():Bool return _t1.isZero() #else null #end;
            __self__.local = #if !macro function():Time return _t1.local() #else null #end;
            __self__.location = #if !macro function():Ref<Location> return _t1.location() #else null #end;
            __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalBinary() #else null #end;
            __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalJSON() #else null #end;
            __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalText() #else null #end;
            __self__.minute = #if !macro function():GoInt return _t1.minute() #else null #end;
            __self__.month = #if !macro function():Month return _t1.month() #else null #end;
            __self__.nanosecond = #if !macro function():GoInt return _t1.nanosecond() #else null #end;
            __self__.round = #if !macro function(_d:Duration):Time return _t1.round(_d) #else null #end;
            __self__.second = #if !macro function():GoInt return _t1.second() #else null #end;
            __self__.string = #if !macro function():GoString return _t1.string() #else null #end;
            __self__.sub = #if !macro function(__0:Time):Duration return _t1.sub(__0) #else null #end;
            __self__.truncate = #if !macro function(_d:Duration):Time return _t1.truncate(_d) #else null #end;
            __self__.utc = #if !macro function():Time return _t1.utc() #else null #end;
            __self__.unix = #if !macro function():GoInt64 return _t1.unix() #else null #end;
            __self__.unixMicro = #if !macro function():GoInt64 return _t1.unixMicro() #else null #end;
            __self__.unixMilli = #if !macro function():GoInt64 return _t1.unixMilli() #else null #end;
            __self__.unixNano = #if !macro function():GoInt64 return _t1.unixNano() #else null #end;
            __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalBinary(__0) #else null #end;
            __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalJSON(__0) #else null #end;
            __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalText(__0) #else null #end;
            __self__.weekday = #if !macro function():Weekday return _t1.weekday() #else null #end;
            __self__.year = #if !macro function():GoInt return _t1.year() #else null #end;
            __self__.yearDay = #if !macro function():GoInt return _t1.yearDay() #else null #end;
            __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _t1.zone() #else null #end;
            __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _t1.zoneBounds() #else null #end;
            __self__._abs = #if !macro function():GoUInt64 return _t1._abs() #else null #end;
            __self__._addSec = #if !macro function(_sec:GoInt64):Void _t1._addSec(_sec) #else null #end;
            __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _t1._date(__0) #else null #end;
            __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _t1._locabs() #else null #end;
            __self__._mono = #if !macro function():GoInt64 return _t1._mono() #else null #end;
            __self__._nsec = #if !macro function():GoInt32 return _t1._nsec() #else null #end;
            __self__._sec = #if !macro function():GoInt64 return _t1._sec() #else null #end;
            __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _t1._setLoc(__0) #else null #end;
            __self__._setMono = #if !macro function(_sec:GoInt64):Void _t1._setMono(_sec) #else null #end;
            __self__._stripMono = #if !macro function():Void _t1._stripMono() #else null #end;
            __self__._unixSec = #if !macro function():GoInt64 return _t1._unixSec() #else null #end;
            __self__;
        }));
        for (_0 => _tt in _monotonicStringTests) {
            var _t1:Time = (now() == null ? null : now().__copy__());
            setMono(_t1, _tt._mono);
            var _s:GoString = ((_t1.string() : GoString));
            var _got:GoString = ((_s.__slice__(stdgo.strings.Strings.lastIndex(_s, (((((" " : GoString))) : GoString))) + ((1 : GoInt))) : GoString));
            if (_got != _tt._want) {
                _t.errorf(((((("with mono=%d: got %q; want %q" : GoString))) : GoString)), Go.toInterface(_tt._mono), Go.toInterface(_got), Go.toInterface(_tt._want));
            };
        };
    }
function testSleep(_t:stdgo.testing.Testing.T):Void {
        {};
        Go.routine(() -> {
            var a = function():Void {
                sleep(((50000000 : Duration)));
                interrupt();
            };
            a();
        });
        var _start:Time = (now() == null ? null : now().__copy__());
        sleep(((100000000 : Duration)));
        var _delayadj:Duration = ((100000000 : Duration));
        if (false) {
            _delayadj = _delayadj - (((17000000 : Duration)));
        };
        var _duration:Duration = now().sub((_start == null ? null : _start.__copy__()));
        if (_duration < _delayadj) {
            _t.fatalf(((((("Sleep(%s) slept for only %s" : GoString))) : GoString)), Go.toInterface({
                final __self__ = new Duration_wrapper(((100000000 : Duration)));
                __self__.abs = #if !macro function():Duration return ((100000000 : Duration)).abs() #else null #end;
                __self__.hours = #if !macro function():GoFloat64 return ((100000000 : Duration)).hours() #else null #end;
                __self__.microseconds = #if !macro function():GoInt64 return ((100000000 : Duration)).microseconds() #else null #end;
                __self__.milliseconds = #if !macro function():GoInt64 return ((100000000 : Duration)).milliseconds() #else null #end;
                __self__.minutes = #if !macro function():GoFloat64 return ((100000000 : Duration)).minutes() #else null #end;
                __self__.nanoseconds = #if !macro function():GoInt64 return ((100000000 : Duration)).nanoseconds() #else null #end;
                __self__.round = #if !macro function(_d:Duration):Duration return ((100000000 : Duration)).round(_d) #else null #end;
                __self__.seconds = #if !macro function():GoFloat64 return ((100000000 : Duration)).seconds() #else null #end;
                __self__.string = #if !macro function():GoString return ((100000000 : Duration)).string() #else null #end;
                __self__.truncate = #if !macro function(_d:Duration):Duration return ((100000000 : Duration)).truncate(_d) #else null #end;
                __self__;
            }), Go.toInterface({
                final __self__ = new Duration_wrapper(_duration);
                __self__.abs = #if !macro function():Duration return _duration.abs() #else null #end;
                __self__.hours = #if !macro function():GoFloat64 return _duration.hours() #else null #end;
                __self__.microseconds = #if !macro function():GoInt64 return _duration.microseconds() #else null #end;
                __self__.milliseconds = #if !macro function():GoInt64 return _duration.milliseconds() #else null #end;
                __self__.minutes = #if !macro function():GoFloat64 return _duration.minutes() #else null #end;
                __self__.nanoseconds = #if !macro function():GoInt64 return _duration.nanoseconds() #else null #end;
                __self__.round = #if !macro function(_d:Duration):Duration return _duration.round(_d) #else null #end;
                __self__.seconds = #if !macro function():GoFloat64 return _duration.seconds() #else null #end;
                __self__.string = #if !macro function():GoString return _duration.string() #else null #end;
                __self__.truncate = #if !macro function(_d:Duration):Duration return _duration.truncate(_d) #else null #end;
                __self__;
            }));
        };
    }
/**
    // Test the basic function calling behavior. Correct queueing
    // behavior is tested elsewhere, since After and AfterFunc share
    // the same code.
**/
function testAfterFunc(_t:stdgo.testing.Testing.T):Void {
        var _i:GoInt = ((10 : GoInt));
        var _c = new Chan<Bool>(0, () -> false);
        var _f:() -> Void = null;
        _f = function():Void {
            _i--;
            if (_i >= ((0 : GoInt))) {
                afterFunc(((0 : Duration)), _f);
                sleep(((1000000000 : Duration)));
            } else {
                _c.__send__(true);
            };
        };
        afterFunc(((0 : Duration)), _f);
        _c.__get__();
    }
function testAfterStress(_t:stdgo.testing.Testing.T):Void {
        var _stop:GoUInt32 = ((((0 : GoUInt32)) : GoUInt32));
        Go.routine(() -> {
            var a = function():Void {
                while (stdgo.sync.atomic.Atomic.loadUint32(Go.pointer(_stop)) == ((0 : GoUInt32))) {
                    stdgo.runtime.Runtime.gc();
                    sleep(((1 : Duration)));
                };
            };
            a();
        });
        var _ticker = newTicker(((1 : Duration)));
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < ((100 : GoInt)), _i++, {
                _ticker.c.__get__();
            });
        };
        _ticker.stop();
        stdgo.sync.atomic.Atomic.storeUint32(Go.pointer(_stop), ((1 : GoUInt32)));
    }
function _benchmark(_b:stdgo.testing.Testing.B, _bench:(_n:GoInt) -> Void):Void {
        var _wg:stdgo.sync.Sync.WaitGroup = (({  } : stdgo.sync.Sync.WaitGroup));
        var _garbageAll = new Slice<Slice<Ref<Timer>>>(...[for (i in 0 ... ((stdgo.runtime.Runtime.gomaxprocs(((0 : GoInt))) : GoInt)).toBasic()) ((null : Slice<Ref<Timer>>))]);
        for (_i => _ in _garbageAll) {
            _wg.add(((1 : GoInt)));
            Go.routine(() -> {
                var a = function(_i:GoInt):Void {
                    var __recover_exception__:AnyInterface = null;
                    var __deferstack__:Array<Void -> Void> = [];
                    try {
                        __deferstack__.unshift(() -> _wg.done());
                        var _garbage = new Slice<Ref<Timer>>(...[for (i in 0 ... ((((32768 : GoInt)) : GoInt)).toBasic()) ((null : Timer))]);
                        for (_j => _ in _garbage) {
                            if (_garbage != null) _garbage[_j] = afterFunc((("3600000000000" : Duration)), null);
                        };
                        if (_garbageAll != null) _garbageAll[_i] = _garbage;
                        for (defer in __deferstack__) {
                            defer();
                        };
                        {
                            for (defer in __deferstack__) {
                                defer();
                            };
                            if (__recover_exception__ != null) throw __recover_exception__;
                            return;
                        };
                    } catch(__exception__) {
                        if (!(__exception__.native is AnyInterfaceData)) throw __exception__;
                        __recover_exception__ = __exception__.native;
                        for (defer in __deferstack__) {
                            defer();
                        };
                        if (__recover_exception__ != null) throw __recover_exception__;
                        return;
                    };
                };
                a(_i);
            });
        };
        _wg.wait_();
        _b.resetTimer();
        _b.runParallel(function(_pb:stdgo.testing.Testing.PB):Void {
            while (_pb.next()) {
                _bench(((1000 : GoInt)));
            };
        });
        _b.stopTimer();
        for (_0 => _garbage in _garbageAll) {
            for (_1 => _t in _garbage) {
                _t.stop();
            };
        };
    }
function benchmarkAfterFunc(_b:stdgo.testing.Testing.B):Void {
        _benchmark(_b, function(_n:GoInt):Void {
            var _c = new Chan<Bool>(0, () -> false);
            var _f:() -> Void = null;
            _f = function():Void {
                _n--;
                if (_n >= ((0 : GoInt))) {
                    afterFunc(((0 : Duration)), _f);
                } else {
                    _c.__send__(true);
                };
            };
            afterFunc(((0 : Duration)), _f);
            _c.__get__();
        });
    }
function benchmarkAfter(_b:stdgo.testing.Testing.B):Void {
        _benchmark(_b, function(_n:GoInt):Void {
            {
                var _i:GoInt = ((0 : GoInt));
                Go.cfor(_i < _n, _i++, {
                    after(((1 : Duration))).__get__();
                });
            };
        });
    }
function benchmarkStop(_b:stdgo.testing.Testing.B):Void {
        _benchmark(_b, function(_n:GoInt):Void {
            {
                var _i:GoInt = ((0 : GoInt));
                Go.cfor(_i < _n, _i++, {
                    newTimer(((1000000000 : Duration))).stop();
                });
            };
        });
    }
function benchmarkSimultaneousAfterFunc(_b:stdgo.testing.Testing.B):Void {
        _benchmark(_b, function(_n:GoInt):Void {
            var _wg:stdgo.sync.Sync.WaitGroup = (({  } : stdgo.sync.Sync.WaitGroup));
            _wg.add(_n);
            {
                var _i:GoInt = ((0 : GoInt));
                Go.cfor(_i < _n, _i++, {
                    afterFunc(((0 : Duration)), _wg.done);
                });
            };
            _wg.wait_();
        });
    }
function benchmarkStartStop(_b:stdgo.testing.Testing.B):Void {
        _benchmark(_b, function(_n:GoInt):Void {
            var _timers = new Slice<Ref<Timer>>(...[for (i in 0 ... ((_n : GoInt)).toBasic()) ((null : Timer))]);
            {
                var _i:GoInt = ((0 : GoInt));
                Go.cfor(_i < _n, _i++, {
                    if (_timers != null) _timers[_i] = afterFunc((("3600000000000" : Duration)), null);
                });
            };
            {
                var _i:GoInt = ((0 : GoInt));
                Go.cfor(_i < _n, _i++, {
                    (_timers != null ? _timers[_i] : ((null : Timer))).stop();
                });
            };
        });
    }
function benchmarkReset(_b:stdgo.testing.Testing.B):Void {
        _benchmark(_b, function(_n:GoInt):Void {
            var _t = newTimer((("3600000000000" : Duration)));
            {
                var _i:GoInt = ((0 : GoInt));
                Go.cfor(_i < _n, _i++, {
                    _t.reset((("3600000000000" : Duration)));
                });
            };
            _t.stop();
        });
    }
function benchmarkSleep(_b:stdgo.testing.Testing.B):Void {
        _benchmark(_b, function(_n:GoInt):Void {
            var _wg:stdgo.sync.Sync.WaitGroup = (({  } : stdgo.sync.Sync.WaitGroup));
            _wg.add(_n);
            {
                var _i:GoInt = ((0 : GoInt));
                Go.cfor(_i < _n, _i++, {
                    Go.routine(() -> {
                        var a = function():Void {
                            sleep(((1 : Duration)));
                            _wg.done();
                        };
                        a();
                    });
                });
            };
            _wg.wait_();
        });
    }
function testAfter(_t:stdgo.testing.Testing.T):Void {
        {};
        var _start:Time = (now() == null ? null : now().__copy__());
        var _end:Time = (after(((100000000 : Duration))).__get__() == null ? null : after(((100000000 : Duration))).__get__().__copy__());
        var _delayadj:Duration = ((100000000 : Duration));
        if (false) {
            _delayadj = _delayadj - (((17000000 : Duration)));
        };
        {
            var _duration:Duration = now().sub((_start == null ? null : _start.__copy__()));
            if (_duration < _delayadj) {
                _t.fatalf(((((("After(%s) slept for only %d ns" : GoString))) : GoString)), Go.toInterface({
                    final __self__ = new Duration_wrapper(((100000000 : Duration)));
                    __self__.abs = #if !macro function():Duration return ((100000000 : Duration)).abs() #else null #end;
                    __self__.hours = #if !macro function():GoFloat64 return ((100000000 : Duration)).hours() #else null #end;
                    __self__.microseconds = #if !macro function():GoInt64 return ((100000000 : Duration)).microseconds() #else null #end;
                    __self__.milliseconds = #if !macro function():GoInt64 return ((100000000 : Duration)).milliseconds() #else null #end;
                    __self__.minutes = #if !macro function():GoFloat64 return ((100000000 : Duration)).minutes() #else null #end;
                    __self__.nanoseconds = #if !macro function():GoInt64 return ((100000000 : Duration)).nanoseconds() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Duration return ((100000000 : Duration)).round(_d) #else null #end;
                    __self__.seconds = #if !macro function():GoFloat64 return ((100000000 : Duration)).seconds() #else null #end;
                    __self__.string = #if !macro function():GoString return ((100000000 : Duration)).string() #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Duration return ((100000000 : Duration)).truncate(_d) #else null #end;
                    __self__;
                }), Go.toInterface({
                    final __self__ = new Duration_wrapper(_duration);
                    __self__.abs = #if !macro function():Duration return _duration.abs() #else null #end;
                    __self__.hours = #if !macro function():GoFloat64 return _duration.hours() #else null #end;
                    __self__.microseconds = #if !macro function():GoInt64 return _duration.microseconds() #else null #end;
                    __self__.milliseconds = #if !macro function():GoInt64 return _duration.milliseconds() #else null #end;
                    __self__.minutes = #if !macro function():GoFloat64 return _duration.minutes() #else null #end;
                    __self__.nanoseconds = #if !macro function():GoInt64 return _duration.nanoseconds() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Duration return _duration.round(_d) #else null #end;
                    __self__.seconds = #if !macro function():GoFloat64 return _duration.seconds() #else null #end;
                    __self__.string = #if !macro function():GoString return _duration.string() #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Duration return _duration.truncate(_d) #else null #end;
                    __self__;
                }));
            };
        };
        {
            var _min:Time = (_start.add(_delayadj) == null ? null : _start.add(_delayadj).__copy__());
            if (_end.before((_min == null ? null : _min.__copy__()))) {
                _t.fatalf(((((("After(%s) expect >= %s, got %s" : GoString))) : GoString)), Go.toInterface({
                    final __self__ = new Duration_wrapper(((100000000 : Duration)));
                    __self__.abs = #if !macro function():Duration return ((100000000 : Duration)).abs() #else null #end;
                    __self__.hours = #if !macro function():GoFloat64 return ((100000000 : Duration)).hours() #else null #end;
                    __self__.microseconds = #if !macro function():GoInt64 return ((100000000 : Duration)).microseconds() #else null #end;
                    __self__.milliseconds = #if !macro function():GoInt64 return ((100000000 : Duration)).milliseconds() #else null #end;
                    __self__.minutes = #if !macro function():GoFloat64 return ((100000000 : Duration)).minutes() #else null #end;
                    __self__.nanoseconds = #if !macro function():GoInt64 return ((100000000 : Duration)).nanoseconds() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Duration return ((100000000 : Duration)).round(_d) #else null #end;
                    __self__.seconds = #if !macro function():GoFloat64 return ((100000000 : Duration)).seconds() #else null #end;
                    __self__.string = #if !macro function():GoString return ((100000000 : Duration)).string() #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Duration return ((100000000 : Duration)).truncate(_d) #else null #end;
                    __self__;
                }), Go.toInterface({
                    final __self__ = new Time_wrapper(_min);
                    __self__.add = #if !macro function(_d:Duration):Time return _min.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _min.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _min.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _min.appendFormat(_b, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _min.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _min.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _min.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _min.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _min.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _min.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _min.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _min.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _min.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _min.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _min.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _min.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _min.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _min.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _min.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _min.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _min.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _min.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _min.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _min.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _min.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _min.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _min.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _min.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _min.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _min.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _min.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _min.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _min.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _min.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _min.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _min.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _min.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _min.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _min.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _min.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _min.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _min.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _min.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _min.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _min._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec:GoInt64):Void _min._addSec(_sec) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _min._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _min._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _min._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _min._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _min._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _min._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec:GoInt64):Void _min._setMono(_sec) #else null #end;
                    __self__._stripMono = #if !macro function():Void _min._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _min._unixSec() #else null #end;
                    __self__;
                }), Go.toInterface({
                    final __self__ = new Time_wrapper(_end);
                    __self__.add = #if !macro function(_d:Duration):Time return _end.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _end.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _end.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _end.appendFormat(_b, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _end.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _end.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _end.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _end.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _end.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _end.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _end.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _end.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _end.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _end.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _end.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _end.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _end.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _end.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _end.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _end.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _end.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _end.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _end.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _end.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _end.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _end.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _end.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _end.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _end.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _end.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _end.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _end.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _end.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _end.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _end.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _end.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _end.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _end.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _end.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _end.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _end.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _end.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _end.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _end.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _end._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec:GoInt64):Void _end._addSec(_sec) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _end._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _end._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _end._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _end._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _end._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _end._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec:GoInt64):Void _end._setMono(_sec) #else null #end;
                    __self__._stripMono = #if !macro function():Void _end._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _end._unixSec() #else null #end;
                    __self__;
                }));
            };
        };
    }
function testAfterTick(_t:stdgo.testing.Testing.T):Void {
        {};
        var delta:Duration = ((100000000 : Duration));
        if (stdgo.testing.Testing.short()) {
            delta = ((10000000 : Duration));
        };
        var _t0:Time = (now() == null ? null : now().__copy__());
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < ((10 : GoInt)), _i++, {
                after(delta).__get__();
            });
        };
        var _t1:Time = (now() == null ? null : now().__copy__());
        var _d:Duration = _t1.sub((_t0 == null ? null : _t0.__copy__()));
        var _target:Duration = delta * ((10 : Duration));
        if (_d < ((_target * ((9 : Duration))) / ((10 : Duration)))) {
            _t.fatalf(((((("%d ticks of %s too fast: took %s, expected %s" : GoString))) : GoString)), Go.toInterface(((10 : GoInt))), Go.toInterface({
                final __self__ = new Duration_wrapper(delta);
                __self__.abs = #if !macro function():Duration return delta.abs() #else null #end;
                __self__.hours = #if !macro function():GoFloat64 return delta.hours() #else null #end;
                __self__.microseconds = #if !macro function():GoInt64 return delta.microseconds() #else null #end;
                __self__.milliseconds = #if !macro function():GoInt64 return delta.milliseconds() #else null #end;
                __self__.minutes = #if !macro function():GoFloat64 return delta.minutes() #else null #end;
                __self__.nanoseconds = #if !macro function():GoInt64 return delta.nanoseconds() #else null #end;
                __self__.round = #if !macro function(_d_:Duration):Duration return delta.round(_d_) #else null #end;
                __self__.seconds = #if !macro function():GoFloat64 return delta.seconds() #else null #end;
                __self__.string = #if !macro function():GoString return delta.string() #else null #end;
                __self__.truncate = #if !macro function(_d__:Duration):Duration return delta.truncate(_d__) #else null #end;
                __self__;
            }), Go.toInterface({
                final __self__ = new Duration_wrapper(_d);
                __self__.abs = #if !macro function():Duration return _d.abs() #else null #end;
                __self__.hours = #if !macro function():GoFloat64 return _d.hours() #else null #end;
                __self__.microseconds = #if !macro function():GoInt64 return _d.microseconds() #else null #end;
                __self__.milliseconds = #if !macro function():GoInt64 return _d.milliseconds() #else null #end;
                __self__.minutes = #if !macro function():GoFloat64 return _d.minutes() #else null #end;
                __self__.nanoseconds = #if !macro function():GoInt64 return _d.nanoseconds() #else null #end;
                __self__.round = #if !macro function(_d_:Duration):Duration return _d.round(_d_) #else null #end;
                __self__.seconds = #if !macro function():GoFloat64 return _d.seconds() #else null #end;
                __self__.string = #if !macro function():GoString return _d.string() #else null #end;
                __self__.truncate = #if !macro function(_d__:Duration):Duration return _d.truncate(_d__) #else null #end;
                __self__;
            }), Go.toInterface({
                final __self__ = new Duration_wrapper(_target);
                __self__.abs = #if !macro function():Duration return _target.abs() #else null #end;
                __self__.hours = #if !macro function():GoFloat64 return _target.hours() #else null #end;
                __self__.microseconds = #if !macro function():GoInt64 return _target.microseconds() #else null #end;
                __self__.milliseconds = #if !macro function():GoInt64 return _target.milliseconds() #else null #end;
                __self__.minutes = #if !macro function():GoFloat64 return _target.minutes() #else null #end;
                __self__.nanoseconds = #if !macro function():GoInt64 return _target.nanoseconds() #else null #end;
                __self__.round = #if !macro function(_d_:Duration):Duration return _target.round(_d_) #else null #end;
                __self__.seconds = #if !macro function():GoFloat64 return _target.seconds() #else null #end;
                __self__.string = #if !macro function():GoString return _target.string() #else null #end;
                __self__.truncate = #if !macro function(_d__:Duration):Duration return _target.truncate(_d__) #else null #end;
                __self__;
            }));
        };
        if (!stdgo.testing.Testing.short() && (_d > ((_target * ((30 : Duration))) / ((10 : Duration))))) {
            _t.fatalf(((((("%d ticks of %s too slow: took %s, expected %s" : GoString))) : GoString)), Go.toInterface(((10 : GoInt))), Go.toInterface({
                final __self__ = new Duration_wrapper(delta);
                __self__.abs = #if !macro function():Duration return delta.abs() #else null #end;
                __self__.hours = #if !macro function():GoFloat64 return delta.hours() #else null #end;
                __self__.microseconds = #if !macro function():GoInt64 return delta.microseconds() #else null #end;
                __self__.milliseconds = #if !macro function():GoInt64 return delta.milliseconds() #else null #end;
                __self__.minutes = #if !macro function():GoFloat64 return delta.minutes() #else null #end;
                __self__.nanoseconds = #if !macro function():GoInt64 return delta.nanoseconds() #else null #end;
                __self__.round = #if !macro function(_d_:Duration):Duration return delta.round(_d_) #else null #end;
                __self__.seconds = #if !macro function():GoFloat64 return delta.seconds() #else null #end;
                __self__.string = #if !macro function():GoString return delta.string() #else null #end;
                __self__.truncate = #if !macro function(_d__:Duration):Duration return delta.truncate(_d__) #else null #end;
                __self__;
            }), Go.toInterface({
                final __self__ = new Duration_wrapper(_d);
                __self__.abs = #if !macro function():Duration return _d.abs() #else null #end;
                __self__.hours = #if !macro function():GoFloat64 return _d.hours() #else null #end;
                __self__.microseconds = #if !macro function():GoInt64 return _d.microseconds() #else null #end;
                __self__.milliseconds = #if !macro function():GoInt64 return _d.milliseconds() #else null #end;
                __self__.minutes = #if !macro function():GoFloat64 return _d.minutes() #else null #end;
                __self__.nanoseconds = #if !macro function():GoInt64 return _d.nanoseconds() #else null #end;
                __self__.round = #if !macro function(_d_:Duration):Duration return _d.round(_d_) #else null #end;
                __self__.seconds = #if !macro function():GoFloat64 return _d.seconds() #else null #end;
                __self__.string = #if !macro function():GoString return _d.string() #else null #end;
                __self__.truncate = #if !macro function(_d__:Duration):Duration return _d.truncate(_d__) #else null #end;
                __self__;
            }), Go.toInterface({
                final __self__ = new Duration_wrapper(_target);
                __self__.abs = #if !macro function():Duration return _target.abs() #else null #end;
                __self__.hours = #if !macro function():GoFloat64 return _target.hours() #else null #end;
                __self__.microseconds = #if !macro function():GoInt64 return _target.microseconds() #else null #end;
                __self__.milliseconds = #if !macro function():GoInt64 return _target.milliseconds() #else null #end;
                __self__.minutes = #if !macro function():GoFloat64 return _target.minutes() #else null #end;
                __self__.nanoseconds = #if !macro function():GoInt64 return _target.nanoseconds() #else null #end;
                __self__.round = #if !macro function(_d_:Duration):Duration return _target.round(_d_) #else null #end;
                __self__.seconds = #if !macro function():GoFloat64 return _target.seconds() #else null #end;
                __self__.string = #if !macro function():GoString return _target.string() #else null #end;
                __self__.truncate = #if !macro function(_d__:Duration):Duration return _target.truncate(_d__) #else null #end;
                __self__;
            }));
        };
    }
function testAfterStop(_t:stdgo.testing.Testing.T):Void {
        var _errs:Slice<GoString> = ((null : Slice<GoString>));
        var _logErrs:() -> Void = function():Void {
            for (_0 => _e in _errs) {
                _t.log(Go.toInterface(_e));
            };
        };
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < ((5 : GoInt)), _i++, {
                afterFunc(((100000000 : Duration)), function():Void {});
                var _t0 = newTimer(((50000000 : Duration)));
                var _c1 = new Chan<Bool>(((((1 : GoInt)) : GoInt)).toBasic(), () -> false);
                var _t1 = afterFunc(((150000000 : Duration)), function():Void {
                    _c1.__send__(true);
                });
                var _c2 = after(((200000000 : Duration)));
                if (!_t0.stop()) {
                    _errs = (_errs != null ? _errs.__append__(((((("failed to stop event 0" : GoString))) : GoString))) : new Slice<GoString>(((((("failed to stop event 0" : GoString))) : GoString))));
                    continue;
                };
                if (!_t1.stop()) {
                    _errs = (_errs != null ? _errs.__append__(((((("failed to stop event 1" : GoString))) : GoString))) : new Slice<GoString>(((((("failed to stop event 1" : GoString))) : GoString))));
                    continue;
                };
                _c2.__get__();
                Go.select([_c1.__get__() => {
                    _errs = (_errs != null ? _errs.__append__(((((("event 1 was not stopped" : GoString))) : GoString))) : new Slice<GoString>(((((("event 1 was not stopped" : GoString))) : GoString))));
                    continue;
                }, _t0.c.__get__() => {
                    _errs = (_errs != null ? _errs.__append__(((((("event 0 was not stopped" : GoString))) : GoString))) : new Slice<GoString>(((((("event 0 was not stopped" : GoString))) : GoString))));
                    continue;
                }, {}]);
                if (_t1.stop()) {
                    _errs = (_errs != null ? _errs.__append__(((((("Stop returned true twice" : GoString))) : GoString))) : new Slice<GoString>(((((("Stop returned true twice" : GoString))) : GoString))));
                    continue;
                };
                if ((_errs != null ? _errs.length : ((0 : GoInt))) > ((0 : GoInt))) {
                    _t.logf(((((("saw %d errors, ignoring to avoid flakiness" : GoString))) : GoString)), Go.toInterface((_errs != null ? _errs.length : ((0 : GoInt)))));
                    _logErrs();
                };
                return;
            });
        };
        _t.errorf(((((("saw %d errors" : GoString))) : GoString)), Go.toInterface((_errs != null ? _errs.length : ((0 : GoInt)))));
        _logErrs();
    }
function testAfterQueuing(_t:stdgo.testing.Testing.T):Void {
        {};
        var _err:stdgo.Error = stdgo.errors.Errors.new_(((((("!=nil" : GoString))) : GoString)));
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor((_i < ((5 : GoInt))) && (_err != null), _i++, {
                var _delta:Duration = (((((20 : GoInt)) + (_i * ((50 : GoInt)))) : Duration)) * ((1000000 : Duration));
                {
                    _err = _testAfterQueuing(_delta);
                    if (_err != null) {
                        _t.logf(((((("attempt %v failed: %v" : GoString))) : GoString)), Go.toInterface(_i), Go.toInterface(_err));
                    };
                };
            });
        };
        if (_err != null) {
            _t.fatal(Go.toInterface(_err));
        };
    }
function _await(_slot:GoInt, _result:Chan<T_afterResult>, _ac:Chan<Time>):Void {
        _result.__send__(((new stdgo.time_test.Time_test.T_afterResult(_slot, (_ac.__get__() == null ? null : _ac.__get__().__copy__())) : stdgo.time_test.Time_test.T_afterResult)));
    }
function _testAfterQueuing(_delta:Duration):Error {
        var _result = new Chan<stdgo.time_test.Time_test.T_afterResult>((((_slots != null ? _slots.length : ((0 : GoInt))) : GoInt)).toBasic(), () -> (({  } : stdgo.time_test.Time_test.T_afterResult)));
        var _t0:Time = (now() == null ? null : now().__copy__());
        for (_0 => _slot in _slots) {
            Go.routine(() -> _await(_slot, _result, after(((_slot : Duration)) * _delta)));
        };
        var _order:Slice<GoInt> = ((null : Slice<GoInt>));
        var _times:Slice<Time> = ((null : Slice<Time>));
        for (_ => _ in _slots) {
            var _r:stdgo.time_test.Time_test.T_afterResult = (_result.__get__() == null ? null : _result.__get__().__copy__());
            _order = (_order != null ? _order.__append__(_r._slot) : new Slice<GoInt>(_r._slot));
            _times = (_times != null ? _times.__append__((_r._t == null ? null : _r._t.__copy__())) : new Slice<Time>((_r._t == null ? null : _r._t.__copy__())));
        };
        for (_i => _ in _order) {
            if ((_i > ((0 : GoInt))) && ((_order != null ? _order[_i] : ((0 : GoInt))) < (_order != null ? _order[_i - ((1 : GoInt))] : ((0 : GoInt))))) {
                return stdgo.fmt.Fmt.errorf(((((("After calls returned out of order: %v" : GoString))) : GoString)), Go.toInterface(_order));
            };
        };
        for (_i => _t in _times) {
            var _dt:Duration = _t.sub((_t0 == null ? null : _t0.__copy__()));
            var _target:Duration = (((_order != null ? _order[_i] : ((0 : GoInt))) : Duration)) * _delta;
            if ((_dt < (_target - (_delta / ((2 : Duration))))) || (_dt > (_target + (_delta * ((10 : Duration)))))) {
                return stdgo.fmt.Fmt.errorf(((((("After(%s) arrived at %s, expected [%s,%s]" : GoString))) : GoString)), Go.toInterface({
                    final __self__ = new Duration_wrapper(_target);
                    __self__.abs = #if !macro function():Duration return _target.abs() #else null #end;
                    __self__.hours = #if !macro function():GoFloat64 return _target.hours() #else null #end;
                    __self__.microseconds = #if !macro function():GoInt64 return _target.microseconds() #else null #end;
                    __self__.milliseconds = #if !macro function():GoInt64 return _target.milliseconds() #else null #end;
                    __self__.minutes = #if !macro function():GoFloat64 return _target.minutes() #else null #end;
                    __self__.nanoseconds = #if !macro function():GoInt64 return _target.nanoseconds() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Duration return _target.round(_d) #else null #end;
                    __self__.seconds = #if !macro function():GoFloat64 return _target.seconds() #else null #end;
                    __self__.string = #if !macro function():GoString return _target.string() #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Duration return _target.truncate(_d) #else null #end;
                    __self__;
                }), Go.toInterface({
                    final __self__ = new Duration_wrapper(_dt);
                    __self__.abs = #if !macro function():Duration return _dt.abs() #else null #end;
                    __self__.hours = #if !macro function():GoFloat64 return _dt.hours() #else null #end;
                    __self__.microseconds = #if !macro function():GoInt64 return _dt.microseconds() #else null #end;
                    __self__.milliseconds = #if !macro function():GoInt64 return _dt.milliseconds() #else null #end;
                    __self__.minutes = #if !macro function():GoFloat64 return _dt.minutes() #else null #end;
                    __self__.nanoseconds = #if !macro function():GoInt64 return _dt.nanoseconds() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Duration return _dt.round(_d) #else null #end;
                    __self__.seconds = #if !macro function():GoFloat64 return _dt.seconds() #else null #end;
                    __self__.string = #if !macro function():GoString return _dt.string() #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Duration return _dt.truncate(_d) #else null #end;
                    __self__;
                }), Go.toInterface({
                    final __self__ = new Duration_wrapper(_target - (_delta / ((2 : Duration))));
                    __self__.abs = #if !macro function():Duration return _target - (_delta / ((2 : Duration))).abs() #else null #end;
                    __self__.hours = #if !macro function():GoFloat64 return _target - (_delta / ((2 : Duration))).hours() #else null #end;
                    __self__.microseconds = #if !macro function():GoInt64 return _target - (_delta / ((2 : Duration))).microseconds() #else null #end;
                    __self__.milliseconds = #if !macro function():GoInt64 return _target - (_delta / ((2 : Duration))).milliseconds() #else null #end;
                    __self__.minutes = #if !macro function():GoFloat64 return _target - (_delta / ((2 : Duration))).minutes() #else null #end;
                    __self__.nanoseconds = #if !macro function():GoInt64 return _target - (_delta / ((2 : Duration))).nanoseconds() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Duration return _target - (_delta / ((2 : Duration))).round(_d) #else null #end;
                    __self__.seconds = #if !macro function():GoFloat64 return _target - (_delta / ((2 : Duration))).seconds() #else null #end;
                    __self__.string = #if !macro function():GoString return _target - (_delta / ((2 : Duration))).string() #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Duration return _target - (_delta / ((2 : Duration))).truncate(_d) #else null #end;
                    __self__;
                }), Go.toInterface({
                    final __self__ = new Duration_wrapper(_target + (_delta * ((10 : Duration))));
                    __self__.abs = #if !macro function():Duration return _target + (_delta * ((10 : Duration))).abs() #else null #end;
                    __self__.hours = #if !macro function():GoFloat64 return _target + (_delta * ((10 : Duration))).hours() #else null #end;
                    __self__.microseconds = #if !macro function():GoInt64 return _target + (_delta * ((10 : Duration))).microseconds() #else null #end;
                    __self__.milliseconds = #if !macro function():GoInt64 return _target + (_delta * ((10 : Duration))).milliseconds() #else null #end;
                    __self__.minutes = #if !macro function():GoFloat64 return _target + (_delta * ((10 : Duration))).minutes() #else null #end;
                    __self__.nanoseconds = #if !macro function():GoInt64 return _target + (_delta * ((10 : Duration))).nanoseconds() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Duration return _target + (_delta * ((10 : Duration))).round(_d) #else null #end;
                    __self__.seconds = #if !macro function():GoFloat64 return _target + (_delta * ((10 : Duration))).seconds() #else null #end;
                    __self__.string = #if !macro function():GoString return _target + (_delta * ((10 : Duration))).string() #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Duration return _target + (_delta * ((10 : Duration))).truncate(_d) #else null #end;
                    __self__;
                }));
            };
        };
        return ((null : stdgo.Error));
    }
function testTimerStopStress(_t:stdgo.testing.Testing.T):Void {
        if (stdgo.testing.Testing.short()) {
            return;
        };
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < ((100 : GoInt)), _i++, {
                Go.routine(() -> {
                    var a = function(_i:GoInt):Void {
                        var _timer = afterFunc(((2000000000 : Duration)), function():Void {
                            _t.errorf(((((("timer %d was not stopped" : GoString))) : GoString)), Go.toInterface(_i));
                        });
                        sleep(((1000000000 : Duration)));
                        _timer.stop();
                    };
                    a(_i);
                });
            });
        };
        sleep((("3000000000" : Duration)));
    }
function testSleepZeroDeadlock(_t:stdgo.testing.Testing.T):Void {
        var __recover_exception__:AnyInterface = null;
        var __deferstack__:Array<Void -> Void> = [];
        try {
            {
                var _a0 = stdgo.runtime.Runtime.gomaxprocs(((4 : GoInt)));
                __deferstack__.unshift(() -> stdgo.runtime.Runtime.gomaxprocs(_a0));
            };
            var _c = new Chan<Bool>(0, () -> false);
            Go.routine(() -> {
                var a = function():Void {
                    {
                        var _i:GoInt = ((0 : GoInt));
                        Go.cfor(_i < ((100 : GoInt)), _i++, {
                            stdgo.runtime.Runtime.gc();
                        });
                    };
                    _c.__send__(true);
                };
                a();
            });
            {
                var _i:GoInt = ((0 : GoInt));
                Go.cfor(_i < ((100 : GoInt)), _i++, {
                    sleep(((0 : Duration)));
                    var _tmp = new Chan<Bool>(((((1 : GoInt)) : GoInt)).toBasic(), () -> false);
                    _tmp.__send__(true);
                    _tmp.__get__();
                });
            };
            _c.__get__();
            for (defer in __deferstack__) {
                defer();
            };
            {
                for (defer in __deferstack__) {
                    defer();
                };
                if (__recover_exception__ != null) throw __recover_exception__;
                return;
            };
        } catch(__exception__) {
            if (!(__exception__.native is AnyInterfaceData)) throw __exception__;
            __recover_exception__ = __exception__.native;
            for (defer in __deferstack__) {
                defer();
            };
            if (__recover_exception__ != null) throw __recover_exception__;
            return;
        };
    }
function _testReset(_d:Duration):Error {
        var _t0 = newTimer(((2 : Duration)) * _d);
        sleep(_d);
        if (!_t0.reset(((3 : Duration)) * _d)) {
            return stdgo.errors.Errors.new_(((((("resetting unfired timer returned false" : GoString))) : GoString)));
        };
        sleep(((2 : Duration)) * _d);
        Go.select([_t0.c.__get__() => {
            return stdgo.errors.Errors.new_(((((("timer fired early" : GoString))) : GoString)));
        }, {}]);
        sleep(((2 : Duration)) * _d);
        Go.select([_t0.c.__get__() => {}, {
            return stdgo.errors.Errors.new_(((((("reset timer did not fire" : GoString))) : GoString)));
        }]);
        if (_t0.reset(((50000000 : Duration)))) {
            return stdgo.errors.Errors.new_(((((("resetting expired timer returned true" : GoString))) : GoString)));
        };
        return ((null : stdgo.Error));
    }
function testReset(_t:stdgo.testing.Testing.T):Void {
        {};
        var _tries = ((new Slice<Duration>(((25000000 : Duration)), ((75000000 : Duration)), ((175000000 : Duration)), ((375000000 : Duration))) : Slice<Duration>));
        var _err:Error = ((null : stdgo.Error));
        for (_0 => _d in _tries) {
            _err = _testReset(_d);
            if (_err == null) {
                _t.logf(((((("passed using duration %v" : GoString))) : GoString)), Go.toInterface({
                    final __self__ = new Duration_wrapper(_d);
                    __self__.abs = #if !macro function():Duration return _d.abs() #else null #end;
                    __self__.hours = #if !macro function():GoFloat64 return _d.hours() #else null #end;
                    __self__.microseconds = #if !macro function():GoInt64 return _d.microseconds() #else null #end;
                    __self__.milliseconds = #if !macro function():GoInt64 return _d.milliseconds() #else null #end;
                    __self__.minutes = #if !macro function():GoFloat64 return _d.minutes() #else null #end;
                    __self__.nanoseconds = #if !macro function():GoInt64 return _d.nanoseconds() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Duration return _d.round(_d) #else null #end;
                    __self__.seconds = #if !macro function():GoFloat64 return _d.seconds() #else null #end;
                    __self__.string = #if !macro function():GoString return _d.string() #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Duration return _d.truncate(_d) #else null #end;
                    __self__;
                }));
                return;
            };
        };
        _t.error(Go.toInterface(_err));
    }
/**
    // Test that sleeping (via Sleep or Timer) for an interval so large it
    // overflows does not result in a short sleep duration. Nor does it interfere
    // with execution of other timers. If it does, timers in this or subsequent
    // tests may not fire.
**/
function testOverflowSleep(_t:stdgo.testing.Testing.T):Void {
        {};
        Go.routine(() -> {
            var a = function():Void {
                sleep((("9223372036854775807" : Duration)));
                throw Go.toInterface(((((("big sleep returned" : GoString))) : GoString)));
            };
            a();
        });
        Go.select([after(((25000000 : Duration))).__get__() => {}, after((("9223372036854775807" : Duration))).__get__() => {
            _t.fatalf(((((("big timeout fired" : GoString))) : GoString)));
        }]);
        {};
        sleep((("-9223372036854775808" : Duration)));
        Go.select([after(((1000000000 : Duration))).__get__() => {
            _t.fatalf(((((("negative timeout didn\'t fire" : GoString))) : GoString)));
        }, after((("-9223372036854775808" : Duration))).__get__() => {}]);
    }
/**
    // Test that a panic while deleting a timer does not leave
    // the timers mutex held, deadlocking a ticker.Stop in a defer.
**/
function testIssue5745(_t:stdgo.testing.Testing.T):Void {
        var __recover_exception__:AnyInterface = null;
        var __deferstack__:Array<Void -> Void> = [];
        try {
            var _ticker = newTicker((("3600000000000" : Duration)));
            __deferstack__.unshift(() -> {
                var a = function():Void {
                    var __recover_exception__:AnyInterface = null;
                    _ticker.stop();
                    {
                        var _r:AnyInterface = Go.toInterface(({
                            final r = __recover_exception__;
                            __recover_exception__ = null;
                            r;
                        }));
                        if (_r == null) {
                            _t.error(Go.toInterface(((((("Expected panic, but none happened." : GoString))) : GoString))));
                        };
                    };
                };
                a();
            });
            var _timer:Timer = ((null : Timer));
            _timer.stop();
            _t.error(Go.toInterface(((((("Should be unreachable." : GoString))) : GoString))));
            for (defer in __deferstack__) {
                defer();
            };
            {
                for (defer in __deferstack__) {
                    defer();
                };
                if (__recover_exception__ != null) throw __recover_exception__;
                return;
            };
        } catch(__exception__) {
            if (!(__exception__.native is AnyInterfaceData)) throw __exception__;
            __recover_exception__ = __exception__.native;
            for (defer in __deferstack__) {
                defer();
            };
            if (__recover_exception__ != null) throw __recover_exception__;
            return;
        };
    }
function testOverflowPeriodRuntimeTimer(_t:stdgo.testing.Testing.T):Void {
        checkRuntimeTimerPeriodOverflow();
    }
function _checkZeroPanicString(_t:stdgo.testing.Testing.T):Void {
        var __recover_exception__:AnyInterface = null;
        var _e:AnyInterface = Go.toInterface(({
            final r = __recover_exception__;
            __recover_exception__ = null;
            r;
        }));
        var __tmp__ = try {
            { value : ((_e.value : GoString)), ok : true };
        } catch(_) {
            { value : (("" : GoString)), ok : false };
        }, _s = __tmp__.value, _0 = __tmp__.ok;
        {
            var _want:GoString = ((((("called on uninitialized Timer" : GoString))) : GoString));
            if (!stdgo.strings.Strings.contains(_s, _want)) {
                _t.errorf(((((("panic = %v; want substring %q" : GoString))) : GoString)), Go.toInterface(_e), Go.toInterface(_want));
            };
        };
    }
function testZeroTimerResetPanics(_t:stdgo.testing.Testing.T):Void {
        var __recover_exception__:AnyInterface = null;
        var __deferstack__:Array<Void -> Void> = [];
        try {
            {
                var _a0 = _t;
                __deferstack__.unshift(() -> _checkZeroPanicString(_a0));
            };
            var _tr:Timer = (({  } : Timer));
            _tr.reset(((1 : Duration)));
            for (defer in __deferstack__) {
                defer();
            };
            {
                for (defer in __deferstack__) {
                    defer();
                };
                if (__recover_exception__ != null) throw __recover_exception__;
                return;
            };
        } catch(__exception__) {
            if (!(__exception__.native is AnyInterfaceData)) throw __exception__;
            __recover_exception__ = __exception__.native;
            for (defer in __deferstack__) {
                defer();
            };
            if (__recover_exception__ != null) throw __recover_exception__;
            return;
        };
    }
function testZeroTimerStopPanics(_t:stdgo.testing.Testing.T):Void {
        var __recover_exception__:AnyInterface = null;
        var __deferstack__:Array<Void -> Void> = [];
        try {
            {
                var _a0 = _t;
                __deferstack__.unshift(() -> _checkZeroPanicString(_a0));
            };
            var _tr:Timer = (({  } : Timer));
            _tr.stop();
            for (defer in __deferstack__) {
                defer();
            };
            {
                for (defer in __deferstack__) {
                    defer();
                };
                if (__recover_exception__ != null) throw __recover_exception__;
                return;
            };
        } catch(__exception__) {
            if (!(__exception__.native is AnyInterfaceData)) throw __exception__;
            __recover_exception__ = __exception__.native;
            for (defer in __deferstack__) {
                defer();
            };
            if (__recover_exception__ != null) throw __recover_exception__;
            return;
        };
    }
/**
    // Test that zero duration timers aren't missed by the scheduler. Regression test for issue 44868.
**/
function testZeroTimer(_t:stdgo.testing.Testing.T):Void {
        if (stdgo.testing.Testing.short()) {
            _t.skip(Go.toInterface(((((("-short" : GoString))) : GoString))));
        };
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < ((1000000 : GoInt)), _i++, {
                var _s:Time = (now() == null ? null : now().__copy__());
                var _ti = newTimer(((0 : Duration)));
                _ti.c.__get__();
                {
                    var _diff:Duration = since((_s == null ? null : _s.__copy__()));
                    if (_diff > ((2000000000 : Duration))) {
                        _t.errorf(((((("Expected time to get value from Timer channel in less than 2 sec, took %v" : GoString))) : GoString)), Go.toInterface({
                            final __self__ = new Duration_wrapper(_diff);
                            __self__.abs = #if !macro function():Duration return _diff.abs() #else null #end;
                            __self__.hours = #if !macro function():GoFloat64 return _diff.hours() #else null #end;
                            __self__.microseconds = #if !macro function():GoInt64 return _diff.microseconds() #else null #end;
                            __self__.milliseconds = #if !macro function():GoInt64 return _diff.milliseconds() #else null #end;
                            __self__.minutes = #if !macro function():GoFloat64 return _diff.minutes() #else null #end;
                            __self__.nanoseconds = #if !macro function():GoInt64 return _diff.nanoseconds() #else null #end;
                            __self__.round = #if !macro function(_d:Duration):Duration return _diff.round(_d) #else null #end;
                            __self__.seconds = #if !macro function():GoFloat64 return _diff.seconds() #else null #end;
                            __self__.string = #if !macro function():GoString return _diff.string() #else null #end;
                            __self__.truncate = #if !macro function(_d:Duration):Duration return _diff.truncate(_d) #else null #end;
                            __self__;
                        }));
                    };
                };
            });
        };
    }
/**
    // Test that rapidly moving a timer earlier doesn't cause it to get dropped.
    // Issue 47329.
**/
function testTimerModifiedEarlier(_t:stdgo.testing.Testing.T):Void {
        var __recover_exception__:AnyInterface = null;
        var __deferstack__:Array<Void -> Void> = [];
        try {
            if (false) {
                stdgo.internal.testenv.Testenv.skipFlaky({
                    final __self__ = new stdgo.testing.Testing.T_wrapper(_t);
                    __self__.cleanup = #if !macro function(_f:() -> Void):Void _t.cleanup(_f) #else null #end;
                    __self__.deadline = #if !macro function():{ var _0 : Time; var _1 : Bool; } return _t.deadline() #else null #end;
                    __self__.error = #if !macro function(_args:Slice<AnyInterface>):Void _t.error(_args) #else null #end;
                    __self__.errorf = #if !macro function(_m:GoString, _args:Slice<AnyInterface>):Void _t.errorf(_m, _args) #else null #end;
                    __self__.fail = #if !macro function():Void _t.fail() #else null #end;
                    __self__.failNow = #if !macro function():Void _t.failNow() #else null #end;
                    __self__.failed = #if !macro function():Bool return _t.failed() #else null #end;
                    __self__.fatal = #if !macro function(_args:Slice<AnyInterface>):Void _t.fatal(_args) #else null #end;
                    __self__.fatalf = #if !macro function(_m:GoString, _args:Slice<AnyInterface>):Void _t.fatalf(_m, _args) #else null #end;
                    __self__.helper = #if !macro function():Void _t.helper() #else null #end;
                    __self__.log = #if !macro function(_args:Slice<AnyInterface>):Void _t.log(_args) #else null #end;
                    __self__.logf = #if !macro function(_m:GoString, _args:Slice<AnyInterface>):Void _t.logf(_m, _args) #else null #end;
                    __self__.name = #if !macro function():GoString return _t.name() #else null #end;
                    __self__.parallel = #if !macro function():Void _t.parallel() #else null #end;
                    __self__.run = #if !macro function(_name:GoString, _f:Ref<stdgo.testing.Testing.T> -> Void):Bool return _t.run(_name, _f) #else null #end;
                    __self__.setenv = #if !macro function(_name:GoString, _source:GoString):Void _t.setenv(_name, _source) #else null #end;
                    __self__.skip = #if !macro function(_args:Slice<AnyInterface>):Void _t.skip(_args) #else null #end;
                    __self__.skipNow = #if !macro function():Void _t.skipNow() #else null #end;
                    __self__.skipf = #if !macro function(_m:GoString, _args:Slice<AnyInterface>):Void _t.skipf(_m, _args) #else null #end;
                    __self__.skipped = #if !macro function():Bool return _t.skipped() #else null #end;
                    __self__.tempDir = #if !macro function():GoString return _t.tempDir() #else null #end;
                    __self__._checkFuzzFn = #if !macro function(__0:GoString):Void _t._checkFuzzFn(__0) #else null #end;
                    __self__._decorate = #if !macro function(_name:GoString, _offset:GoInt):GoString return _t._decorate(_name, _offset) #else null #end;
                    __self__._flushToParent = #if !macro function(_testName:GoString, _format:GoString, _args:Slice<AnyInterface>):Void _t._flushToParent(_testName, _format, _args) #else null #end;
                    __self__._frameSkip = #if !macro function(__0:GoInt):stdgo.runtime.Runtime.Frame return _t._frameSkip(__0) #else null #end;
                    __self__._log = #if !macro function(__0:GoString):Void _t._log(__0) #else null #end;
                    __self__._logDepth = #if !macro function(_name:GoString, _offset:GoInt):Void _t._logDepth(_name, _offset) #else null #end;
                    __self__._private = #if !macro function():Void _t._private() #else null #end;
                    __self__._report = #if !macro function():Void _t._report() #else null #end;
                    __self__._runCleanup = #if !macro function(_ph:stdgo.testing.Testing.T_panicHandling):AnyInterface return _t._runCleanup(_ph) #else null #end;
                    __self__._setRan = #if !macro function():Void _t._setRan() #else null #end;
                    __self__;
                }, ((50470 : GoInt)));
            };
            var _past:Duration = until((unix(((0 : GoInt64)), ((0 : GoInt64))) == null ? null : unix(((0 : GoInt64)), ((0 : GoInt64))).__copy__()));
            var _count:GoInt = ((1000 : GoInt));
            var _fail:GoInt = ((0 : GoInt));
            {
                var _i:GoInt = ((0 : GoInt));
                Go.cfor(_i < _count, _i++, {
                    var _timer = newTimer((("3600000000000" : Duration)));
                    {
                        var _j:GoInt = ((0 : GoInt));
                        Go.cfor(_j < ((10 : GoInt)), _j++, {
                            if (!_timer.stop()) {
                                _timer.c.__get__();
                            };
                            _timer.reset(_past);
                        });
                    };
                    var _deadline = newTimer((("10000000000" : Duration)));
                    __deferstack__.unshift(() -> _deadline.stop());
                    var _now:Time = (now() == null ? null : now().__copy__());
                    Go.select([_deadline.c.__get__() => {
                        _t.error(Go.toInterface(((((("deadline expired" : GoString))) : GoString))));
                    }, _timer.c.__get__() => {
                        {
                            var _since:Duration = since((_now == null ? null : _now.__copy__()));
                            if (_since > (("8000000000" : Duration))) {
                                _t.errorf(((((("timer took too long (%v)" : GoString))) : GoString)), Go.toInterface({
                                    final __self__ = new Duration_wrapper(_since);
                                    __self__.abs = #if !macro function():Duration return _since.abs() #else null #end;
                                    __self__.hours = #if !macro function():GoFloat64 return _since.hours() #else null #end;
                                    __self__.microseconds = #if !macro function():GoInt64 return _since.microseconds() #else null #end;
                                    __self__.milliseconds = #if !macro function():GoInt64 return _since.milliseconds() #else null #end;
                                    __self__.minutes = #if !macro function():GoFloat64 return _since.minutes() #else null #end;
                                    __self__.nanoseconds = #if !macro function():GoInt64 return _since.nanoseconds() #else null #end;
                                    __self__.round = #if !macro function(_d:Duration):Duration return _since.round(_d) #else null #end;
                                    __self__.seconds = #if !macro function():GoFloat64 return _since.seconds() #else null #end;
                                    __self__.string = #if !macro function():GoString return _since.string() #else null #end;
                                    __self__.truncate = #if !macro function(_d:Duration):Duration return _since.truncate(_d) #else null #end;
                                    __self__;
                                }));
                                _fail++;
                            };
                        };
                    }]);
                });
            };
            if (_fail > ((0 : GoInt))) {
                _t.errorf(((((("%d failures" : GoString))) : GoString)), Go.toInterface(_fail));
            };
            for (defer in __deferstack__) {
                defer();
            };
            {
                for (defer in __deferstack__) {
                    defer();
                };
                if (__recover_exception__ != null) throw __recover_exception__;
                return;
            };
        } catch(__exception__) {
            if (!(__exception__.native is AnyInterfaceData)) throw __exception__;
            __recover_exception__ = __exception__.native;
            for (defer in __deferstack__) {
                defer();
            };
            if (__recover_exception__ != null) throw __recover_exception__;
            return;
        };
    }
/**
    // Test that rapidly moving timers earlier and later doesn't cause
    // some of the sleep times to be lost.
    // Issue 47762
**/
function testAdjustTimers(_t:stdgo.testing.Testing.T):Void {
        var _rnd:Ref<stdgo.math.rand.Rand.Rand> = stdgo.math.rand.Rand.new_(stdgo.math.rand.Rand.newSource(now().unixNano()));
        var _timers = new Slice<Ref<Timer>>(...[for (i in 0 ... ((((100 : GoInt)) : GoInt)).toBasic()) ((null : Timer))]);
        var _states = new Slice<GoInt>(...[for (i in 0 ... (((_timers != null ? _timers.length : ((0 : GoInt))) : GoInt)).toBasic()) ((0 : GoInt))]);
        var _indices = _rnd.perm((_timers != null ? _timers.length : ((0 : GoInt))));
        while ((_indices != null ? _indices.length : ((0 : GoInt))) != ((0 : GoInt))) {
            var _ii:GoInt = _rnd.intn((_indices != null ? _indices.length : ((0 : GoInt))));
            var _i:GoInt = (_indices != null ? _indices[_ii] : ((0 : GoInt)));
            var _timer:Ref<Timer> = (_timers != null ? _timers[_i] : ((null : Timer)));
            var _state:GoInt = (_states != null ? _states[_i] : ((0 : GoInt)));
            if (_states != null) _states[_i]++;
            if (_state == ((0 : GoInt))) {
                if (_timers != null) _timers[_i] = newTimer(((0 : Duration)));
            } else if (_state == ((1 : GoInt))) {
                _timer.c.__get__();
            } else if (_state == ((2 : GoInt))) {
                if (_timer.reset((("60000000000" : Duration)))) {
                    throw Go.toInterface(((((("shouldn\'t be active (1)" : GoString))) : GoString)));
                };
            } else if (_state == ((4 : GoInt))) {
                if (_timer.reset((("180000000000" : Duration)))) {
                    throw Go.toInterface(((((("shouldn\'t be active (3)" : GoString))) : GoString)));
                };
            } else if (_state == ((6 : GoInt))) {
                if (_timer.reset((("120000000000" : Duration)))) {
                    throw Go.toInterface(((((("shouldn\'t be active (2)" : GoString))) : GoString)));
                };
            } else if (_state == ((3 : GoInt)) || _state == ((5 : GoInt)) || _state == ((7 : GoInt))) {
                if (!_timer.stop()) {
                    _t.logf(((((("timer %d state %d Stop returned false" : GoString))) : GoString)), Go.toInterface(_i), Go.toInterface(_state));
                    _timer.c.__get__();
                };
            } else if (_state == ((8 : GoInt))) {
                if (_timer.reset(((0 : Duration)))) {
                    _t.fatal(Go.toInterface(((((("timer.Reset returned true" : GoString))) : GoString))));
                };
            } else if (_state == ((9 : GoInt))) {
                var _now:Time = (now() == null ? null : now().__copy__());
                _timer.c.__get__();
                var _dur:Duration = since((_now == null ? null : _now.__copy__()));
                if (_dur > ((750000000 : Duration))) {
                    _t.errorf(((((("timer %d took %v to complete" : GoString))) : GoString)), Go.toInterface(_i), Go.toInterface({
                        final __self__ = new Duration_wrapper(_dur);
                        __self__.abs = #if !macro function():Duration return _dur.abs() #else null #end;
                        __self__.hours = #if !macro function():GoFloat64 return _dur.hours() #else null #end;
                        __self__.microseconds = #if !macro function():GoInt64 return _dur.microseconds() #else null #end;
                        __self__.milliseconds = #if !macro function():GoInt64 return _dur.milliseconds() #else null #end;
                        __self__.minutes = #if !macro function():GoFloat64 return _dur.minutes() #else null #end;
                        __self__.nanoseconds = #if !macro function():GoInt64 return _dur.nanoseconds() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Duration return _dur.round(_d) #else null #end;
                        __self__.seconds = #if !macro function():GoFloat64 return _dur.seconds() #else null #end;
                        __self__.string = #if !macro function():GoString return _dur.string() #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Duration return _dur.truncate(_d) #else null #end;
                        __self__;
                    }));
                };
            } else if (_state == ((10 : GoInt))) {
                if (_indices != null) _indices[_ii] = (_indices != null ? _indices[(_indices != null ? _indices.length : ((0 : GoInt))) - ((1 : GoInt))] : ((0 : GoInt)));
                _indices = ((_indices.__slice__(0, (_indices != null ? _indices.length : ((0 : GoInt))) - ((1 : GoInt))) : Slice<GoInt>));
            };
        };
    }
/**
    // Benchmark timer latency when the thread that creates the timer is busy with
    // other work and the timers must be serviced by other threads.
    // https://golang.org/issue/38860
**/
function benchmarkParallelTimerLatency(_b:stdgo.testing.Testing.B):Void {
        var _gmp:GoInt = stdgo.runtime.Runtime.gomaxprocs(((0 : GoInt)));
        if ((_gmp < ((2 : GoInt))) || (stdgo.runtime.Runtime.numCPU() < _gmp)) {
            _b.skip(Go.toInterface(((((("skipping with GOMAXPROCS < 2 or NumCPU < GOMAXPROCS" : GoString))) : GoString))));
        };
        var _timerCount:GoInt = _gmp - ((1 : GoInt));
        var _stats = new Slice<T__struct_7>(...[for (i in 0 ... ((_timerCount : GoInt)).toBasic()) (({ _sum : ((0 : GoFloat64)), _max : ((((0 : GoInt64)) : Duration)), _count : ((0 : GoInt64)), _0 : new GoArray<GoInt64>(...[for (i in 0 ... 5) ((0 : GoInt64))]) } : T__struct_7))]);
        _warmupScheduler(_gmp);
        _doWork(((30000000 : Duration)));
        _b.resetTimer();
        {};
        var _wg:stdgo.sync.Sync.WaitGroup = (({  } : stdgo.sync.Sync.WaitGroup));
        var _count:GoInt32 = ((0 : GoInt32));
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < _b.n, _i++, {
                _wg.add(_timerCount);
                stdgo.sync.atomic.Atomic.storeInt32(Go.pointer(_count), ((0 : GoInt32)));
                {
                    var _j:GoInt = ((0 : GoInt));
                    Go.cfor(_j < _timerCount, _j++, {
                        var _j:GoInt = _j;
                        var _expectedWakeup:Time = (now().add(((1000000 : Duration))) == null ? null : now().add(((1000000 : Duration))).__copy__());
                        afterFunc(((1000000 : Duration)), function():Void {
                            var _late:Duration = since((_expectedWakeup == null ? null : _expectedWakeup.__copy__()));
                            if (_late < ((0 : Duration))) {
                                _late = ((0 : Duration));
                            };
                            (_stats != null ? _stats[_j] : (({ _sum : ((0 : GoFloat64)), _max : ((((0 : GoInt64)) : Duration)), _count : ((0 : GoInt64)), _0 : new GoArray<GoInt64>(...[for (i in 0 ... 5) ((0 : GoInt64))]) } : T__struct_7)))._count++;
                            (_stats != null ? _stats[_j] : (({ _sum : ((0 : GoFloat64)), _max : ((((0 : GoInt64)) : Duration)), _count : ((0 : GoInt64)), _4 : new GoArray<GoInt64>(...[for (i in 0 ... 5) ((0 : GoInt64))]) } : T__struct_7)))._sum = (_stats != null ? _stats[_j] : (({ _sum : ((0 : GoFloat64)), _max : ((((0 : GoInt64)) : Duration)), _count : ((0 : GoInt64)), _2 : new GoArray<GoInt64>(...[for (i in 0 ... 5) ((0 : GoInt64))]) } : T__struct_7)))._sum + (((_late.nanoseconds() : GoFloat64)));
                            if (_late > (_stats != null ? _stats[_j] : (({ _sum : ((0 : GoFloat64)), _max : ((((0 : GoInt64)) : Duration)), _count : ((0 : GoInt64)), _6 : new GoArray<GoInt64>(...[for (i in 0 ... 5) ((0 : GoInt64))]) } : T__struct_7)))._max) {
                                (_stats != null ? _stats[_j] : (({ _sum : ((0 : GoFloat64)), _max : ((((0 : GoInt64)) : Duration)), _count : ((0 : GoInt64)), _8 : new GoArray<GoInt64>(...[for (i in 0 ... 5) ((0 : GoInt64))]) } : T__struct_7)))._max = _late;
                            };
                            stdgo.sync.atomic.Atomic.addInt32(Go.pointer(_count), ((1 : GoInt32)));
                            while (stdgo.sync.atomic.Atomic.loadInt32(Go.pointer(_count)) < ((_timerCount : GoInt32))) {};
                            _wg.done();
                        });
                    });
                };
                while (stdgo.sync.atomic.Atomic.loadInt32(Go.pointer(_count)) < ((_timerCount : GoInt32))) {};
                _wg.wait_();
                _doWork(((1000000 : Duration)));
            });
        };
        var _total:GoFloat64 = ((0 : GoFloat64));
        var _samples:GoFloat64 = ((0 : GoFloat64));
        var _max:Duration = ((((0 : Duration)) : Duration));
        for (_1 => _s in _stats) {
            if (_s._max > _max) {
                _max = _s._max;
            };
            _total = _total + (_s._sum);
            _samples = _samples + (((_s._count : GoFloat64)));
        };
        _b.reportMetric(((0 : GoFloat64)), ((((("ns/op" : GoString))) : GoString)));
        _b.reportMetric(_total / _samples, ((((("avg-late-ns" : GoString))) : GoString)));
        _b.reportMetric(((_max.nanoseconds() : GoFloat64)), ((((("max-late-ns" : GoString))) : GoString)));
    }
/**
    // Benchmark timer latency with staggered wakeup times and varying CPU bound
    // workloads. https://golang.org/issue/38860
**/
function benchmarkStaggeredTickerLatency(_b:stdgo.testing.Testing.B):Void {
        var _gmp:GoInt = stdgo.runtime.Runtime.gomaxprocs(((0 : GoInt)));
        if ((_gmp < ((2 : GoInt))) || (stdgo.runtime.Runtime.numCPU() < _gmp)) {
            _b.skip(Go.toInterface(((((("skipping with GOMAXPROCS < 2 or NumCPU < GOMAXPROCS" : GoString))) : GoString))));
        };
        {};
        for (_0 => _dur in ((new Slice<Duration>(((300000 : Duration)), ((2000000 : Duration))) : Slice<Duration>))) {
            _b.run(stdgo.fmt.Fmt.sprintf(((((("work-dur=%s" : GoString))) : GoString)), Go.toInterface({
                final __self__ = new Duration_wrapper(_dur);
                __self__.abs = #if !macro function():Duration return _dur.abs() #else null #end;
                __self__.hours = #if !macro function():GoFloat64 return _dur.hours() #else null #end;
                __self__.microseconds = #if !macro function():GoInt64 return _dur.microseconds() #else null #end;
                __self__.milliseconds = #if !macro function():GoInt64 return _dur.milliseconds() #else null #end;
                __self__.minutes = #if !macro function():GoFloat64 return _dur.minutes() #else null #end;
                __self__.nanoseconds = #if !macro function():GoInt64 return _dur.nanoseconds() #else null #end;
                __self__.round = #if !macro function(_d:Duration):Duration return _dur.round(_d) #else null #end;
                __self__.seconds = #if !macro function():GoFloat64 return _dur.seconds() #else null #end;
                __self__.string = #if !macro function():GoString return _dur.string() #else null #end;
                __self__.truncate = #if !macro function(_d:Duration):Duration return _dur.truncate(_d) #else null #end;
                __self__;
            })), function(_b:stdgo.testing.Testing.B):Void {
                {
                    var _tickersPerP:GoInt = ((1 : GoInt));
                    Go.cfor(_tickersPerP < ((((((3000000 : Duration)) / _dur) : GoInt)) + ((1 : GoInt))), _tickersPerP++, {
                        var _tickerCount:GoInt = _gmp * _tickersPerP;
                        _b.run(stdgo.fmt.Fmt.sprintf(((((("tickers-per-P=%d" : GoString))) : GoString)), Go.toInterface(_tickersPerP)), function(_b:stdgo.testing.Testing.B):Void {
                            var _stats = new Slice<T__struct_7>(...[for (i in 0 ... ((_tickerCount : GoInt)).toBasic()) (({ _sum : ((0 : GoFloat64)), _max : ((((0 : GoInt64)) : Duration)), _count : ((0 : GoInt64)), _0 : new GoArray<GoInt64>(...[for (i in 0 ... 5) ((0 : GoInt64))]) } : T__struct_7))]);
                            _warmupScheduler(_gmp);
                            _b.resetTimer();
                            var _wg:stdgo.sync.Sync.WaitGroup = (({  } : stdgo.sync.Sync.WaitGroup));
                            _wg.add(_tickerCount);
                            {
                                var _j:GoInt = ((0 : GoInt));
                                Go.cfor(_j < _tickerCount, _j++, {
                                    var _j:GoInt = _j;
                                    _doWork(((3000000 : Duration)) / ((_gmp : Duration)));
                                    var _expectedWakeup:Time = (now().add(((3000000 : Duration))) == null ? null : now().add(((3000000 : Duration))).__copy__());
                                    var _ticker = newTicker(((3000000 : Duration)));
                                    Go.routine(() -> {
                                        var a = function(_c:GoInt, _ticker:Ticker, _firstWake:Time):Void {
                                            var __recover_exception__:AnyInterface = null;
                                            var __deferstack__:Array<Void -> Void> = [];
                                            try {
                                                __deferstack__.unshift(() -> _ticker.stop());
                                                Go.cfor(_c > ((0 : GoInt)), _c--, {
                                                    _ticker.c.__get__();
                                                    var _late:Duration = since((_expectedWakeup == null ? null : _expectedWakeup.__copy__()));
                                                    if (_late < ((0 : Duration))) {
                                                        _late = ((0 : Duration));
                                                    };
                                                    (_stats != null ? _stats[_j] : (({ _sum : ((0 : GoFloat64)), _max : ((((0 : GoInt64)) : Duration)), _count : ((0 : GoInt64)), _0 : new GoArray<GoInt64>(...[for (i in 0 ... 5) ((0 : GoInt64))]) } : T__struct_7)))._count++;
                                                    (_stats != null ? _stats[_j] : (({ _sum : ((0 : GoFloat64)), _max : ((((0 : GoInt64)) : Duration)), _count : ((0 : GoInt64)), _4 : new GoArray<GoInt64>(...[for (i in 0 ... 5) ((0 : GoInt64))]) } : T__struct_7)))._sum = (_stats != null ? _stats[_j] : (({ _sum : ((0 : GoFloat64)), _max : ((((0 : GoInt64)) : Duration)), _count : ((0 : GoInt64)), _2 : new GoArray<GoInt64>(...[for (i in 0 ... 5) ((0 : GoInt64))]) } : T__struct_7)))._sum + (((_late.nanoseconds() : GoFloat64)));
                                                    if (_late > (_stats != null ? _stats[_j] : (({ _sum : ((0 : GoFloat64)), _max : ((((0 : GoInt64)) : Duration)), _count : ((0 : GoInt64)), _6 : new GoArray<GoInt64>(...[for (i in 0 ... 5) ((0 : GoInt64))]) } : T__struct_7)))._max) {
                                                        (_stats != null ? _stats[_j] : (({ _sum : ((0 : GoFloat64)), _max : ((((0 : GoInt64)) : Duration)), _count : ((0 : GoInt64)), _8 : new GoArray<GoInt64>(...[for (i in 0 ... 5) ((0 : GoInt64))]) } : T__struct_7)))._max = _late;
                                                    };
                                                    _expectedWakeup = (_expectedWakeup.add(((3000000 : Duration))) == null ? null : _expectedWakeup.add(((3000000 : Duration))).__copy__());
                                                    _doWork(_dur);
                                                });
                                                _wg.done();
                                                for (defer in __deferstack__) {
                                                    defer();
                                                };
                                                {
                                                    for (defer in __deferstack__) {
                                                        defer();
                                                    };
                                                    if (__recover_exception__ != null) throw __recover_exception__;
                                                    return;
                                                };
                                            } catch(__exception__) {
                                                if (!(__exception__.native is AnyInterfaceData)) throw __exception__;
                                                __recover_exception__ = __exception__.native;
                                                for (defer in __deferstack__) {
                                                    defer();
                                                };
                                                if (__recover_exception__ != null) throw __recover_exception__;
                                                return;
                                            };
                                        };
                                        a(_b.n, _ticker, (_expectedWakeup == null ? null : _expectedWakeup.__copy__()));
                                    });
                                });
                            };
                            _wg.wait_();
                            var _total:GoFloat64 = ((0 : GoFloat64));
                            var _samples:GoFloat64 = ((0 : GoFloat64));
                            var _max:Duration = ((((0 : Duration)) : Duration));
                            for (_1 => _s in _stats) {
                                if (_s._max > _max) {
                                    _max = _s._max;
                                };
                                _total = _total + (_s._sum);
                                _samples = _samples + (((_s._count : GoFloat64)));
                            };
                            _b.reportMetric(((0 : GoFloat64)), ((((("ns/op" : GoString))) : GoString)));
                            _b.reportMetric(_total / _samples, ((((("avg-late-ns" : GoString))) : GoString)));
                            _b.reportMetric(((_max.nanoseconds() : GoFloat64)), ((((("max-late-ns" : GoString))) : GoString)));
                        });
                    });
                };
            });
        };
    }
/**
    // warmupScheduler ensures the scheduler has at least targetThreadCount threads
    // in its thread pool.
**/
function _warmupScheduler(_targetThreadCount:GoInt):Void {
        var _wg:stdgo.sync.Sync.WaitGroup = (({  } : stdgo.sync.Sync.WaitGroup));
        var _count:GoInt32 = ((0 : GoInt32));
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < _targetThreadCount, _i++, {
                _wg.add(((1 : GoInt)));
                Go.routine(() -> {
                    var a = function():Void {
                        stdgo.sync.atomic.Atomic.addInt32(Go.pointer(_count), ((1 : GoInt32)));
                        while (stdgo.sync.atomic.Atomic.loadInt32(Go.pointer(_count)) < ((_targetThreadCount : GoInt32))) {};
                        _doWork(((1000000 : Duration)));
                        _wg.done();
                    };
                    a();
                });
            });
        };
        _wg.wait_();
    }
function _doWork(_dur:Duration):Void {
        var _start:Time = (now() == null ? null : now().__copy__());
        while (since((_start == null ? null : _start.__copy__())) < _dur) {};
    }
function testTicker(_t:stdgo.testing.Testing.T):Void {
        var _baseCount:GoInt = ((10 : GoInt));
        var _baseDelta:Duration = ((20000000 : Duration));
        if (false) {
            _baseCount = ((6 : GoInt));
            _baseDelta = ((100000000 : Duration));
        };
        var _errs:Slice<GoString> = ((null : Slice<GoString>));
        var _logErrs:() -> Void = function():Void {
            for (_0 => _e in _errs) {
                _t.log(Go.toInterface(_e));
            };
        };
        for (_0 => _test in ((new Slice<T__struct_8>((({ _count : ((0 : GoInt)), _delta : ((((0 : GoInt64)) : Duration)) } : T__struct_8)), (({ _count : ((0 : GoInt)), _delta : ((((0 : GoInt64)) : Duration)) } : T__struct_8))) : Slice<T__struct_8>))) {
            var _count:GoInt = _test._count, _delta:Duration = _test._delta;
            var _ticker = newTicker(_delta);
            var _t0:Time = (now() == null ? null : now().__copy__());
            {
                var _i:GoInt = ((0 : GoInt));
                Go.cfor(_i < (_count / ((2 : GoInt))), _i++, {
                    _ticker.c.__get__();
                });
            };
            _ticker.reset(_delta * ((2 : Duration)));
            {
                var _i:GoInt = _count / ((2 : GoInt));
                Go.cfor(_i < _count, _i++, {
                    _ticker.c.__get__();
                });
            };
            _ticker.stop();
            var _t1:Time = (now() == null ? null : now().__copy__());
            var _dt:Duration = _t1.sub((_t0 == null ? null : _t0.__copy__()));
            var _target:Duration = (((3 : Duration)) * _delta) * (((_count / ((2 : GoInt))) : Duration));
            var _slop:Duration = (_target * ((3 : Duration))) / ((10 : Duration));
            if ((_dt < (_target - _slop)) || (_dt > (_target + _slop))) {
                _errs = (_errs != null ? _errs.__append__(stdgo.fmt.Fmt.sprintf(((((("%d %s ticks then %d %s ticks took %s, expected [%s,%s]" : GoString))) : GoString)), Go.toInterface(_count / ((2 : GoInt))), Go.toInterface({
                    final __self__ = new Duration_wrapper(_delta);
                    __self__.abs = #if !macro function():Duration return _delta.abs() #else null #end;
                    __self__.hours = #if !macro function():GoFloat64 return _delta.hours() #else null #end;
                    __self__.microseconds = #if !macro function():GoInt64 return _delta.microseconds() #else null #end;
                    __self__.milliseconds = #if !macro function():GoInt64 return _delta.milliseconds() #else null #end;
                    __self__.minutes = #if !macro function():GoFloat64 return _delta.minutes() #else null #end;
                    __self__.nanoseconds = #if !macro function():GoInt64 return _delta.nanoseconds() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Duration return _delta.round(_d) #else null #end;
                    __self__.seconds = #if !macro function():GoFloat64 return _delta.seconds() #else null #end;
                    __self__.string = #if !macro function():GoString return _delta.string() #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Duration return _delta.truncate(_d) #else null #end;
                    __self__;
                }), Go.toInterface(_count / ((2 : GoInt))), Go.toInterface({
                    final __self__ = new Duration_wrapper(_delta * ((2 : Duration)));
                    __self__.abs = #if !macro function():Duration return _delta * ((2 : Duration)).abs() #else null #end;
                    __self__.hours = #if !macro function():GoFloat64 return _delta * ((2 : Duration)).hours() #else null #end;
                    __self__.microseconds = #if !macro function():GoInt64 return _delta * ((2 : Duration)).microseconds() #else null #end;
                    __self__.milliseconds = #if !macro function():GoInt64 return _delta * ((2 : Duration)).milliseconds() #else null #end;
                    __self__.minutes = #if !macro function():GoFloat64 return _delta * ((2 : Duration)).minutes() #else null #end;
                    __self__.nanoseconds = #if !macro function():GoInt64 return _delta * ((2 : Duration)).nanoseconds() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Duration return _delta * ((2 : Duration)).round(_d) #else null #end;
                    __self__.seconds = #if !macro function():GoFloat64 return _delta * ((2 : Duration)).seconds() #else null #end;
                    __self__.string = #if !macro function():GoString return _delta * ((2 : Duration)).string() #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Duration return _delta * ((2 : Duration)).truncate(_d) #else null #end;
                    __self__;
                }), Go.toInterface({
                    final __self__ = new Duration_wrapper(_dt);
                    __self__.abs = #if !macro function():Duration return _dt.abs() #else null #end;
                    __self__.hours = #if !macro function():GoFloat64 return _dt.hours() #else null #end;
                    __self__.microseconds = #if !macro function():GoInt64 return _dt.microseconds() #else null #end;
                    __self__.milliseconds = #if !macro function():GoInt64 return _dt.milliseconds() #else null #end;
                    __self__.minutes = #if !macro function():GoFloat64 return _dt.minutes() #else null #end;
                    __self__.nanoseconds = #if !macro function():GoInt64 return _dt.nanoseconds() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Duration return _dt.round(_d) #else null #end;
                    __self__.seconds = #if !macro function():GoFloat64 return _dt.seconds() #else null #end;
                    __self__.string = #if !macro function():GoString return _dt.string() #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Duration return _dt.truncate(_d) #else null #end;
                    __self__;
                }), Go.toInterface({
                    final __self__ = new Duration_wrapper(_target - _slop);
                    __self__.abs = #if !macro function():Duration return _target - _slop.abs() #else null #end;
                    __self__.hours = #if !macro function():GoFloat64 return _target - _slop.hours() #else null #end;
                    __self__.microseconds = #if !macro function():GoInt64 return _target - _slop.microseconds() #else null #end;
                    __self__.milliseconds = #if !macro function():GoInt64 return _target - _slop.milliseconds() #else null #end;
                    __self__.minutes = #if !macro function():GoFloat64 return _target - _slop.minutes() #else null #end;
                    __self__.nanoseconds = #if !macro function():GoInt64 return _target - _slop.nanoseconds() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Duration return _target - _slop.round(_d) #else null #end;
                    __self__.seconds = #if !macro function():GoFloat64 return _target - _slop.seconds() #else null #end;
                    __self__.string = #if !macro function():GoString return _target - _slop.string() #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Duration return _target - _slop.truncate(_d) #else null #end;
                    __self__;
                }), Go.toInterface({
                    final __self__ = new Duration_wrapper(_target + _slop);
                    __self__.abs = #if !macro function():Duration return _target + _slop.abs() #else null #end;
                    __self__.hours = #if !macro function():GoFloat64 return _target + _slop.hours() #else null #end;
                    __self__.microseconds = #if !macro function():GoInt64 return _target + _slop.microseconds() #else null #end;
                    __self__.milliseconds = #if !macro function():GoInt64 return _target + _slop.milliseconds() #else null #end;
                    __self__.minutes = #if !macro function():GoFloat64 return _target + _slop.minutes() #else null #end;
                    __self__.nanoseconds = #if !macro function():GoInt64 return _target + _slop.nanoseconds() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Duration return _target + _slop.round(_d) #else null #end;
                    __self__.seconds = #if !macro function():GoFloat64 return _target + _slop.seconds() #else null #end;
                    __self__.string = #if !macro function():GoString return _target + _slop.string() #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Duration return _target + _slop.truncate(_d) #else null #end;
                    __self__;
                }))) : new Slice<GoString>(stdgo.fmt.Fmt.sprintf(((((("%d %s ticks then %d %s ticks took %s, expected [%s,%s]" : GoString))) : GoString)), Go.toInterface(_count / ((2 : GoInt))), Go.toInterface({
                    final __self__ = new Duration_wrapper(_delta);
                    __self__.abs = #if !macro function():Duration return _delta.abs() #else null #end;
                    __self__.hours = #if !macro function():GoFloat64 return _delta.hours() #else null #end;
                    __self__.microseconds = #if !macro function():GoInt64 return _delta.microseconds() #else null #end;
                    __self__.milliseconds = #if !macro function():GoInt64 return _delta.milliseconds() #else null #end;
                    __self__.minutes = #if !macro function():GoFloat64 return _delta.minutes() #else null #end;
                    __self__.nanoseconds = #if !macro function():GoInt64 return _delta.nanoseconds() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Duration return _delta.round(_d) #else null #end;
                    __self__.seconds = #if !macro function():GoFloat64 return _delta.seconds() #else null #end;
                    __self__.string = #if !macro function():GoString return _delta.string() #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Duration return _delta.truncate(_d) #else null #end;
                    __self__;
                }), Go.toInterface(_count / ((2 : GoInt))), Go.toInterface({
                    final __self__ = new Duration_wrapper(_delta * ((2 : Duration)));
                    __self__.abs = #if !macro function():Duration return _delta * ((2 : Duration)).abs() #else null #end;
                    __self__.hours = #if !macro function():GoFloat64 return _delta * ((2 : Duration)).hours() #else null #end;
                    __self__.microseconds = #if !macro function():GoInt64 return _delta * ((2 : Duration)).microseconds() #else null #end;
                    __self__.milliseconds = #if !macro function():GoInt64 return _delta * ((2 : Duration)).milliseconds() #else null #end;
                    __self__.minutes = #if !macro function():GoFloat64 return _delta * ((2 : Duration)).minutes() #else null #end;
                    __self__.nanoseconds = #if !macro function():GoInt64 return _delta * ((2 : Duration)).nanoseconds() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Duration return _delta * ((2 : Duration)).round(_d) #else null #end;
                    __self__.seconds = #if !macro function():GoFloat64 return _delta * ((2 : Duration)).seconds() #else null #end;
                    __self__.string = #if !macro function():GoString return _delta * ((2 : Duration)).string() #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Duration return _delta * ((2 : Duration)).truncate(_d) #else null #end;
                    __self__;
                }), Go.toInterface({
                    final __self__ = new Duration_wrapper(_dt);
                    __self__.abs = #if !macro function():Duration return _dt.abs() #else null #end;
                    __self__.hours = #if !macro function():GoFloat64 return _dt.hours() #else null #end;
                    __self__.microseconds = #if !macro function():GoInt64 return _dt.microseconds() #else null #end;
                    __self__.milliseconds = #if !macro function():GoInt64 return _dt.milliseconds() #else null #end;
                    __self__.minutes = #if !macro function():GoFloat64 return _dt.minutes() #else null #end;
                    __self__.nanoseconds = #if !macro function():GoInt64 return _dt.nanoseconds() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Duration return _dt.round(_d) #else null #end;
                    __self__.seconds = #if !macro function():GoFloat64 return _dt.seconds() #else null #end;
                    __self__.string = #if !macro function():GoString return _dt.string() #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Duration return _dt.truncate(_d) #else null #end;
                    __self__;
                }), Go.toInterface({
                    final __self__ = new Duration_wrapper(_target - _slop);
                    __self__.abs = #if !macro function():Duration return _target - _slop.abs() #else null #end;
                    __self__.hours = #if !macro function():GoFloat64 return _target - _slop.hours() #else null #end;
                    __self__.microseconds = #if !macro function():GoInt64 return _target - _slop.microseconds() #else null #end;
                    __self__.milliseconds = #if !macro function():GoInt64 return _target - _slop.milliseconds() #else null #end;
                    __self__.minutes = #if !macro function():GoFloat64 return _target - _slop.minutes() #else null #end;
                    __self__.nanoseconds = #if !macro function():GoInt64 return _target - _slop.nanoseconds() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Duration return _target - _slop.round(_d) #else null #end;
                    __self__.seconds = #if !macro function():GoFloat64 return _target - _slop.seconds() #else null #end;
                    __self__.string = #if !macro function():GoString return _target - _slop.string() #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Duration return _target - _slop.truncate(_d) #else null #end;
                    __self__;
                }), Go.toInterface({
                    final __self__ = new Duration_wrapper(_target + _slop);
                    __self__.abs = #if !macro function():Duration return _target + _slop.abs() #else null #end;
                    __self__.hours = #if !macro function():GoFloat64 return _target + _slop.hours() #else null #end;
                    __self__.microseconds = #if !macro function():GoInt64 return _target + _slop.microseconds() #else null #end;
                    __self__.milliseconds = #if !macro function():GoInt64 return _target + _slop.milliseconds() #else null #end;
                    __self__.minutes = #if !macro function():GoFloat64 return _target + _slop.minutes() #else null #end;
                    __self__.nanoseconds = #if !macro function():GoInt64 return _target + _slop.nanoseconds() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Duration return _target + _slop.round(_d) #else null #end;
                    __self__.seconds = #if !macro function():GoFloat64 return _target + _slop.seconds() #else null #end;
                    __self__.string = #if !macro function():GoString return _target + _slop.string() #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Duration return _target + _slop.truncate(_d) #else null #end;
                    __self__;
                }))));
                if (_dt > (_target + _slop)) {
                    sleep(((500000000 : Duration)));
                };
                continue;
            };
            sleep(((2 : Duration)) * _delta);
            Go.select([_ticker.c.__get__() => {
                _errs = (_errs != null ? _errs.__append__(((((("Ticker did not shut down" : GoString))) : GoString))) : new Slice<GoString>(((((("Ticker did not shut down" : GoString))) : GoString))));
                continue;
            }, {}]);
            if ((_errs != null ? _errs.length : ((0 : GoInt))) > ((0 : GoInt))) {
                _t.logf(((((("saw %d errors, ignoring to avoid flakiness" : GoString))) : GoString)), Go.toInterface((_errs != null ? _errs.length : ((0 : GoInt)))));
                _logErrs();
            };
            return;
        };
        _t.errorf(((((("saw %d errors" : GoString))) : GoString)), Go.toInterface((_errs != null ? _errs.length : ((0 : GoInt)))));
        _logErrs();
    }
/**
    // Issue 21874
**/
function testTickerStopWithDirectInitialization(_t:stdgo.testing.Testing.T):Void {
        var _c = new Chan<Time>(0, () -> (({  } : Time)));
        var _tk = (({ c : _c } : Ticker));
        _tk.stop();
    }
/**
    // Test that a bug tearing down a ticker has been fixed. This routine should not deadlock.
**/
function testTeardown(_t:stdgo.testing.Testing.T):Void {
        var delta:Duration = ((100000000 : Duration));
        if (stdgo.testing.Testing.short()) {
            delta = ((20000000 : Duration));
        };
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < ((3 : GoInt)), _i++, {
                var _ticker = newTicker(delta);
                _ticker.c.__get__();
                _ticker.stop();
            });
        };
    }
/**
    // Test the Tick convenience wrapper.
**/
function testTick(_t:stdgo.testing.Testing.T):Void {
        {
            var _got = tick(((-1 : Duration)));
            if (_got != null) {
                _t.errorf(((((("Tick(-1) = %v; want nil" : GoString))) : GoString)), Go.toInterface(_got));
            };
        };
    }
/**
    // Test that NewTicker panics when given a duration less than zero.
**/
function testNewTickerLtZeroDuration(_t:stdgo.testing.Testing.T):Void {
        var __recover_exception__:AnyInterface = null;
        var __deferstack__:Array<Void -> Void> = [];
        try {
            __deferstack__.unshift(() -> {
                var a = function():Void {
                    var __recover_exception__:AnyInterface = null;
                    {
                        var _err:AnyInterface = Go.toInterface(({
                            final r = __recover_exception__;
                            __recover_exception__ = null;
                            r;
                        }));
                        if (_err == null) {
                            _t.errorf(((((("NewTicker(-1) should have panicked" : GoString))) : GoString)));
                        };
                    };
                };
                a();
            });
            newTicker(((-1 : Duration)));
            for (defer in __deferstack__) {
                defer();
            };
            {
                for (defer in __deferstack__) {
                    defer();
                };
                if (__recover_exception__ != null) throw __recover_exception__;
                return;
            };
        } catch(__exception__) {
            if (!(__exception__.native is AnyInterfaceData)) throw __exception__;
            __recover_exception__ = __exception__.native;
            for (defer in __deferstack__) {
                defer();
            };
            if (__recover_exception__ != null) throw __recover_exception__;
            return;
        };
    }
/**
    // Test that Ticker.Reset panics when given a duration less than zero.
**/
function testTickerResetLtZeroDuration(_t:stdgo.testing.Testing.T):Void {
        var __recover_exception__:AnyInterface = null;
        var __deferstack__:Array<Void -> Void> = [];
        try {
            __deferstack__.unshift(() -> {
                var a = function():Void {
                    var __recover_exception__:AnyInterface = null;
                    {
                        var _err:AnyInterface = Go.toInterface(({
                            final r = __recover_exception__;
                            __recover_exception__ = null;
                            r;
                        }));
                        if (_err == null) {
                            _t.errorf(((((("Ticker.Reset(0) should have panicked" : GoString))) : GoString)));
                        };
                    };
                };
                a();
            });
            var _tk = newTicker(((1000000000 : Duration)));
            _tk.reset(((0 : Duration)));
            for (defer in __deferstack__) {
                defer();
            };
            {
                for (defer in __deferstack__) {
                    defer();
                };
                if (__recover_exception__ != null) throw __recover_exception__;
                return;
            };
        } catch(__exception__) {
            if (!(__exception__.native is AnyInterfaceData)) throw __exception__;
            __recover_exception__ = __exception__.native;
            for (defer in __deferstack__) {
                defer();
            };
            if (__recover_exception__ != null) throw __recover_exception__;
            return;
        };
    }
function benchmarkTicker(_b:stdgo.testing.Testing.B):Void {
        _benchmark(_b, function(_n:GoInt):Void {
            var _ticker = newTicker(((1 : Duration)));
            {
                var _i:GoInt = ((0 : GoInt));
                Go.cfor(_i < _n, _i++, {
                    _ticker.c.__get__();
                });
            };
            _ticker.stop();
        });
    }
function benchmarkTickerReset(_b:stdgo.testing.Testing.B):Void {
        _benchmark(_b, function(_n:GoInt):Void {
            var _ticker = newTicker(((1 : Duration)));
            {
                var _i:GoInt = ((0 : GoInt));
                Go.cfor(_i < _n, _i++, {
                    _ticker.reset(((2 : Duration)));
                });
            };
            _ticker.stop();
        });
    }
function benchmarkTickerResetNaive(_b:stdgo.testing.Testing.B):Void {
        _benchmark(_b, function(_n:GoInt):Void {
            var _ticker = newTicker(((1 : Duration)));
            {
                var _i:GoInt = ((0 : GoInt));
                Go.cfor(_i < _n, _i++, {
                    _ticker.stop();
                    _ticker = newTicker(((2 : Duration)));
                });
            };
            _ticker.stop();
        });
    }
/**
    // We should be in PST/PDT, but if the time zone files are missing we
    // won't be. The purpose of this test is to at least explain why some of
    // the subsequent tests fail.
**/
function testZoneData(_t:stdgo.testing.Testing.T):Void {
        var _lt:Time = (now() == null ? null : now().__copy__());
        {
            var __tmp__ = _lt.zone(), _name:GoString = __tmp__._0, _off:GoInt = __tmp__._1;
            if ((_off != ((-28800 : GoInt))) && (_off != ((-25200 : GoInt)))) {
                _t.errorf(((((("Unable to find US Pacific time zone data for testing; time zone is %q offset %d" : GoString))) : GoString)), Go.toInterface(_name), Go.toInterface(_off));
                _t.error(Go.toInterface(((((("Likely problem: the time zone files have not been installed." : GoString))) : GoString))));
            };
        };
    }
function _same(_t:Time, _u:T_parsedTime):Bool {
        var __tmp__ = _t.date(), _year:GoInt = __tmp__._0, _month:Month = __tmp__._1, _day:GoInt = __tmp__._2;
        var __tmp__ = _t.clock(), _hour:GoInt = __tmp__._0, _min:GoInt = __tmp__._1, _sec:GoInt = __tmp__._2;
        var __tmp__ = _t.zone(), _name:GoString = __tmp__._0, _offset:GoInt = __tmp__._1;
        if ((((((((_year != _u.year) || (_month != _u.month)) || (_day != _u.day)) || (_hour != _u.hour)) || (_min != _u.minute)) || (_sec != _u.second)) || (_name != _u.zone)) || (_offset != _u.zoneOffset)) {
            return false;
        };
        return (((((((_t.year() == _u.year) && (_t.month() == _u.month)) && (_t.day() == _u.day)) && (_t.hour() == _u.hour)) && (_t.minute() == _u.minute)) && (_t.second() == _u.second)) && (_t.nanosecond() == _u.nanosecond)) && (_t.weekday() == _u.weekday);
    }
function testSecondsToUTC(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _test in _utctests) {
            var _sec:GoInt64 = _test._seconds;
            var _golden = _test._golden;
            var _tm:Time = (unix(_sec, ((0 : GoInt64))).utc() == null ? null : unix(_sec, ((0 : GoInt64))).utc().__copy__());
            var _newsec:GoInt64 = _tm.unix();
            if (_newsec != _sec) {
                _t.errorf(((((("SecondsToUTC(%d).Seconds() = %d" : GoString))) : GoString)), Go.toInterface(_sec), Go.toInterface(_newsec));
            };
            if (!_same((_tm == null ? null : _tm.__copy__()), _golden)) {
                _t.errorf(((((("SecondsToUTC(%d):  // %#v" : GoString))) : GoString)), Go.toInterface(_sec), Go.toInterface({
                    final __self__ = new Time_wrapper(_tm);
                    __self__.add = #if !macro function(_d:Duration):Time return _tm.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _tm.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _tm.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _tm.appendFormat(_b, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _tm.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _tm.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _tm.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _tm.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _tm.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _tm.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _tm.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tm.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tm.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _tm.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _tm.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _tm.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _tm.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _tm.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _tm.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _tm.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tm.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tm.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tm.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _tm.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _tm.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _tm.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _tm.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _tm.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _tm.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _tm.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _tm.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _tm.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _tm.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _tm.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _tm.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _tm.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tm.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tm.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tm.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _tm.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _tm.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _tm.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _tm.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _tm.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _tm._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec_:GoInt64):Void _tm._addSec(_sec_) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _tm._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _tm._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _tm._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _tm._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _tm._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _tm._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec__:GoInt64):Void _tm._setMono(_sec__) #else null #end;
                    __self__._stripMono = #if !macro function():Void _tm._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _tm._unixSec() #else null #end;
                    __self__;
                }));
                _t.errorf(((((("  want=%+v" : GoString))) : GoString)), Go.toInterface(_golden));
                _t.errorf(((((("  have=%v" : GoString))) : GoString)), Go.toInterface(_tm.format(((((("2006-01-02T15:04:05Z07:00 MST" : GoString))) : GoString)))));
            };
        };
    }
function testNanosecondsToUTC(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _test in _nanoutctests) {
            var _golden = _test._golden;
            var _nsec:GoInt64 = (_test._seconds * ((1e+09 : GoInt64))) + ((_golden.nanosecond : GoInt64));
            var _tm:Time = (unix(((0 : GoInt64)), _nsec).utc() == null ? null : unix(((0 : GoInt64)), _nsec).utc().__copy__());
            var _newnsec:GoInt64 = (_tm.unix() * ((1e+09 : GoInt64))) + ((_tm.nanosecond() : GoInt64));
            if (_newnsec != _nsec) {
                _t.errorf(((((("NanosecondsToUTC(%d).Nanoseconds() = %d" : GoString))) : GoString)), Go.toInterface(_nsec), Go.toInterface(_newnsec));
            };
            if (!_same((_tm == null ? null : _tm.__copy__()), _golden)) {
                _t.errorf(((((("NanosecondsToUTC(%d):" : GoString))) : GoString)), Go.toInterface(_nsec));
                _t.errorf(((((("  want=%+v" : GoString))) : GoString)), Go.toInterface(_golden));
                _t.errorf(((((("  have=%+v" : GoString))) : GoString)), Go.toInterface(_tm.format(((((("2006-01-02T15:04:05Z07:00 MST" : GoString))) : GoString)))));
            };
        };
    }
function testSecondsToLocalTime(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _test in _localtests) {
            var _sec:GoInt64 = _test._seconds;
            var _golden = _test._golden;
            var _tm:Time = (unix(_sec, ((0 : GoInt64))) == null ? null : unix(_sec, ((0 : GoInt64))).__copy__());
            var _newsec:GoInt64 = _tm.unix();
            if (_newsec != _sec) {
                _t.errorf(((((("SecondsToLocalTime(%d).Seconds() = %d" : GoString))) : GoString)), Go.toInterface(_sec), Go.toInterface(_newsec));
            };
            if (!_same((_tm == null ? null : _tm.__copy__()), _golden)) {
                _t.errorf(((((("SecondsToLocalTime(%d):" : GoString))) : GoString)), Go.toInterface(_sec));
                _t.errorf(((((("  want=%+v" : GoString))) : GoString)), Go.toInterface(_golden));
                _t.errorf(((((("  have=%+v" : GoString))) : GoString)), Go.toInterface(_tm.format(((((("2006-01-02T15:04:05Z07:00 MST" : GoString))) : GoString)))));
            };
        };
    }
function testNanosecondsToLocalTime(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _test in _nanolocaltests) {
            var _golden = _test._golden;
            var _nsec:GoInt64 = (_test._seconds * ((1e+09 : GoInt64))) + ((_golden.nanosecond : GoInt64));
            var _tm:Time = (unix(((0 : GoInt64)), _nsec) == null ? null : unix(((0 : GoInt64)), _nsec).__copy__());
            var _newnsec:GoInt64 = (_tm.unix() * ((1e+09 : GoInt64))) + ((_tm.nanosecond() : GoInt64));
            if (_newnsec != _nsec) {
                _t.errorf(((((("NanosecondsToLocalTime(%d).Seconds() = %d" : GoString))) : GoString)), Go.toInterface(_nsec), Go.toInterface(_newnsec));
            };
            if (!_same((_tm == null ? null : _tm.__copy__()), _golden)) {
                _t.errorf(((((("NanosecondsToLocalTime(%d):" : GoString))) : GoString)), Go.toInterface(_nsec));
                _t.errorf(((((("  want=%+v" : GoString))) : GoString)), Go.toInterface(_golden));
                _t.errorf(((((("  have=%+v" : GoString))) : GoString)), Go.toInterface(_tm.format(((((("2006-01-02T15:04:05Z07:00 MST" : GoString))) : GoString)))));
            };
        };
    }
function testSecondsToUTCAndBack(_t:stdgo.testing.Testing.T):Void {
        var _f:GoInt64 -> Bool = function(_sec:GoInt64):Bool {
            return unix(_sec, ((0 : GoInt64))).utc().unix() == _sec;
        };
        var _f32:GoInt32 -> Bool = function(_sec:GoInt32):Bool {
            return _f(((_sec : GoInt64)));
        };
        var _cfg = (({ maxCount : ((10000 : GoInt)) } : stdgo.testing.quick.Quick.Config));
        {
            var _err:stdgo.Error = stdgo.testing.quick.Quick.check(Go.toInterface(_f32), _cfg);
            if (_err != null) {
                _t.fatal(Go.toInterface(_err));
            };
        };
        {
            var _err:stdgo.Error = stdgo.testing.quick.Quick.check(Go.toInterface(_f), _cfg);
            if (_err != null) {
                _t.fatal(Go.toInterface(_err));
            };
        };
    }
function testNanosecondsToUTCAndBack(_t:stdgo.testing.Testing.T):Void {
        var _f:GoInt64 -> Bool = function(_nsec:GoInt64):Bool {
            var _t:Time = (unix(((0 : GoInt64)), _nsec).utc() == null ? null : unix(((0 : GoInt64)), _nsec).utc().__copy__());
            var _ns:GoInt64 = (_t.unix() * ((1e+09 : GoInt64))) + ((_t.nanosecond() : GoInt64));
            return _ns == _nsec;
        };
        var _f32:GoInt32 -> Bool = function(_nsec:GoInt32):Bool {
            return _f(((_nsec : GoInt64)));
        };
        var _cfg = (({ maxCount : ((10000 : GoInt)) } : stdgo.testing.quick.Quick.Config));
        {
            var _err:stdgo.Error = stdgo.testing.quick.Quick.check(Go.toInterface(_f32), _cfg);
            if (_err != null) {
                _t.fatal(Go.toInterface(_err));
            };
        };
        {
            var _err:stdgo.Error = stdgo.testing.quick.Quick.check(Go.toInterface(_f), _cfg);
            if (_err != null) {
                _t.fatal(Go.toInterface(_err));
            };
        };
    }
function testUnixMilli(_t:stdgo.testing.Testing.T):Void {
        var _f:GoInt64 -> Bool = function(_msec:GoInt64):Bool {
            var _t:Time = (unixMilli(_msec) == null ? null : unixMilli(_msec).__copy__());
            return _t.unixMilli() == _msec;
        };
        var _cfg = (({ maxCount : ((10000 : GoInt)) } : stdgo.testing.quick.Quick.Config));
        {
            var _err:stdgo.Error = stdgo.testing.quick.Quick.check(Go.toInterface(_f), _cfg);
            if (_err != null) {
                _t.fatal(Go.toInterface(_err));
            };
        };
    }
function testUnixMicro(_t:stdgo.testing.Testing.T):Void {
        var _f:GoInt64 -> Bool = function(_usec:GoInt64):Bool {
            var _t:Time = (unixMicro(_usec) == null ? null : unixMicro(_usec).__copy__());
            return _t.unixMicro() == _usec;
        };
        var _cfg = (({ maxCount : ((10000 : GoInt)) } : stdgo.testing.quick.Quick.Config));
        {
            var _err:stdgo.Error = stdgo.testing.quick.Quick.check(Go.toInterface(_f), _cfg);
            if (_err != null) {
                _t.fatal(Go.toInterface(_err));
            };
        };
    }
/**
    // abs returns the absolute time stored in t, as seconds and nanoseconds.
**/
function _abs(_t:Time):{ var _0 : GoInt64; var _1 : GoInt64; } {
        var _sec:GoInt64 = ((0 : GoInt64)), _nsec:GoInt64 = ((0 : GoInt64));
        var _unix:GoInt64 = _t.unix();
        var _nano:GoInt = _t.nanosecond();
        return { _0 : _unix + (("62135596800" : GoInt64)), _1 : ((_nano : GoInt64)) };
    }
/**
    // absString returns abs as a decimal string.
**/
function _absString(_t:Time):GoString {
        var __tmp__ = _abs((_t == null ? null : _t.__copy__())), _sec:GoInt64 = __tmp__._0, _nsec:GoInt64 = __tmp__._1;
        if (_sec < ((0 : GoInt64))) {
            _sec = -_sec;
            _nsec = -_nsec;
            if (_nsec < ((0 : GoInt64))) {
                _nsec = _nsec + (((1e+09 : GoInt64)));
                _sec--;
            };
            return stdgo.fmt.Fmt.sprintf(((((("-%d%09d" : GoString))) : GoString)), Go.toInterface(_sec), Go.toInterface(_nsec));
        };
        return stdgo.fmt.Fmt.sprintf(((((("%d%09d" : GoString))) : GoString)), Go.toInterface(_sec), Go.toInterface(_nsec));
    }
function testTruncateRound(_t:stdgo.testing.Testing.T):Void {
        var _bsec:Ref<stdgo.math.big.Big.Int_> = (({  } : stdgo.math.big.Big.Int_)), _bnsec:Ref<stdgo.math.big.Big.Int_> = (({  } : stdgo.math.big.Big.Int_)), _bd:Ref<stdgo.math.big.Big.Int_> = (({  } : stdgo.math.big.Big.Int_)), _bt:Ref<stdgo.math.big.Big.Int_> = (({  } : stdgo.math.big.Big.Int_)), _br:Ref<stdgo.math.big.Big.Int_> = (({  } : stdgo.math.big.Big.Int_)), _bq:Ref<stdgo.math.big.Big.Int_> = (({  } : stdgo.math.big.Big.Int_)), _b1e9:Ref<stdgo.math.big.Big.Int_> = (({  } : stdgo.math.big.Big.Int_));
        _b1e9.setInt64(((1e+09 : GoInt64)));
        var _testOne:(GoInt64, GoInt64, GoInt64) -> Bool = function(_ti:GoInt64, _tns:GoInt64, _di:GoInt64):Bool {
            _t.helper();
            var _t0:Time = (unix(_ti, ((_tns : GoInt64))).utc() == null ? null : unix(_ti, ((_tns : GoInt64))).utc().__copy__());
            var _d:Duration = ((_di : Duration));
            if (_d < ((0 : Duration))) {
                _d = -_d;
            };
            if (_d <= ((0 : Duration))) {
                _d = ((1 : Duration));
            };
            var __tmp__ = _abs((_t0 == null ? null : _t0.__copy__())), _sec:GoInt64 = __tmp__._0, _nsec:GoInt64 = __tmp__._1;
            _bsec.setInt64(_sec);
            _bnsec.setInt64(_nsec);
            _bt.mul(_bsec, _b1e9);
            _bt.add(_bt, _bnsec);
            _bd.setInt64(((_d : GoInt64)));
            _bq.divMod(_bt, _bd, _br);
            var _r:GoInt64 = _br.int64();
            var _t1:Time = (_t0.add(-((_r : Duration))) == null ? null : _t0.add(-((_r : Duration))).__copy__());
            {
                var _trunc:Time = (_t0.truncate(_d) == null ? null : _t0.truncate(_d).__copy__());
                if (_trunc != _t1) {
                    _t.errorf(((((("Time.Truncate(%s, %s) = %s, want %s\n%v trunc %v =\n%v want\n%v" : GoString))) : GoString)), Go.toInterface(_t0.format(((((("2006-01-02T15:04:05.999999999Z07:00" : GoString))) : GoString)))), Go.toInterface({
                        final __self__ = new Duration_wrapper(_d);
                        __self__.abs = #if !macro function():Duration return _d.abs() #else null #end;
                        __self__.hours = #if !macro function():GoFloat64 return _d.hours() #else null #end;
                        __self__.microseconds = #if !macro function():GoInt64 return _d.microseconds() #else null #end;
                        __self__.milliseconds = #if !macro function():GoInt64 return _d.milliseconds() #else null #end;
                        __self__.minutes = #if !macro function():GoFloat64 return _d.minutes() #else null #end;
                        __self__.nanoseconds = #if !macro function():GoInt64 return _d.nanoseconds() #else null #end;
                        __self__.round = #if !macro function(_d_:Duration):Duration return _d.round(_d_) #else null #end;
                        __self__.seconds = #if !macro function():GoFloat64 return _d.seconds() #else null #end;
                        __self__.string = #if !macro function():GoString return _d.string() #else null #end;
                        __self__.truncate = #if !macro function(_d__:Duration):Duration return _d.truncate(_d__) #else null #end;
                        __self__;
                    }), Go.toInterface({
                        final __self__ = new Time_wrapper(_trunc);
                        __self__.add = #if !macro function(_d_:Duration):Time return _trunc.add(_d_) #else null #end;
                        __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _trunc.addDate(_years, _months, _days) #else null #end;
                        __self__.after = #if !macro function(__0:Time):Bool return _trunc.after(__0) #else null #end;
                        __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _trunc.appendFormat(_b, _layout) #else null #end;
                        __self__.before = #if !macro function(__0:Time):Bool return _trunc.before(__0) #else null #end;
                        __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _trunc.clock() #else null #end;
                        __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _trunc.date() #else null #end;
                        __self__.day = #if !macro function():GoInt return _trunc.day() #else null #end;
                        __self__.equal = #if !macro function(__0:Time):Bool return _trunc.equal(__0) #else null #end;
                        __self__.format = #if !macro function(__0:GoString):GoString return _trunc.format(__0) #else null #end;
                        __self__.goString = #if !macro function():GoString return _trunc.goString() #else null #end;
                        __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _trunc.gobDecode(__0) #else null #end;
                        __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _trunc.gobEncode() #else null #end;
                        __self__.hour = #if !macro function():GoInt return _trunc.hour() #else null #end;
                        __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _trunc.isoweek() #else null #end;
                        __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _trunc.in_(__0) #else null #end;
                        __self__.isDST = #if !macro function():Bool return _trunc.isDST() #else null #end;
                        __self__.isZero = #if !macro function():Bool return _trunc.isZero() #else null #end;
                        __self__.local = #if !macro function():Time return _trunc.local() #else null #end;
                        __self__.location = #if !macro function():Ref<Location> return _trunc.location() #else null #end;
                        __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _trunc.marshalBinary() #else null #end;
                        __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _trunc.marshalJSON() #else null #end;
                        __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _trunc.marshalText() #else null #end;
                        __self__.minute = #if !macro function():GoInt return _trunc.minute() #else null #end;
                        __self__.month = #if !macro function():Month return _trunc.month() #else null #end;
                        __self__.nanosecond = #if !macro function():GoInt return _trunc.nanosecond() #else null #end;
                        __self__.round = #if !macro function(_d__:Duration):Time return _trunc.round(_d__) #else null #end;
                        __self__.second = #if !macro function():GoInt return _trunc.second() #else null #end;
                        __self__.string = #if !macro function():GoString return _trunc.string() #else null #end;
                        __self__.sub = #if !macro function(__0:Time):Duration return _trunc.sub(__0) #else null #end;
                        __self__.truncate = #if !macro function(_d___:Duration):Time return _trunc.truncate(_d___) #else null #end;
                        __self__.utc = #if !macro function():Time return _trunc.utc() #else null #end;
                        __self__.unix = #if !macro function():GoInt64 return _trunc.unix() #else null #end;
                        __self__.unixMicro = #if !macro function():GoInt64 return _trunc.unixMicro() #else null #end;
                        __self__.unixMilli = #if !macro function():GoInt64 return _trunc.unixMilli() #else null #end;
                        __self__.unixNano = #if !macro function():GoInt64 return _trunc.unixNano() #else null #end;
                        __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _trunc.unmarshalBinary(__0) #else null #end;
                        __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _trunc.unmarshalJSON(__0) #else null #end;
                        __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _trunc.unmarshalText(__0) #else null #end;
                        __self__.weekday = #if !macro function():Weekday return _trunc.weekday() #else null #end;
                        __self__.year = #if !macro function():GoInt return _trunc.year() #else null #end;
                        __self__.yearDay = #if !macro function():GoInt return _trunc.yearDay() #else null #end;
                        __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _trunc.zone() #else null #end;
                        __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _trunc.zoneBounds() #else null #end;
                        __self__._abs = #if !macro function():GoUInt64 return _trunc._abs() #else null #end;
                        __self__._addSec = #if !macro function(_sec_:GoInt64):Void _trunc._addSec(_sec_) #else null #end;
                        __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _trunc._date(__0) #else null #end;
                        __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _trunc._locabs() #else null #end;
                        __self__._mono = #if !macro function():GoInt64 return _trunc._mono() #else null #end;
                        __self__._nsec = #if !macro function():GoInt32 return _trunc._nsec() #else null #end;
                        __self__._sec = #if !macro function():GoInt64 return _trunc._sec() #else null #end;
                        __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _trunc._setLoc(__0) #else null #end;
                        __self__._setMono = #if !macro function(_sec__:GoInt64):Void _trunc._setMono(_sec__) #else null #end;
                        __self__._stripMono = #if !macro function():Void _trunc._stripMono() #else null #end;
                        __self__._unixSec = #if !macro function():GoInt64 return _trunc._unixSec() #else null #end;
                        __self__;
                    }), Go.toInterface(_t1.format(((((("2006-01-02T15:04:05.999999999Z07:00" : GoString))) : GoString)))), Go.toInterface(_absString((_t0 == null ? null : _t0.__copy__()))), Go.toInterface(((_d : GoInt64))), Go.toInterface(_absString((_trunc == null ? null : _trunc.__copy__()))), Go.toInterface(_absString((_t1 == null ? null : _t1.__copy__()))));
                    return false;
                };
            };
            if ((_r > (((_d : GoInt64)) / ((2 : GoInt64)))) || ((_r + _r) == ((_d : GoInt64)))) {
                _t1 = (_t1.add(((_d : Duration))) == null ? null : _t1.add(((_d : Duration))).__copy__());
            };
            {
                var _rnd:Time = (_t0.round(_d) == null ? null : _t0.round(_d).__copy__());
                if (_rnd != _t1) {
                    _t.errorf(((((("Time.Round(%s, %s) = %s, want %s\n%v round %v =\n%v want\n%v" : GoString))) : GoString)), Go.toInterface(_t0.format(((((("2006-01-02T15:04:05.999999999Z07:00" : GoString))) : GoString)))), Go.toInterface({
                        final __self__ = new Duration_wrapper(_d);
                        __self__.abs = #if !macro function():Duration return _d.abs() #else null #end;
                        __self__.hours = #if !macro function():GoFloat64 return _d.hours() #else null #end;
                        __self__.microseconds = #if !macro function():GoInt64 return _d.microseconds() #else null #end;
                        __self__.milliseconds = #if !macro function():GoInt64 return _d.milliseconds() #else null #end;
                        __self__.minutes = #if !macro function():GoFloat64 return _d.minutes() #else null #end;
                        __self__.nanoseconds = #if !macro function():GoInt64 return _d.nanoseconds() #else null #end;
                        __self__.round = #if !macro function(_d_:Duration):Duration return _d.round(_d_) #else null #end;
                        __self__.seconds = #if !macro function():GoFloat64 return _d.seconds() #else null #end;
                        __self__.string = #if !macro function():GoString return _d.string() #else null #end;
                        __self__.truncate = #if !macro function(_d__:Duration):Duration return _d.truncate(_d__) #else null #end;
                        __self__;
                    }), Go.toInterface({
                        final __self__ = new Time_wrapper(_rnd);
                        __self__.add = #if !macro function(_d_:Duration):Time return _rnd.add(_d_) #else null #end;
                        __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _rnd.addDate(_years, _months, _days) #else null #end;
                        __self__.after = #if !macro function(__0:Time):Bool return _rnd.after(__0) #else null #end;
                        __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _rnd.appendFormat(_b, _layout) #else null #end;
                        __self__.before = #if !macro function(__0:Time):Bool return _rnd.before(__0) #else null #end;
                        __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _rnd.clock() #else null #end;
                        __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _rnd.date() #else null #end;
                        __self__.day = #if !macro function():GoInt return _rnd.day() #else null #end;
                        __self__.equal = #if !macro function(__0:Time):Bool return _rnd.equal(__0) #else null #end;
                        __self__.format = #if !macro function(__0:GoString):GoString return _rnd.format(__0) #else null #end;
                        __self__.goString = #if !macro function():GoString return _rnd.goString() #else null #end;
                        __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _rnd.gobDecode(__0) #else null #end;
                        __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _rnd.gobEncode() #else null #end;
                        __self__.hour = #if !macro function():GoInt return _rnd.hour() #else null #end;
                        __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _rnd.isoweek() #else null #end;
                        __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _rnd.in_(__0) #else null #end;
                        __self__.isDST = #if !macro function():Bool return _rnd.isDST() #else null #end;
                        __self__.isZero = #if !macro function():Bool return _rnd.isZero() #else null #end;
                        __self__.local = #if !macro function():Time return _rnd.local() #else null #end;
                        __self__.location = #if !macro function():Ref<Location> return _rnd.location() #else null #end;
                        __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _rnd.marshalBinary() #else null #end;
                        __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _rnd.marshalJSON() #else null #end;
                        __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _rnd.marshalText() #else null #end;
                        __self__.minute = #if !macro function():GoInt return _rnd.minute() #else null #end;
                        __self__.month = #if !macro function():Month return _rnd.month() #else null #end;
                        __self__.nanosecond = #if !macro function():GoInt return _rnd.nanosecond() #else null #end;
                        __self__.round = #if !macro function(_d__:Duration):Time return _rnd.round(_d__) #else null #end;
                        __self__.second = #if !macro function():GoInt return _rnd.second() #else null #end;
                        __self__.string = #if !macro function():GoString return _rnd.string() #else null #end;
                        __self__.sub = #if !macro function(__0:Time):Duration return _rnd.sub(__0) #else null #end;
                        __self__.truncate = #if !macro function(_d___:Duration):Time return _rnd.truncate(_d___) #else null #end;
                        __self__.utc = #if !macro function():Time return _rnd.utc() #else null #end;
                        __self__.unix = #if !macro function():GoInt64 return _rnd.unix() #else null #end;
                        __self__.unixMicro = #if !macro function():GoInt64 return _rnd.unixMicro() #else null #end;
                        __self__.unixMilli = #if !macro function():GoInt64 return _rnd.unixMilli() #else null #end;
                        __self__.unixNano = #if !macro function():GoInt64 return _rnd.unixNano() #else null #end;
                        __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _rnd.unmarshalBinary(__0) #else null #end;
                        __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _rnd.unmarshalJSON(__0) #else null #end;
                        __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _rnd.unmarshalText(__0) #else null #end;
                        __self__.weekday = #if !macro function():Weekday return _rnd.weekday() #else null #end;
                        __self__.year = #if !macro function():GoInt return _rnd.year() #else null #end;
                        __self__.yearDay = #if !macro function():GoInt return _rnd.yearDay() #else null #end;
                        __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _rnd.zone() #else null #end;
                        __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _rnd.zoneBounds() #else null #end;
                        __self__._abs = #if !macro function():GoUInt64 return _rnd._abs() #else null #end;
                        __self__._addSec = #if !macro function(_sec_:GoInt64):Void _rnd._addSec(_sec_) #else null #end;
                        __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _rnd._date(__0) #else null #end;
                        __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _rnd._locabs() #else null #end;
                        __self__._mono = #if !macro function():GoInt64 return _rnd._mono() #else null #end;
                        __self__._nsec = #if !macro function():GoInt32 return _rnd._nsec() #else null #end;
                        __self__._sec = #if !macro function():GoInt64 return _rnd._sec() #else null #end;
                        __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _rnd._setLoc(__0) #else null #end;
                        __self__._setMono = #if !macro function(_sec__:GoInt64):Void _rnd._setMono(_sec__) #else null #end;
                        __self__._stripMono = #if !macro function():Void _rnd._stripMono() #else null #end;
                        __self__._unixSec = #if !macro function():GoInt64 return _rnd._unixSec() #else null #end;
                        __self__;
                    }), Go.toInterface(_t1.format(((((("2006-01-02T15:04:05.999999999Z07:00" : GoString))) : GoString)))), Go.toInterface(_absString((_t0 == null ? null : _t0.__copy__()))), Go.toInterface(((_d : GoInt64))), Go.toInterface(_absString((_rnd == null ? null : _rnd.__copy__()))), Go.toInterface(_absString((_t1 == null ? null : _t1.__copy__()))));
                    return false;
                };
            };
            return true;
        };
        for (_0 => _tt in _truncateRoundTests) {
            _testOne(_tt._t.unix(), ((_tt._t.nanosecond() : GoInt64)), ((_tt._d : GoInt64)));
        };
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < ((100 : GoInt)), _i++, {
                {
                    var _j:GoInt = ((1 : GoInt));
                    Go.cfor(_j < ((100 : GoInt)), _j++, {
                        _testOne((("62135596800" : GoInt64)), ((_i : GoInt64)), ((_j : GoInt64)));
                        _testOne((("62135596800" : GoInt64)), -((_i : GoInt64)), ((_j : GoInt64)));
                        if (_t.failed()) {
                            return;
                        };
                    });
                };
            });
        };
        if (_t.failed()) {
            return;
        };
        var _cfg = (({ maxCount : ((100000 : GoInt)) } : stdgo.testing.quick.Quick.Config));
        if (stdgo.testing.Testing.short()) {
            _cfg.maxCount = ((1000 : GoInt));
        };
        var _f1:(GoInt64, GoInt32, GoInt32) -> Bool = function(_ti:GoInt64, _tns:GoInt32, _logdi:GoInt32):Bool {
            var _d:Duration = ((((1 : Duration)) : Duration));
            var _a:GoUInt = (((_logdi % ((9 : GoInt32))) : GoUInt)), _b:GoInt32 = (_logdi >> ((16 : GoUnTypedInt))) % ((9 : GoInt32));
            _d = _d << (_a);
            {
                var _i:GoInt = ((0 : GoInt));
                Go.cfor(_i < ((_b : GoInt)), _i++, {
                    _d = _d * (((5 : Duration)));
                });
            };
            _ti = _ti >> (((1 : GoUnTypedInt)));
            return _testOne(_ti, ((_tns : GoInt64)), ((_d : GoInt64)));
        };
        stdgo.testing.quick.Quick.check(Go.toInterface(_f1), _cfg);
        var _f2:(GoInt64, GoInt32, GoInt32) -> Bool = function(_ti:GoInt64, _tns:GoInt32, _di:GoInt32):Bool {
            var _d:Duration = ((_di : Duration)) * ((1000000000 : Duration));
            if (_d < ((0 : Duration))) {
                _d = -_d;
            };
            _ti = _ti >> (((1 : GoUnTypedInt)));
            return _testOne(_ti, ((_tns : GoInt64)), ((_d : GoInt64)));
        };
        stdgo.testing.quick.Quick.check(Go.toInterface(_f2), _cfg);
        var _f3:(GoInt64, GoInt64) -> Bool = function(_tns:GoInt64, _di:GoInt64):Bool {
            _di = _di & ((("4294967294" : GoInt64)));
            if (_di == ((0 : GoInt64))) {
                _di = ((2 : GoInt64));
            };
            _tns = _tns - (_tns % _di);
            if (_tns < ((0 : GoInt64))) {
                _tns = _tns + (_di / ((2 : GoInt64)));
            } else {
                _tns = _tns - (_di / ((2 : GoInt64)));
            };
            return _testOne(((0 : GoInt64)), _tns, _di);
        };
        stdgo.testing.quick.Quick.check(Go.toInterface(_f3), _cfg);
        var _f4:(GoInt64, GoInt32, GoInt64) -> Bool = function(_ti:GoInt64, _tns:GoInt32, _di:GoInt64):Bool {
            _ti = _ti >> (((1 : GoUnTypedInt)));
            return _testOne(_ti, ((_tns : GoInt64)), _di);
        };
        stdgo.testing.quick.Quick.check(Go.toInterface(_f4), _cfg);
    }
function testISOWeek(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _wt in _isoWeekTests) {
            var _dt:Time = (date(_wt._year, ((_wt._month : Month)), _wt._day, ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(_wt._year, ((_wt._month : Month)), _wt._day, ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__());
            var __tmp__ = _dt.isoweek(), _y:GoInt = __tmp__._0, _w:GoInt = __tmp__._1;
            if ((_w != _wt._wex) || (_y != _wt._yex)) {
                _t.errorf(((((("got %d/%d; expected %d/%d for %d-%02d-%02d" : GoString))) : GoString)), Go.toInterface(_y), Go.toInterface(_w), Go.toInterface(_wt._yex), Go.toInterface(_wt._wex), Go.toInterface(_wt._year), Go.toInterface(_wt._month), Go.toInterface(_wt._day));
            };
        };
        {
            var _year:GoInt = ((1950 : GoInt));
            Go.cfor(_year < ((2100 : GoInt)), _year++, {
                {
                    var __tmp__ = date(_year, ((1 : Month)), ((4 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).isoweek(), _y:GoInt = __tmp__._0, _w:GoInt = __tmp__._1;
                    if ((_y != _year) || (_w != ((1 : GoInt)))) {
                        _t.errorf(((((("got %d/%d; expected %d/1 for Jan 04" : GoString))) : GoString)), Go.toInterface(_y), Go.toInterface(_w), Go.toInterface(_year));
                    };
                };
            });
        };
    }
function testYearDay(_t:stdgo.testing.Testing.T):Void {
        for (_i => _loc in _yearDayLocations) {
            for (_0 => _ydt in _yearDayTests) {
                var _dt:Time = (date(_ydt._year, ((_ydt._month : Month)), _ydt._day, ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc) == null ? null : date(_ydt._year, ((_ydt._month : Month)), _ydt._day, ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc).__copy__());
                var _yday:GoInt = _dt.yearDay();
                if (_yday != _ydt._yday) {
                    _t.errorf(((((("Date(%d-%02d-%02d in %v).YearDay() = %d, want %d" : GoString))) : GoString)), Go.toInterface(_ydt._year), Go.toInterface(_ydt._month), Go.toInterface(_ydt._day), Go.toInterface(_loc), Go.toInterface(_yday), Go.toInterface(_ydt._yday));
                    continue;
                };
                if ((_ydt._year < ((0 : GoInt))) || (_ydt._year > ((9999 : GoInt)))) {
                    continue;
                };
                var _f:GoString = stdgo.fmt.Fmt.sprintf(((((("%04d-%02d-%02d %03d %+.2d00" : GoString))) : GoString)), Go.toInterface(_ydt._year), Go.toInterface(_ydt._month), Go.toInterface(_ydt._day), Go.toInterface(_ydt._yday), Go.toInterface((_i - ((2 : GoInt))) * ((4 : GoInt))));
                var __tmp__ = parse(((((("2006-01-02 002 -0700" : GoString))) : GoString)), _f), _dt1:Time = __tmp__._0, _err:stdgo.Error = __tmp__._1;
                if (_err != null) {
                    _t.errorf((("Parse(\"2006-01-02 002 -0700\", %q): %v" : GoString)), Go.toInterface(_f), Go.toInterface(_err));
                    continue;
                };
                if (!_dt1.equal((_dt == null ? null : _dt.__copy__()))) {
                    _t.errorf((("Parse(\"2006-01-02 002 -0700\", %q) = %v, want %v" : GoString)), Go.toInterface(_f), Go.toInterface({
                        final __self__ = new Time_wrapper(_dt1);
                        __self__.add = #if !macro function(_d:Duration):Time return _dt1.add(_d) #else null #end;
                        __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _dt1.addDate(_years, _months, _days) #else null #end;
                        __self__.after = #if !macro function(__0:Time):Bool return _dt1.after(__0) #else null #end;
                        __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _dt1.appendFormat(_b, _layout) #else null #end;
                        __self__.before = #if !macro function(__0:Time):Bool return _dt1.before(__0) #else null #end;
                        __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _dt1.clock() #else null #end;
                        __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _dt1.date() #else null #end;
                        __self__.day = #if !macro function():GoInt return _dt1.day() #else null #end;
                        __self__.equal = #if !macro function(__0:Time):Bool return _dt1.equal(__0) #else null #end;
                        __self__.format = #if !macro function(__0:GoString):GoString return _dt1.format(__0) #else null #end;
                        __self__.goString = #if !macro function():GoString return _dt1.goString() #else null #end;
                        __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _dt1.gobDecode(__0) #else null #end;
                        __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _dt1.gobEncode() #else null #end;
                        __self__.hour = #if !macro function():GoInt return _dt1.hour() #else null #end;
                        __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _dt1.isoweek() #else null #end;
                        __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _dt1.in_(__0) #else null #end;
                        __self__.isDST = #if !macro function():Bool return _dt1.isDST() #else null #end;
                        __self__.isZero = #if !macro function():Bool return _dt1.isZero() #else null #end;
                        __self__.local = #if !macro function():Time return _dt1.local() #else null #end;
                        __self__.location = #if !macro function():Ref<Location> return _dt1.location() #else null #end;
                        __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _dt1.marshalBinary() #else null #end;
                        __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _dt1.marshalJSON() #else null #end;
                        __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _dt1.marshalText() #else null #end;
                        __self__.minute = #if !macro function():GoInt return _dt1.minute() #else null #end;
                        __self__.month = #if !macro function():Month return _dt1.month() #else null #end;
                        __self__.nanosecond = #if !macro function():GoInt return _dt1.nanosecond() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Time return _dt1.round(_d) #else null #end;
                        __self__.second = #if !macro function():GoInt return _dt1.second() #else null #end;
                        __self__.string = #if !macro function():GoString return _dt1.string() #else null #end;
                        __self__.sub = #if !macro function(__0:Time):Duration return _dt1.sub(__0) #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Time return _dt1.truncate(_d) #else null #end;
                        __self__.utc = #if !macro function():Time return _dt1.utc() #else null #end;
                        __self__.unix = #if !macro function():GoInt64 return _dt1.unix() #else null #end;
                        __self__.unixMicro = #if !macro function():GoInt64 return _dt1.unixMicro() #else null #end;
                        __self__.unixMilli = #if !macro function():GoInt64 return _dt1.unixMilli() #else null #end;
                        __self__.unixNano = #if !macro function():GoInt64 return _dt1.unixNano() #else null #end;
                        __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _dt1.unmarshalBinary(__0) #else null #end;
                        __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _dt1.unmarshalJSON(__0) #else null #end;
                        __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _dt1.unmarshalText(__0) #else null #end;
                        __self__.weekday = #if !macro function():Weekday return _dt1.weekday() #else null #end;
                        __self__.year = #if !macro function():GoInt return _dt1.year() #else null #end;
                        __self__.yearDay = #if !macro function():GoInt return _dt1.yearDay() #else null #end;
                        __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _dt1.zone() #else null #end;
                        __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _dt1.zoneBounds() #else null #end;
                        __self__._abs = #if !macro function():GoUInt64 return _dt1._abs() #else null #end;
                        __self__._addSec = #if !macro function(_sec:GoInt64):Void _dt1._addSec(_sec) #else null #end;
                        __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _dt1._date(__0) #else null #end;
                        __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _dt1._locabs() #else null #end;
                        __self__._mono = #if !macro function():GoInt64 return _dt1._mono() #else null #end;
                        __self__._nsec = #if !macro function():GoInt32 return _dt1._nsec() #else null #end;
                        __self__._sec = #if !macro function():GoInt64 return _dt1._sec() #else null #end;
                        __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _dt1._setLoc(__0) #else null #end;
                        __self__._setMono = #if !macro function(_sec:GoInt64):Void _dt1._setMono(_sec) #else null #end;
                        __self__._stripMono = #if !macro function():Void _dt1._stripMono() #else null #end;
                        __self__._unixSec = #if !macro function():GoInt64 return _dt1._unixSec() #else null #end;
                        __self__;
                    }), Go.toInterface({
                        final __self__ = new Time_wrapper(_dt);
                        __self__.add = #if !macro function(_d:Duration):Time return _dt.add(_d) #else null #end;
                        __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _dt.addDate(_years, _months, _days) #else null #end;
                        __self__.after = #if !macro function(__0:Time):Bool return _dt.after(__0) #else null #end;
                        __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _dt.appendFormat(_b, _layout) #else null #end;
                        __self__.before = #if !macro function(__0:Time):Bool return _dt.before(__0) #else null #end;
                        __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _dt.clock() #else null #end;
                        __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _dt.date() #else null #end;
                        __self__.day = #if !macro function():GoInt return _dt.day() #else null #end;
                        __self__.equal = #if !macro function(__0:Time):Bool return _dt.equal(__0) #else null #end;
                        __self__.format = #if !macro function(__0:GoString):GoString return _dt.format(__0) #else null #end;
                        __self__.goString = #if !macro function():GoString return _dt.goString() #else null #end;
                        __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _dt.gobDecode(__0) #else null #end;
                        __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _dt.gobEncode() #else null #end;
                        __self__.hour = #if !macro function():GoInt return _dt.hour() #else null #end;
                        __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _dt.isoweek() #else null #end;
                        __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _dt.in_(__0) #else null #end;
                        __self__.isDST = #if !macro function():Bool return _dt.isDST() #else null #end;
                        __self__.isZero = #if !macro function():Bool return _dt.isZero() #else null #end;
                        __self__.local = #if !macro function():Time return _dt.local() #else null #end;
                        __self__.location = #if !macro function():Ref<Location> return _dt.location() #else null #end;
                        __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _dt.marshalBinary() #else null #end;
                        __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _dt.marshalJSON() #else null #end;
                        __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _dt.marshalText() #else null #end;
                        __self__.minute = #if !macro function():GoInt return _dt.minute() #else null #end;
                        __self__.month = #if !macro function():Month return _dt.month() #else null #end;
                        __self__.nanosecond = #if !macro function():GoInt return _dt.nanosecond() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Time return _dt.round(_d) #else null #end;
                        __self__.second = #if !macro function():GoInt return _dt.second() #else null #end;
                        __self__.string = #if !macro function():GoString return _dt.string() #else null #end;
                        __self__.sub = #if !macro function(__0:Time):Duration return _dt.sub(__0) #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Time return _dt.truncate(_d) #else null #end;
                        __self__.utc = #if !macro function():Time return _dt.utc() #else null #end;
                        __self__.unix = #if !macro function():GoInt64 return _dt.unix() #else null #end;
                        __self__.unixMicro = #if !macro function():GoInt64 return _dt.unixMicro() #else null #end;
                        __self__.unixMilli = #if !macro function():GoInt64 return _dt.unixMilli() #else null #end;
                        __self__.unixNano = #if !macro function():GoInt64 return _dt.unixNano() #else null #end;
                        __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _dt.unmarshalBinary(__0) #else null #end;
                        __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _dt.unmarshalJSON(__0) #else null #end;
                        __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _dt.unmarshalText(__0) #else null #end;
                        __self__.weekday = #if !macro function():Weekday return _dt.weekday() #else null #end;
                        __self__.year = #if !macro function():GoInt return _dt.year() #else null #end;
                        __self__.yearDay = #if !macro function():GoInt return _dt.yearDay() #else null #end;
                        __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _dt.zone() #else null #end;
                        __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _dt.zoneBounds() #else null #end;
                        __self__._abs = #if !macro function():GoUInt64 return _dt._abs() #else null #end;
                        __self__._addSec = #if !macro function(_sec:GoInt64):Void _dt._addSec(_sec) #else null #end;
                        __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _dt._date(__0) #else null #end;
                        __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _dt._locabs() #else null #end;
                        __self__._mono = #if !macro function():GoInt64 return _dt._mono() #else null #end;
                        __self__._nsec = #if !macro function():GoInt32 return _dt._nsec() #else null #end;
                        __self__._sec = #if !macro function():GoInt64 return _dt._sec() #else null #end;
                        __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _dt._setLoc(__0) #else null #end;
                        __self__._setMono = #if !macro function(_sec:GoInt64):Void _dt._setMono(_sec) #else null #end;
                        __self__._stripMono = #if !macro function():Void _dt._stripMono() #else null #end;
                        __self__._unixSec = #if !macro function():GoInt64 return _dt._unixSec() #else null #end;
                        __self__;
                    }));
                };
            };
        };
    }
function testDurationString(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _tt in _durationTests) {
            {
                var _str:GoString = ((_tt._d.string() : GoString));
                if (_str != _tt._str) {
                    _t.errorf(((((("Duration(%d).String() = %s, want %s" : GoString))) : GoString)), Go.toInterface(((_tt._d : GoInt64))), Go.toInterface(_str), Go.toInterface(_tt._str));
                };
            };
            if (_tt._d > ((0 : Duration))) {
                {
                    var _str:GoString = (((-_tt._d).string() : GoString));
                    if (_str != (((((("-" : GoString))) : GoString)) + _tt._str)) {
                        _t.errorf(((((("Duration(%d).String() = %s, want %s" : GoString))) : GoString)), Go.toInterface(((-_tt._d : GoInt64))), Go.toInterface(_str), Go.toInterface(((((("-" : GoString))) : GoString)) + _tt._str));
                    };
                };
            };
        };
    }
function testDate(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _tt in _dateTests) {
            var _time:Time = (date(_tt._year, ((_tt._month : Month)), _tt._day, _tt._hour, _tt._min, _tt._sec, _tt._nsec, _tt._z) == null ? null : date(_tt._year, ((_tt._month : Month)), _tt._day, _tt._hour, _tt._min, _tt._sec, _tt._nsec, _tt._z).__copy__());
            var _want:Time = (unix(_tt._unix, ((0 : GoInt64))) == null ? null : unix(_tt._unix, ((0 : GoInt64))).__copy__());
            if (!_time.equal((_want == null ? null : _want.__copy__()))) {
                _t.errorf(((((("Date(%d, %d, %d, %d, %d, %d, %d, %s) = %v, want %v" : GoString))) : GoString)),
Go.toInterface(_tt._year),
Go.toInterface(_tt._month),
Go.toInterface(_tt._day),
Go.toInterface(_tt._hour),
Go.toInterface(_tt._min),
Go.toInterface(_tt._sec),
Go.toInterface(_tt._nsec),
Go.toInterface(_tt._z),
Go.toInterface({
                    final __self__ = new Time_wrapper(_time);
                    __self__.add = #if !macro function(_d:Duration):Time return _time.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _time.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _time.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _time.appendFormat(_b, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _time.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _time.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _time.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _time.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _time.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _time.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _time.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _time.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _time.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _time.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _time.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _time.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _time.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _time.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _time.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _time.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _time.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _time.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _time.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _time.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _time.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _time.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _time.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _time.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _time.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _time.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _time.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _time.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _time.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _time.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _time.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _time.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _time.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _time.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _time.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _time.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _time.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _time.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _time.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _time.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _time._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec:GoInt64):Void _time._addSec(_sec) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _time._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _time._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _time._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _time._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _time._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _time._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec:GoInt64):Void _time._setMono(_sec) #else null #end;
                    __self__._stripMono = #if !macro function():Void _time._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _time._unixSec() #else null #end;
                    __self__;
                }),
Go.toInterface({
                    final __self__ = new Time_wrapper(_want);
                    __self__.add = #if !macro function(_d:Duration):Time return _want.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _want.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _want.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _want.appendFormat(_b, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _want.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _want.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _want.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _want.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _want.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _want.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _want.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _want.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _want.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _want.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _want.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _want.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _want.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _want.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _want.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _want.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _want.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _want.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _want.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _want.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _want.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _want.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _want.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _want.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _want.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _want.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _want.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _want.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _want.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _want.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _want.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _want.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _want.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _want.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _want.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _want.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _want.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _want.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _want.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _want.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _want._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec:GoInt64):Void _want._addSec(_sec) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _want._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _want._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _want._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _want._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _want._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _want._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec:GoInt64):Void _want._setMono(_sec) #else null #end;
                    __self__._stripMono = #if !macro function():Void _want._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _want._unixSec() #else null #end;
                    __self__;
                }));
            };
        };
    }
function testAddDate(_t:stdgo.testing.Testing.T):Void {
        var _t0:Time = (date(((2011 : GoInt)), ((11 : Month)), ((18 : GoInt)), ((7 : GoInt)), ((56 : GoInt)), ((35 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((2011 : GoInt)), ((11 : Month)), ((18 : GoInt)), ((7 : GoInt)), ((56 : GoInt)), ((35 : GoInt)), ((0 : GoInt)), utc).__copy__());
        var _t1:Time = (date(((2016 : GoInt)), ((3 : Month)), ((19 : GoInt)), ((7 : GoInt)), ((56 : GoInt)), ((35 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((2016 : GoInt)), ((3 : Month)), ((19 : GoInt)), ((7 : GoInt)), ((56 : GoInt)), ((35 : GoInt)), ((0 : GoInt)), utc).__copy__());
        for (_0 => _at in _addDateTests) {
            var _time:Time = (_t0.addDate(_at._years, _at._months, _at._days) == null ? null : _t0.addDate(_at._years, _at._months, _at._days).__copy__());
            if (!_time.equal((_t1 == null ? null : _t1.__copy__()))) {
                _t.errorf(((((("AddDate(%d, %d, %d) = %v, want %v" : GoString))) : GoString)), Go.toInterface(_at._years), Go.toInterface(_at._months), Go.toInterface(_at._days), Go.toInterface({
                    final __self__ = new Time_wrapper(_time);
                    __self__.add = #if !macro function(_d:Duration):Time return _time.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _time.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _time.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _time.appendFormat(_b, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _time.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _time.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _time.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _time.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _time.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _time.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _time.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _time.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _time.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _time.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _time.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _time.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _time.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _time.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _time.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _time.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _time.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _time.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _time.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _time.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _time.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _time.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _time.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _time.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _time.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _time.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _time.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _time.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _time.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _time.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _time.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _time.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _time.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _time.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _time.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _time.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _time.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _time.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _time.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _time.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _time._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec:GoInt64):Void _time._addSec(_sec) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _time._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _time._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _time._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _time._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _time._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _time._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec:GoInt64):Void _time._setMono(_sec) #else null #end;
                    __self__._stripMono = #if !macro function():Void _time._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _time._unixSec() #else null #end;
                    __self__;
                }), Go.toInterface({
                    final __self__ = new Time_wrapper(_t1);
                    __self__.add = #if !macro function(_d:Duration):Time return _t1.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _t1.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _t1.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _t1.appendFormat(_b, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _t1.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _t1.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _t1.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _t1.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _t1.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _t1.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _t1.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _t1.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _t1.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _t1.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _t1.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _t1.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _t1.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _t1.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _t1.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _t1.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _t1.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _t1.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _t1.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _t1.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _t1.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _t1.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _t1.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _t1.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _t1.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _t1.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _t1.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _t1.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _t1.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _t1.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _t1.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _t1.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _t1._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec:GoInt64):Void _t1._addSec(_sec) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _t1._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _t1._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _t1._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _t1._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _t1._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _t1._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec:GoInt64):Void _t1._setMono(_sec) #else null #end;
                    __self__._stripMono = #if !macro function():Void _t1._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _t1._unixSec() #else null #end;
                    __self__;
                }));
            };
        };
    }
function testDaysIn(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _tt in _daysInTests) {
            var _di:GoInt = daysIn(((_tt._month : Month)), _tt._year);
            if (_di != _tt._di) {
                _t.errorf(((((("got %d; expected %d for %d-%02d" : GoString))) : GoString)), Go.toInterface(_di), Go.toInterface(_tt._di), Go.toInterface(_tt._year), Go.toInterface(_tt._month));
            };
        };
    }
function testAddToExactSecond(_t:stdgo.testing.Testing.T):Void {
        var _t1:Time = (now() == null ? null : now().__copy__());
        var _t2:Time = (_t1.add(((1000000000 : Duration)) - ((_t1.nanosecond() : Duration))) == null ? null : _t1.add(((1000000000 : Duration)) - ((_t1.nanosecond() : Duration))).__copy__());
        var _sec:GoInt = (_t1.second() + ((1 : GoInt))) % ((60 : GoInt));
        if ((_t2.second() != _sec) || (_t2.nanosecond() != ((0 : GoInt)))) {
            _t.errorf(((((("sec = %d, nsec = %d, want sec = %d, nsec = 0" : GoString))) : GoString)), Go.toInterface(_t2.second()), Go.toInterface(_t2.nanosecond()), Go.toInterface(_sec));
        };
    }
function _equalTimeAndZone(_a:Time, _b:Time):Bool {
        var __tmp__ = _a.zone(), _aname:GoString = __tmp__._0, _aoffset:GoInt = __tmp__._1;
        var __tmp__ = _b.zone(), _bname:GoString = __tmp__._0, _boffset:GoInt = __tmp__._1;
        return (_a.equal((_b == null ? null : _b.__copy__())) && (_aoffset == _boffset)) && (_aname == _bname);
    }
function testTimeGob(_t:stdgo.testing.Testing.T):Void {
        var _b:stdgo.bytes.Bytes.Buffer = (({  } : stdgo.bytes.Bytes.Buffer));
        var _enc = stdgo.encoding.gob.Gob.newEncoder({
            final __self__ = new stdgo.bytes.Bytes.Buffer_wrapper(_b);
            __self__.bytes = #if !macro function():Slice<GoUInt8> return _b.bytes() #else null #end;
            __self__.cap_ = #if !macro function():GoInt return _b.cap_() #else null #end;
            __self__.grow = #if !macro function(__0:GoInt):Void _b.grow(__0) #else null #end;
            __self__.len = #if !macro function():GoInt return _b.len() #else null #end;
            __self__.next = #if !macro function(__0:GoInt):Slice<GoUInt8> return _b.next(__0) #else null #end;
            __self__.read = #if !macro function(__0:Slice<GoUInt8>):{ var _0 : GoInt; var _1 : stdgo.Error; } return _b.read(__0) #else null #end;
            __self__.readByte = #if !macro function():{ var _0 : GoUInt8; var _1 : stdgo.Error; } return _b.readByte() #else null #end;
            __self__.readBytes = #if !macro function(__0:GoUInt8):{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _b.readBytes(__0) #else null #end;
            __self__.readFrom = #if !macro function(_r:stdgo.io.Io.Reader):{ var _0 : GoInt64; var _1 : stdgo.Error; } return _b.readFrom(_r) #else null #end;
            __self__.readRune = #if !macro function():{ var _0 : GoInt32; var _1 : GoInt; var _2 : stdgo.Error; } return _b.readRune() #else null #end;
            __self__.readString = #if !macro function(__0:GoUInt8):{ var _0 : GoString; var _1 : stdgo.Error; } return _b.readString(__0) #else null #end;
            __self__.reset = #if !macro function():Void _b.reset() #else null #end;
            __self__.string = #if !macro function():GoString return _b.string() #else null #end;
            __self__.truncate = #if !macro function(__0:GoInt):Void _b.truncate(__0) #else null #end;
            __self__.unreadByte = #if !macro function():stdgo.Error return _b.unreadByte() #else null #end;
            __self__.unreadRune = #if !macro function():stdgo.Error return _b.unreadRune() #else null #end;
            __self__.write = #if !macro function(__0:Slice<GoUInt8>):{ var _0 : GoInt; var _1 : stdgo.Error; } return _b.write(__0) #else null #end;
            __self__.writeByte = #if !macro function(__0:GoUInt8):stdgo.Error return _b.writeByte(__0) #else null #end;
            __self__.writeRune = #if !macro function(_new:GoInt32):{ var _0 : GoInt; var _1 : stdgo.Error; } return _b.writeRune(_new) #else null #end;
            __self__.writeString = #if !macro function(__0:GoString):{ var _0 : GoInt; var _1 : stdgo.Error; } return _b.writeString(__0) #else null #end;
            __self__.writeTo = #if !macro function(_w:stdgo.io.Io.Writer):{ var _0 : GoInt64; var _1 : stdgo.Error; } return _b.writeTo(_w) #else null #end;
            __self__._empty = #if !macro function():Bool return _b._empty() #else null #end;
            __self__._grow = #if !macro function(__0:GoInt):GoInt return _b._grow(__0) #else null #end;
            __self__._readSlice = #if !macro function(__0:GoUInt8):{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _b._readSlice(__0) #else null #end;
            __self__._tryGrowByReslice = #if !macro function(__0:GoInt):{ var _0 : GoInt; var _1 : Bool; } return _b._tryGrowByReslice(__0) #else null #end;
            __self__;
        });
        var _dec = stdgo.encoding.gob.Gob.newDecoder({
            final __self__ = new stdgo.bytes.Bytes.Buffer_wrapper(_b);
            __self__.bytes = #if !macro function():Slice<GoUInt8> return _b.bytes() #else null #end;
            __self__.cap_ = #if !macro function():GoInt return _b.cap_() #else null #end;
            __self__.grow = #if !macro function(__0:GoInt):Void _b.grow(__0) #else null #end;
            __self__.len = #if !macro function():GoInt return _b.len() #else null #end;
            __self__.next = #if !macro function(__0:GoInt):Slice<GoUInt8> return _b.next(__0) #else null #end;
            __self__.read = #if !macro function(__0:Slice<GoUInt8>):{ var _0 : GoInt; var _1 : stdgo.Error; } return _b.read(__0) #else null #end;
            __self__.readByte = #if !macro function():{ var _0 : GoUInt8; var _1 : stdgo.Error; } return _b.readByte() #else null #end;
            __self__.readBytes = #if !macro function(__0:GoUInt8):{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _b.readBytes(__0) #else null #end;
            __self__.readFrom = #if !macro function(_r:stdgo.io.Io.Reader):{ var _0 : GoInt64; var _1 : stdgo.Error; } return _b.readFrom(_r) #else null #end;
            __self__.readRune = #if !macro function():{ var _0 : GoInt32; var _1 : GoInt; var _2 : stdgo.Error; } return _b.readRune() #else null #end;
            __self__.readString = #if !macro function(__0:GoUInt8):{ var _0 : GoString; var _1 : stdgo.Error; } return _b.readString(__0) #else null #end;
            __self__.reset = #if !macro function():Void _b.reset() #else null #end;
            __self__.string = #if !macro function():GoString return _b.string() #else null #end;
            __self__.truncate = #if !macro function(__0:GoInt):Void _b.truncate(__0) #else null #end;
            __self__.unreadByte = #if !macro function():stdgo.Error return _b.unreadByte() #else null #end;
            __self__.unreadRune = #if !macro function():stdgo.Error return _b.unreadRune() #else null #end;
            __self__.write = #if !macro function(__0:Slice<GoUInt8>):{ var _0 : GoInt; var _1 : stdgo.Error; } return _b.write(__0) #else null #end;
            __self__.writeByte = #if !macro function(__0:GoUInt8):stdgo.Error return _b.writeByte(__0) #else null #end;
            __self__.writeRune = #if !macro function(_new:GoInt32):{ var _0 : GoInt; var _1 : stdgo.Error; } return _b.writeRune(_new) #else null #end;
            __self__.writeString = #if !macro function(__0:GoString):{ var _0 : GoInt; var _1 : stdgo.Error; } return _b.writeString(__0) #else null #end;
            __self__.writeTo = #if !macro function(_w:stdgo.io.Io.Writer):{ var _0 : GoInt64; var _1 : stdgo.Error; } return _b.writeTo(_w) #else null #end;
            __self__._empty = #if !macro function():Bool return _b._empty() #else null #end;
            __self__._grow = #if !macro function(__0:GoInt):GoInt return _b._grow(__0) #else null #end;
            __self__._readSlice = #if !macro function(__0:GoUInt8):{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _b._readSlice(__0) #else null #end;
            __self__._tryGrowByReslice = #if !macro function(__0:GoInt):{ var _0 : GoInt; var _1 : Bool; } return _b._tryGrowByReslice(__0) #else null #end;
            __self__;
        });
        for (_0 => _tt in _gobTests) {
            var _gobtt:Time = (({  } : Time));
            {
                var _err:stdgo.Error = _enc.encode(Go.toInterface(_tt));
                if (_err != null) {
                    _t.errorf(((((("%v gob Encode error = %q, want nil" : GoString))) : GoString)), Go.toInterface({
                        final __self__ = new Time_wrapper(_tt);
                        __self__.add = #if !macro function(_d:Duration):Time return _tt.add(_d) #else null #end;
                        __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _tt.addDate(_years, _months, _days) #else null #end;
                        __self__.after = #if !macro function(__0:Time):Bool return _tt.after(__0) #else null #end;
                        __self__.appendFormat = #if !macro function(_b_:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _tt.appendFormat(_b_, _layout) #else null #end;
                        __self__.before = #if !macro function(__0:Time):Bool return _tt.before(__0) #else null #end;
                        __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _tt.clock() #else null #end;
                        __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _tt.date() #else null #end;
                        __self__.day = #if !macro function():GoInt return _tt.day() #else null #end;
                        __self__.equal = #if !macro function(__0:Time):Bool return _tt.equal(__0) #else null #end;
                        __self__.format = #if !macro function(__0:GoString):GoString return _tt.format(__0) #else null #end;
                        __self__.goString = #if !macro function():GoString return _tt.goString() #else null #end;
                        __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt.gobDecode(__0) #else null #end;
                        __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt.gobEncode() #else null #end;
                        __self__.hour = #if !macro function():GoInt return _tt.hour() #else null #end;
                        __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _tt.isoweek() #else null #end;
                        __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _tt.in_(__0) #else null #end;
                        __self__.isDST = #if !macro function():Bool return _tt.isDST() #else null #end;
                        __self__.isZero = #if !macro function():Bool return _tt.isZero() #else null #end;
                        __self__.local = #if !macro function():Time return _tt.local() #else null #end;
                        __self__.location = #if !macro function():Ref<Location> return _tt.location() #else null #end;
                        __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt.marshalBinary() #else null #end;
                        __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt.marshalJSON() #else null #end;
                        __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt.marshalText() #else null #end;
                        __self__.minute = #if !macro function():GoInt return _tt.minute() #else null #end;
                        __self__.month = #if !macro function():Month return _tt.month() #else null #end;
                        __self__.nanosecond = #if !macro function():GoInt return _tt.nanosecond() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Time return _tt.round(_d) #else null #end;
                        __self__.second = #if !macro function():GoInt return _tt.second() #else null #end;
                        __self__.string = #if !macro function():GoString return _tt.string() #else null #end;
                        __self__.sub = #if !macro function(__0:Time):Duration return _tt.sub(__0) #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Time return _tt.truncate(_d) #else null #end;
                        __self__.utc = #if !macro function():Time return _tt.utc() #else null #end;
                        __self__.unix = #if !macro function():GoInt64 return _tt.unix() #else null #end;
                        __self__.unixMicro = #if !macro function():GoInt64 return _tt.unixMicro() #else null #end;
                        __self__.unixMilli = #if !macro function():GoInt64 return _tt.unixMilli() #else null #end;
                        __self__.unixNano = #if !macro function():GoInt64 return _tt.unixNano() #else null #end;
                        __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt.unmarshalBinary(__0) #else null #end;
                        __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt.unmarshalJSON(__0) #else null #end;
                        __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt.unmarshalText(__0) #else null #end;
                        __self__.weekday = #if !macro function():Weekday return _tt.weekday() #else null #end;
                        __self__.year = #if !macro function():GoInt return _tt.year() #else null #end;
                        __self__.yearDay = #if !macro function():GoInt return _tt.yearDay() #else null #end;
                        __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _tt.zone() #else null #end;
                        __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _tt.zoneBounds() #else null #end;
                        __self__._abs = #if !macro function():GoUInt64 return _tt._abs() #else null #end;
                        __self__._addSec = #if !macro function(_sec:GoInt64):Void _tt._addSec(_sec) #else null #end;
                        __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _tt._date(__0) #else null #end;
                        __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _tt._locabs() #else null #end;
                        __self__._mono = #if !macro function():GoInt64 return _tt._mono() #else null #end;
                        __self__._nsec = #if !macro function():GoInt32 return _tt._nsec() #else null #end;
                        __self__._sec = #if !macro function():GoInt64 return _tt._sec() #else null #end;
                        __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _tt._setLoc(__0) #else null #end;
                        __self__._setMono = #if !macro function(_sec:GoInt64):Void _tt._setMono(_sec) #else null #end;
                        __self__._stripMono = #if !macro function():Void _tt._stripMono() #else null #end;
                        __self__._unixSec = #if !macro function():GoInt64 return _tt._unixSec() #else null #end;
                        __self__;
                    }), Go.toInterface(_err));
                } else {
                    var _err:stdgo.Error = _dec.decode(Go.toInterface(_gobtt));
                    if (_err != null) {
                        _t.errorf(((((("%v gob Decode error = %q, want nil" : GoString))) : GoString)), Go.toInterface({
                            final __self__ = new Time_wrapper(_tt);
                            __self__.add = #if !macro function(_d:Duration):Time return _tt.add(_d) #else null #end;
                            __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _tt.addDate(_years, _months, _days) #else null #end;
                            __self__.after = #if !macro function(__0:Time):Bool return _tt.after(__0) #else null #end;
                            __self__.appendFormat = #if !macro function(_b_:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _tt.appendFormat(_b_, _layout) #else null #end;
                            __self__.before = #if !macro function(__0:Time):Bool return _tt.before(__0) #else null #end;
                            __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _tt.clock() #else null #end;
                            __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _tt.date() #else null #end;
                            __self__.day = #if !macro function():GoInt return _tt.day() #else null #end;
                            __self__.equal = #if !macro function(__0:Time):Bool return _tt.equal(__0) #else null #end;
                            __self__.format = #if !macro function(__0:GoString):GoString return _tt.format(__0) #else null #end;
                            __self__.goString = #if !macro function():GoString return _tt.goString() #else null #end;
                            __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt.gobDecode(__0) #else null #end;
                            __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt.gobEncode() #else null #end;
                            __self__.hour = #if !macro function():GoInt return _tt.hour() #else null #end;
                            __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _tt.isoweek() #else null #end;
                            __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _tt.in_(__0) #else null #end;
                            __self__.isDST = #if !macro function():Bool return _tt.isDST() #else null #end;
                            __self__.isZero = #if !macro function():Bool return _tt.isZero() #else null #end;
                            __self__.local = #if !macro function():Time return _tt.local() #else null #end;
                            __self__.location = #if !macro function():Ref<Location> return _tt.location() #else null #end;
                            __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt.marshalBinary() #else null #end;
                            __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt.marshalJSON() #else null #end;
                            __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt.marshalText() #else null #end;
                            __self__.minute = #if !macro function():GoInt return _tt.minute() #else null #end;
                            __self__.month = #if !macro function():Month return _tt.month() #else null #end;
                            __self__.nanosecond = #if !macro function():GoInt return _tt.nanosecond() #else null #end;
                            __self__.round = #if !macro function(_d:Duration):Time return _tt.round(_d) #else null #end;
                            __self__.second = #if !macro function():GoInt return _tt.second() #else null #end;
                            __self__.string = #if !macro function():GoString return _tt.string() #else null #end;
                            __self__.sub = #if !macro function(__0:Time):Duration return _tt.sub(__0) #else null #end;
                            __self__.truncate = #if !macro function(_d:Duration):Time return _tt.truncate(_d) #else null #end;
                            __self__.utc = #if !macro function():Time return _tt.utc() #else null #end;
                            __self__.unix = #if !macro function():GoInt64 return _tt.unix() #else null #end;
                            __self__.unixMicro = #if !macro function():GoInt64 return _tt.unixMicro() #else null #end;
                            __self__.unixMilli = #if !macro function():GoInt64 return _tt.unixMilli() #else null #end;
                            __self__.unixNano = #if !macro function():GoInt64 return _tt.unixNano() #else null #end;
                            __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt.unmarshalBinary(__0) #else null #end;
                            __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt.unmarshalJSON(__0) #else null #end;
                            __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt.unmarshalText(__0) #else null #end;
                            __self__.weekday = #if !macro function():Weekday return _tt.weekday() #else null #end;
                            __self__.year = #if !macro function():GoInt return _tt.year() #else null #end;
                            __self__.yearDay = #if !macro function():GoInt return _tt.yearDay() #else null #end;
                            __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _tt.zone() #else null #end;
                            __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _tt.zoneBounds() #else null #end;
                            __self__._abs = #if !macro function():GoUInt64 return _tt._abs() #else null #end;
                            __self__._addSec = #if !macro function(_sec:GoInt64):Void _tt._addSec(_sec) #else null #end;
                            __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _tt._date(__0) #else null #end;
                            __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _tt._locabs() #else null #end;
                            __self__._mono = #if !macro function():GoInt64 return _tt._mono() #else null #end;
                            __self__._nsec = #if !macro function():GoInt32 return _tt._nsec() #else null #end;
                            __self__._sec = #if !macro function():GoInt64 return _tt._sec() #else null #end;
                            __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _tt._setLoc(__0) #else null #end;
                            __self__._setMono = #if !macro function(_sec:GoInt64):Void _tt._setMono(_sec) #else null #end;
                            __self__._stripMono = #if !macro function():Void _tt._stripMono() #else null #end;
                            __self__._unixSec = #if !macro function():GoInt64 return _tt._unixSec() #else null #end;
                            __self__;
                        }), Go.toInterface(_err));
                    } else if (!_equalTimeAndZone((_gobtt == null ? null : _gobtt.__copy__()), (_tt == null ? null : _tt.__copy__()))) {
                        _t.errorf(((((("Decoded time = %v, want %v" : GoString))) : GoString)), Go.toInterface({
                            final __self__ = new Time_wrapper(_gobtt);
                            __self__.add = #if !macro function(_d:Duration):Time return _gobtt.add(_d) #else null #end;
                            __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _gobtt.addDate(_years, _months, _days) #else null #end;
                            __self__.after = #if !macro function(__0:Time):Bool return _gobtt.after(__0) #else null #end;
                            __self__.appendFormat = #if !macro function(_b_:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _gobtt.appendFormat(_b_, _layout) #else null #end;
                            __self__.before = #if !macro function(__0:Time):Bool return _gobtt.before(__0) #else null #end;
                            __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _gobtt.clock() #else null #end;
                            __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _gobtt.date() #else null #end;
                            __self__.day = #if !macro function():GoInt return _gobtt.day() #else null #end;
                            __self__.equal = #if !macro function(__0:Time):Bool return _gobtt.equal(__0) #else null #end;
                            __self__.format = #if !macro function(__0:GoString):GoString return _gobtt.format(__0) #else null #end;
                            __self__.goString = #if !macro function():GoString return _gobtt.goString() #else null #end;
                            __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _gobtt.gobDecode(__0) #else null #end;
                            __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _gobtt.gobEncode() #else null #end;
                            __self__.hour = #if !macro function():GoInt return _gobtt.hour() #else null #end;
                            __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _gobtt.isoweek() #else null #end;
                            __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _gobtt.in_(__0) #else null #end;
                            __self__.isDST = #if !macro function():Bool return _gobtt.isDST() #else null #end;
                            __self__.isZero = #if !macro function():Bool return _gobtt.isZero() #else null #end;
                            __self__.local = #if !macro function():Time return _gobtt.local() #else null #end;
                            __self__.location = #if !macro function():Ref<Location> return _gobtt.location() #else null #end;
                            __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _gobtt.marshalBinary() #else null #end;
                            __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _gobtt.marshalJSON() #else null #end;
                            __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _gobtt.marshalText() #else null #end;
                            __self__.minute = #if !macro function():GoInt return _gobtt.minute() #else null #end;
                            __self__.month = #if !macro function():Month return _gobtt.month() #else null #end;
                            __self__.nanosecond = #if !macro function():GoInt return _gobtt.nanosecond() #else null #end;
                            __self__.round = #if !macro function(_d:Duration):Time return _gobtt.round(_d) #else null #end;
                            __self__.second = #if !macro function():GoInt return _gobtt.second() #else null #end;
                            __self__.string = #if !macro function():GoString return _gobtt.string() #else null #end;
                            __self__.sub = #if !macro function(__0:Time):Duration return _gobtt.sub(__0) #else null #end;
                            __self__.truncate = #if !macro function(_d:Duration):Time return _gobtt.truncate(_d) #else null #end;
                            __self__.utc = #if !macro function():Time return _gobtt.utc() #else null #end;
                            __self__.unix = #if !macro function():GoInt64 return _gobtt.unix() #else null #end;
                            __self__.unixMicro = #if !macro function():GoInt64 return _gobtt.unixMicro() #else null #end;
                            __self__.unixMilli = #if !macro function():GoInt64 return _gobtt.unixMilli() #else null #end;
                            __self__.unixNano = #if !macro function():GoInt64 return _gobtt.unixNano() #else null #end;
                            __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _gobtt.unmarshalBinary(__0) #else null #end;
                            __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _gobtt.unmarshalJSON(__0) #else null #end;
                            __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _gobtt.unmarshalText(__0) #else null #end;
                            __self__.weekday = #if !macro function():Weekday return _gobtt.weekday() #else null #end;
                            __self__.year = #if !macro function():GoInt return _gobtt.year() #else null #end;
                            __self__.yearDay = #if !macro function():GoInt return _gobtt.yearDay() #else null #end;
                            __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _gobtt.zone() #else null #end;
                            __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _gobtt.zoneBounds() #else null #end;
                            __self__._abs = #if !macro function():GoUInt64 return _gobtt._abs() #else null #end;
                            __self__._addSec = #if !macro function(_sec:GoInt64):Void _gobtt._addSec(_sec) #else null #end;
                            __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _gobtt._date(__0) #else null #end;
                            __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _gobtt._locabs() #else null #end;
                            __self__._mono = #if !macro function():GoInt64 return _gobtt._mono() #else null #end;
                            __self__._nsec = #if !macro function():GoInt32 return _gobtt._nsec() #else null #end;
                            __self__._sec = #if !macro function():GoInt64 return _gobtt._sec() #else null #end;
                            __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _gobtt._setLoc(__0) #else null #end;
                            __self__._setMono = #if !macro function(_sec:GoInt64):Void _gobtt._setMono(_sec) #else null #end;
                            __self__._stripMono = #if !macro function():Void _gobtt._stripMono() #else null #end;
                            __self__._unixSec = #if !macro function():GoInt64 return _gobtt._unixSec() #else null #end;
                            __self__;
                        }), Go.toInterface({
                            final __self__ = new Time_wrapper(_tt);
                            __self__.add = #if !macro function(_d:Duration):Time return _tt.add(_d) #else null #end;
                            __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _tt.addDate(_years, _months, _days) #else null #end;
                            __self__.after = #if !macro function(__0:Time):Bool return _tt.after(__0) #else null #end;
                            __self__.appendFormat = #if !macro function(_b_:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _tt.appendFormat(_b_, _layout) #else null #end;
                            __self__.before = #if !macro function(__0:Time):Bool return _tt.before(__0) #else null #end;
                            __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _tt.clock() #else null #end;
                            __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _tt.date() #else null #end;
                            __self__.day = #if !macro function():GoInt return _tt.day() #else null #end;
                            __self__.equal = #if !macro function(__0:Time):Bool return _tt.equal(__0) #else null #end;
                            __self__.format = #if !macro function(__0:GoString):GoString return _tt.format(__0) #else null #end;
                            __self__.goString = #if !macro function():GoString return _tt.goString() #else null #end;
                            __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt.gobDecode(__0) #else null #end;
                            __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt.gobEncode() #else null #end;
                            __self__.hour = #if !macro function():GoInt return _tt.hour() #else null #end;
                            __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _tt.isoweek() #else null #end;
                            __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _tt.in_(__0) #else null #end;
                            __self__.isDST = #if !macro function():Bool return _tt.isDST() #else null #end;
                            __self__.isZero = #if !macro function():Bool return _tt.isZero() #else null #end;
                            __self__.local = #if !macro function():Time return _tt.local() #else null #end;
                            __self__.location = #if !macro function():Ref<Location> return _tt.location() #else null #end;
                            __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt.marshalBinary() #else null #end;
                            __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt.marshalJSON() #else null #end;
                            __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt.marshalText() #else null #end;
                            __self__.minute = #if !macro function():GoInt return _tt.minute() #else null #end;
                            __self__.month = #if !macro function():Month return _tt.month() #else null #end;
                            __self__.nanosecond = #if !macro function():GoInt return _tt.nanosecond() #else null #end;
                            __self__.round = #if !macro function(_d:Duration):Time return _tt.round(_d) #else null #end;
                            __self__.second = #if !macro function():GoInt return _tt.second() #else null #end;
                            __self__.string = #if !macro function():GoString return _tt.string() #else null #end;
                            __self__.sub = #if !macro function(__0:Time):Duration return _tt.sub(__0) #else null #end;
                            __self__.truncate = #if !macro function(_d:Duration):Time return _tt.truncate(_d) #else null #end;
                            __self__.utc = #if !macro function():Time return _tt.utc() #else null #end;
                            __self__.unix = #if !macro function():GoInt64 return _tt.unix() #else null #end;
                            __self__.unixMicro = #if !macro function():GoInt64 return _tt.unixMicro() #else null #end;
                            __self__.unixMilli = #if !macro function():GoInt64 return _tt.unixMilli() #else null #end;
                            __self__.unixNano = #if !macro function():GoInt64 return _tt.unixNano() #else null #end;
                            __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt.unmarshalBinary(__0) #else null #end;
                            __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt.unmarshalJSON(__0) #else null #end;
                            __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt.unmarshalText(__0) #else null #end;
                            __self__.weekday = #if !macro function():Weekday return _tt.weekday() #else null #end;
                            __self__.year = #if !macro function():GoInt return _tt.year() #else null #end;
                            __self__.yearDay = #if !macro function():GoInt return _tt.yearDay() #else null #end;
                            __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _tt.zone() #else null #end;
                            __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _tt.zoneBounds() #else null #end;
                            __self__._abs = #if !macro function():GoUInt64 return _tt._abs() #else null #end;
                            __self__._addSec = #if !macro function(_sec:GoInt64):Void _tt._addSec(_sec) #else null #end;
                            __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _tt._date(__0) #else null #end;
                            __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _tt._locabs() #else null #end;
                            __self__._mono = #if !macro function():GoInt64 return _tt._mono() #else null #end;
                            __self__._nsec = #if !macro function():GoInt32 return _tt._nsec() #else null #end;
                            __self__._sec = #if !macro function():GoInt64 return _tt._sec() #else null #end;
                            __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _tt._setLoc(__0) #else null #end;
                            __self__._setMono = #if !macro function(_sec:GoInt64):Void _tt._setMono(_sec) #else null #end;
                            __self__._stripMono = #if !macro function():Void _tt._stripMono() #else null #end;
                            __self__._unixSec = #if !macro function():GoInt64 return _tt._unixSec() #else null #end;
                            __self__;
                        }));
                    };
                };
            };
            _b.reset();
        };
    }
function testInvalidTimeGob(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _tt in _invalidEncodingTests) {
            var _ignored:Time = (({  } : Time));
            var _err:stdgo.Error = _ignored.gobDecode(_tt._bytes);
            if ((_err == null) || (_err.error() != _tt._want)) {
                _t.errorf(((((("time.GobDecode(%#v) error = %v, want %v" : GoString))) : GoString)), Go.toInterface(_tt._bytes), Go.toInterface(_err), Go.toInterface(_tt._want));
            };
            _err = _ignored.unmarshalBinary(_tt._bytes);
            if ((_err == null) || (_err.error() != _tt._want)) {
                _t.errorf(((((("time.UnmarshalBinary(%#v) error = %v, want %v" : GoString))) : GoString)), Go.toInterface(_tt._bytes), Go.toInterface(_err), Go.toInterface(_tt._want));
            };
        };
    }
function testNotGobEncodableTime(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _tt in _notEncodableTimes) {
            var __tmp__ = _tt._time.gobEncode(), _1:Slice<GoUInt8> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if ((_err == null) || (_err.error() != _tt._want)) {
                _t.errorf(((((("%v GobEncode error = %v, want %v" : GoString))) : GoString)), Go.toInterface({
                    final __self__ = new Time_wrapper(_tt._time);
                    __self__.add = #if !macro function(_d:Duration):Time return _tt._time.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _tt._time.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _tt._time.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _tt._time.appendFormat(_b, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _tt._time.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _tt._time.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _tt._time.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _tt._time.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _tt._time.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _tt._time.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _tt._time.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _tt._time.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _tt._time.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _tt._time.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _tt._time.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _tt._time.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _tt._time.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _tt._time.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _tt._time.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _tt._time.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _tt._time.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _tt._time.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _tt._time.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _tt._time.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _tt._time.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _tt._time.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _tt._time.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _tt._time.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _tt._time.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _tt._time.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _tt._time.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _tt._time.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _tt._time.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _tt._time.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _tt._time.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _tt._time.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _tt._time._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec:GoInt64):Void _tt._time._addSec(_sec) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _tt._time._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _tt._time._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _tt._time._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _tt._time._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _tt._time._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _tt._time._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec:GoInt64):Void _tt._time._setMono(_sec) #else null #end;
                    __self__._stripMono = #if !macro function():Void _tt._time._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _tt._time._unixSec() #else null #end;
                    __self__;
                }), Go.toInterface(_err), Go.toInterface(_tt._want));
            };
            {
                var __tmp__ = _tt._time.marshalBinary();
                _err = __tmp__._1;
            };
            if ((_err == null) || (_err.error() != _tt._want)) {
                _t.errorf(((((("%v MarshalBinary error = %v, want %v" : GoString))) : GoString)), Go.toInterface({
                    final __self__ = new Time_wrapper(_tt._time);
                    __self__.add = #if !macro function(_d:Duration):Time return _tt._time.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _tt._time.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _tt._time.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _tt._time.appendFormat(_b, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _tt._time.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _tt._time.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _tt._time.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _tt._time.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _tt._time.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _tt._time.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _tt._time.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _tt._time.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _tt._time.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _tt._time.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _tt._time.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _tt._time.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _tt._time.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _tt._time.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _tt._time.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _tt._time.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _tt._time.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _tt._time.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _tt._time.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _tt._time.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _tt._time.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _tt._time.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _tt._time.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _tt._time.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _tt._time.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _tt._time.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _tt._time.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _tt._time.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _tt._time.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _tt._time.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _tt._time.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _tt._time.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _tt._time._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec:GoInt64):Void _tt._time._addSec(_sec) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _tt._time._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _tt._time._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _tt._time._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _tt._time._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _tt._time._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _tt._time._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec:GoInt64):Void _tt._time._setMono(_sec) #else null #end;
                    __self__._stripMono = #if !macro function():Void _tt._time._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _tt._time._unixSec() #else null #end;
                    __self__;
                }), Go.toInterface(_err), Go.toInterface(_tt._want));
            };
        };
    }
function testTimeJSON(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _tt in _jsonTests) {
            var _jsonTime:Time = (({  } : Time));
            {
                var __tmp__ = stdgo.encoding.json.Json.marshal(Go.toInterface({
                    final __self__ = new Time_wrapper(_tt._time);
                    __self__.add = #if !macro function(_d:Duration):Time return _tt._time.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _tt._time.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _tt._time.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _tt._time.appendFormat(_b, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _tt._time.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _tt._time.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _tt._time.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _tt._time.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _tt._time.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _tt._time.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _tt._time.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _tt._time.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _tt._time.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _tt._time.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _tt._time.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _tt._time.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _tt._time.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _tt._time.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _tt._time.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _tt._time.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _tt._time.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _tt._time.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _tt._time.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _tt._time.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _tt._time.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _tt._time.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _tt._time.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _tt._time.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _tt._time.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _tt._time.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _tt._time.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _tt._time.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _tt._time.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _tt._time.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _tt._time.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _tt._time.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _tt._time._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec:GoInt64):Void _tt._time._addSec(_sec) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _tt._time._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _tt._time._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _tt._time._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _tt._time._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _tt._time._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _tt._time._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec:GoInt64):Void _tt._time._setMono(_sec) #else null #end;
                    __self__._stripMono = #if !macro function():Void _tt._time._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _tt._time._unixSec() #else null #end;
                    __self__;
                })), _jsonBytes:Slice<GoUInt8> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
                if (_err != null) {
                    _t.errorf(((((("%v json.Marshal error = %v, want nil" : GoString))) : GoString)), Go.toInterface({
                        final __self__ = new Time_wrapper(_tt._time);
                        __self__.add = #if !macro function(_d:Duration):Time return _tt._time.add(_d) #else null #end;
                        __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _tt._time.addDate(_years, _months, _days) #else null #end;
                        __self__.after = #if !macro function(__0:Time):Bool return _tt._time.after(__0) #else null #end;
                        __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _tt._time.appendFormat(_b, _layout) #else null #end;
                        __self__.before = #if !macro function(__0:Time):Bool return _tt._time.before(__0) #else null #end;
                        __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _tt._time.clock() #else null #end;
                        __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _tt._time.date() #else null #end;
                        __self__.day = #if !macro function():GoInt return _tt._time.day() #else null #end;
                        __self__.equal = #if !macro function(__0:Time):Bool return _tt._time.equal(__0) #else null #end;
                        __self__.format = #if !macro function(__0:GoString):GoString return _tt._time.format(__0) #else null #end;
                        __self__.goString = #if !macro function():GoString return _tt._time.goString() #else null #end;
                        __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.gobDecode(__0) #else null #end;
                        __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.gobEncode() #else null #end;
                        __self__.hour = #if !macro function():GoInt return _tt._time.hour() #else null #end;
                        __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _tt._time.isoweek() #else null #end;
                        __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _tt._time.in_(__0) #else null #end;
                        __self__.isDST = #if !macro function():Bool return _tt._time.isDST() #else null #end;
                        __self__.isZero = #if !macro function():Bool return _tt._time.isZero() #else null #end;
                        __self__.local = #if !macro function():Time return _tt._time.local() #else null #end;
                        __self__.location = #if !macro function():Ref<Location> return _tt._time.location() #else null #end;
                        __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.marshalBinary() #else null #end;
                        __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.marshalJSON() #else null #end;
                        __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.marshalText() #else null #end;
                        __self__.minute = #if !macro function():GoInt return _tt._time.minute() #else null #end;
                        __self__.month = #if !macro function():Month return _tt._time.month() #else null #end;
                        __self__.nanosecond = #if !macro function():GoInt return _tt._time.nanosecond() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Time return _tt._time.round(_d) #else null #end;
                        __self__.second = #if !macro function():GoInt return _tt._time.second() #else null #end;
                        __self__.string = #if !macro function():GoString return _tt._time.string() #else null #end;
                        __self__.sub = #if !macro function(__0:Time):Duration return _tt._time.sub(__0) #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Time return _tt._time.truncate(_d) #else null #end;
                        __self__.utc = #if !macro function():Time return _tt._time.utc() #else null #end;
                        __self__.unix = #if !macro function():GoInt64 return _tt._time.unix() #else null #end;
                        __self__.unixMicro = #if !macro function():GoInt64 return _tt._time.unixMicro() #else null #end;
                        __self__.unixMilli = #if !macro function():GoInt64 return _tt._time.unixMilli() #else null #end;
                        __self__.unixNano = #if !macro function():GoInt64 return _tt._time.unixNano() #else null #end;
                        __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.unmarshalBinary(__0) #else null #end;
                        __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.unmarshalJSON(__0) #else null #end;
                        __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.unmarshalText(__0) #else null #end;
                        __self__.weekday = #if !macro function():Weekday return _tt._time.weekday() #else null #end;
                        __self__.year = #if !macro function():GoInt return _tt._time.year() #else null #end;
                        __self__.yearDay = #if !macro function():GoInt return _tt._time.yearDay() #else null #end;
                        __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _tt._time.zone() #else null #end;
                        __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _tt._time.zoneBounds() #else null #end;
                        __self__._abs = #if !macro function():GoUInt64 return _tt._time._abs() #else null #end;
                        __self__._addSec = #if !macro function(_sec:GoInt64):Void _tt._time._addSec(_sec) #else null #end;
                        __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _tt._time._date(__0) #else null #end;
                        __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _tt._time._locabs() #else null #end;
                        __self__._mono = #if !macro function():GoInt64 return _tt._time._mono() #else null #end;
                        __self__._nsec = #if !macro function():GoInt32 return _tt._time._nsec() #else null #end;
                        __self__._sec = #if !macro function():GoInt64 return _tt._time._sec() #else null #end;
                        __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _tt._time._setLoc(__0) #else null #end;
                        __self__._setMono = #if !macro function(_sec:GoInt64):Void _tt._time._setMono(_sec) #else null #end;
                        __self__._stripMono = #if !macro function():Void _tt._time._stripMono() #else null #end;
                        __self__._unixSec = #if !macro function():GoInt64 return _tt._time._unixSec() #else null #end;
                        __self__;
                    }), Go.toInterface(_err));
                } else if (((_jsonBytes : GoString)) != _tt._json) {
                    _t.errorf(((((("%v JSON = %#q, want %#q" : GoString))) : GoString)), Go.toInterface({
                        final __self__ = new Time_wrapper(_tt._time);
                        __self__.add = #if !macro function(_d:Duration):Time return _tt._time.add(_d) #else null #end;
                        __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _tt._time.addDate(_years, _months, _days) #else null #end;
                        __self__.after = #if !macro function(__0:Time):Bool return _tt._time.after(__0) #else null #end;
                        __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _tt._time.appendFormat(_b, _layout) #else null #end;
                        __self__.before = #if !macro function(__0:Time):Bool return _tt._time.before(__0) #else null #end;
                        __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _tt._time.clock() #else null #end;
                        __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _tt._time.date() #else null #end;
                        __self__.day = #if !macro function():GoInt return _tt._time.day() #else null #end;
                        __self__.equal = #if !macro function(__0:Time):Bool return _tt._time.equal(__0) #else null #end;
                        __self__.format = #if !macro function(__0:GoString):GoString return _tt._time.format(__0) #else null #end;
                        __self__.goString = #if !macro function():GoString return _tt._time.goString() #else null #end;
                        __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.gobDecode(__0) #else null #end;
                        __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.gobEncode() #else null #end;
                        __self__.hour = #if !macro function():GoInt return _tt._time.hour() #else null #end;
                        __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _tt._time.isoweek() #else null #end;
                        __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _tt._time.in_(__0) #else null #end;
                        __self__.isDST = #if !macro function():Bool return _tt._time.isDST() #else null #end;
                        __self__.isZero = #if !macro function():Bool return _tt._time.isZero() #else null #end;
                        __self__.local = #if !macro function():Time return _tt._time.local() #else null #end;
                        __self__.location = #if !macro function():Ref<Location> return _tt._time.location() #else null #end;
                        __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.marshalBinary() #else null #end;
                        __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.marshalJSON() #else null #end;
                        __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.marshalText() #else null #end;
                        __self__.minute = #if !macro function():GoInt return _tt._time.minute() #else null #end;
                        __self__.month = #if !macro function():Month return _tt._time.month() #else null #end;
                        __self__.nanosecond = #if !macro function():GoInt return _tt._time.nanosecond() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Time return _tt._time.round(_d) #else null #end;
                        __self__.second = #if !macro function():GoInt return _tt._time.second() #else null #end;
                        __self__.string = #if !macro function():GoString return _tt._time.string() #else null #end;
                        __self__.sub = #if !macro function(__0:Time):Duration return _tt._time.sub(__0) #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Time return _tt._time.truncate(_d) #else null #end;
                        __self__.utc = #if !macro function():Time return _tt._time.utc() #else null #end;
                        __self__.unix = #if !macro function():GoInt64 return _tt._time.unix() #else null #end;
                        __self__.unixMicro = #if !macro function():GoInt64 return _tt._time.unixMicro() #else null #end;
                        __self__.unixMilli = #if !macro function():GoInt64 return _tt._time.unixMilli() #else null #end;
                        __self__.unixNano = #if !macro function():GoInt64 return _tt._time.unixNano() #else null #end;
                        __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.unmarshalBinary(__0) #else null #end;
                        __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.unmarshalJSON(__0) #else null #end;
                        __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.unmarshalText(__0) #else null #end;
                        __self__.weekday = #if !macro function():Weekday return _tt._time.weekday() #else null #end;
                        __self__.year = #if !macro function():GoInt return _tt._time.year() #else null #end;
                        __self__.yearDay = #if !macro function():GoInt return _tt._time.yearDay() #else null #end;
                        __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _tt._time.zone() #else null #end;
                        __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _tt._time.zoneBounds() #else null #end;
                        __self__._abs = #if !macro function():GoUInt64 return _tt._time._abs() #else null #end;
                        __self__._addSec = #if !macro function(_sec:GoInt64):Void _tt._time._addSec(_sec) #else null #end;
                        __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _tt._time._date(__0) #else null #end;
                        __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _tt._time._locabs() #else null #end;
                        __self__._mono = #if !macro function():GoInt64 return _tt._time._mono() #else null #end;
                        __self__._nsec = #if !macro function():GoInt32 return _tt._time._nsec() #else null #end;
                        __self__._sec = #if !macro function():GoInt64 return _tt._time._sec() #else null #end;
                        __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _tt._time._setLoc(__0) #else null #end;
                        __self__._setMono = #if !macro function(_sec:GoInt64):Void _tt._time._setMono(_sec) #else null #end;
                        __self__._stripMono = #if !macro function():Void _tt._time._stripMono() #else null #end;
                        __self__._unixSec = #if !macro function():GoInt64 return _tt._time._unixSec() #else null #end;
                        __self__;
                    }), Go.toInterface(((_jsonBytes : GoString))), Go.toInterface(_tt._json));
                } else {
                    _err = stdgo.encoding.json.Json.unmarshal(_jsonBytes, Go.toInterface(_jsonTime));
                    if (_err != null) {
                        _t.errorf(((((("%v json.Unmarshal error = %v, want nil" : GoString))) : GoString)), Go.toInterface({
                            final __self__ = new Time_wrapper(_tt._time);
                            __self__.add = #if !macro function(_d:Duration):Time return _tt._time.add(_d) #else null #end;
                            __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _tt._time.addDate(_years, _months, _days) #else null #end;
                            __self__.after = #if !macro function(__0:Time):Bool return _tt._time.after(__0) #else null #end;
                            __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _tt._time.appendFormat(_b, _layout) #else null #end;
                            __self__.before = #if !macro function(__0:Time):Bool return _tt._time.before(__0) #else null #end;
                            __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _tt._time.clock() #else null #end;
                            __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _tt._time.date() #else null #end;
                            __self__.day = #if !macro function():GoInt return _tt._time.day() #else null #end;
                            __self__.equal = #if !macro function(__0:Time):Bool return _tt._time.equal(__0) #else null #end;
                            __self__.format = #if !macro function(__0:GoString):GoString return _tt._time.format(__0) #else null #end;
                            __self__.goString = #if !macro function():GoString return _tt._time.goString() #else null #end;
                            __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.gobDecode(__0) #else null #end;
                            __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.gobEncode() #else null #end;
                            __self__.hour = #if !macro function():GoInt return _tt._time.hour() #else null #end;
                            __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _tt._time.isoweek() #else null #end;
                            __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _tt._time.in_(__0) #else null #end;
                            __self__.isDST = #if !macro function():Bool return _tt._time.isDST() #else null #end;
                            __self__.isZero = #if !macro function():Bool return _tt._time.isZero() #else null #end;
                            __self__.local = #if !macro function():Time return _tt._time.local() #else null #end;
                            __self__.location = #if !macro function():Ref<Location> return _tt._time.location() #else null #end;
                            __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.marshalBinary() #else null #end;
                            __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.marshalJSON() #else null #end;
                            __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.marshalText() #else null #end;
                            __self__.minute = #if !macro function():GoInt return _tt._time.minute() #else null #end;
                            __self__.month = #if !macro function():Month return _tt._time.month() #else null #end;
                            __self__.nanosecond = #if !macro function():GoInt return _tt._time.nanosecond() #else null #end;
                            __self__.round = #if !macro function(_d:Duration):Time return _tt._time.round(_d) #else null #end;
                            __self__.second = #if !macro function():GoInt return _tt._time.second() #else null #end;
                            __self__.string = #if !macro function():GoString return _tt._time.string() #else null #end;
                            __self__.sub = #if !macro function(__0:Time):Duration return _tt._time.sub(__0) #else null #end;
                            __self__.truncate = #if !macro function(_d:Duration):Time return _tt._time.truncate(_d) #else null #end;
                            __self__.utc = #if !macro function():Time return _tt._time.utc() #else null #end;
                            __self__.unix = #if !macro function():GoInt64 return _tt._time.unix() #else null #end;
                            __self__.unixMicro = #if !macro function():GoInt64 return _tt._time.unixMicro() #else null #end;
                            __self__.unixMilli = #if !macro function():GoInt64 return _tt._time.unixMilli() #else null #end;
                            __self__.unixNano = #if !macro function():GoInt64 return _tt._time.unixNano() #else null #end;
                            __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.unmarshalBinary(__0) #else null #end;
                            __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.unmarshalJSON(__0) #else null #end;
                            __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.unmarshalText(__0) #else null #end;
                            __self__.weekday = #if !macro function():Weekday return _tt._time.weekday() #else null #end;
                            __self__.year = #if !macro function():GoInt return _tt._time.year() #else null #end;
                            __self__.yearDay = #if !macro function():GoInt return _tt._time.yearDay() #else null #end;
                            __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _tt._time.zone() #else null #end;
                            __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _tt._time.zoneBounds() #else null #end;
                            __self__._abs = #if !macro function():GoUInt64 return _tt._time._abs() #else null #end;
                            __self__._addSec = #if !macro function(_sec:GoInt64):Void _tt._time._addSec(_sec) #else null #end;
                            __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _tt._time._date(__0) #else null #end;
                            __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _tt._time._locabs() #else null #end;
                            __self__._mono = #if !macro function():GoInt64 return _tt._time._mono() #else null #end;
                            __self__._nsec = #if !macro function():GoInt32 return _tt._time._nsec() #else null #end;
                            __self__._sec = #if !macro function():GoInt64 return _tt._time._sec() #else null #end;
                            __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _tt._time._setLoc(__0) #else null #end;
                            __self__._setMono = #if !macro function(_sec:GoInt64):Void _tt._time._setMono(_sec) #else null #end;
                            __self__._stripMono = #if !macro function():Void _tt._time._stripMono() #else null #end;
                            __self__._unixSec = #if !macro function():GoInt64 return _tt._time._unixSec() #else null #end;
                            __self__;
                        }), Go.toInterface(_err));
                    } else if (!_equalTimeAndZone((_jsonTime == null ? null : _jsonTime.__copy__()), (_tt._time == null ? null : _tt._time.__copy__()))) {
                        _t.errorf(((((("Unmarshaled time = %v, want %v" : GoString))) : GoString)), Go.toInterface({
                            final __self__ = new Time_wrapper(_jsonTime);
                            __self__.add = #if !macro function(_d:Duration):Time return _jsonTime.add(_d) #else null #end;
                            __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _jsonTime.addDate(_years, _months, _days) #else null #end;
                            __self__.after = #if !macro function(__0:Time):Bool return _jsonTime.after(__0) #else null #end;
                            __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _jsonTime.appendFormat(_b, _layout) #else null #end;
                            __self__.before = #if !macro function(__0:Time):Bool return _jsonTime.before(__0) #else null #end;
                            __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _jsonTime.clock() #else null #end;
                            __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _jsonTime.date() #else null #end;
                            __self__.day = #if !macro function():GoInt return _jsonTime.day() #else null #end;
                            __self__.equal = #if !macro function(__0:Time):Bool return _jsonTime.equal(__0) #else null #end;
                            __self__.format = #if !macro function(__0:GoString):GoString return _jsonTime.format(__0) #else null #end;
                            __self__.goString = #if !macro function():GoString return _jsonTime.goString() #else null #end;
                            __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _jsonTime.gobDecode(__0) #else null #end;
                            __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _jsonTime.gobEncode() #else null #end;
                            __self__.hour = #if !macro function():GoInt return _jsonTime.hour() #else null #end;
                            __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _jsonTime.isoweek() #else null #end;
                            __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _jsonTime.in_(__0) #else null #end;
                            __self__.isDST = #if !macro function():Bool return _jsonTime.isDST() #else null #end;
                            __self__.isZero = #if !macro function():Bool return _jsonTime.isZero() #else null #end;
                            __self__.local = #if !macro function():Time return _jsonTime.local() #else null #end;
                            __self__.location = #if !macro function():Ref<Location> return _jsonTime.location() #else null #end;
                            __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _jsonTime.marshalBinary() #else null #end;
                            __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _jsonTime.marshalJSON() #else null #end;
                            __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _jsonTime.marshalText() #else null #end;
                            __self__.minute = #if !macro function():GoInt return _jsonTime.minute() #else null #end;
                            __self__.month = #if !macro function():Month return _jsonTime.month() #else null #end;
                            __self__.nanosecond = #if !macro function():GoInt return _jsonTime.nanosecond() #else null #end;
                            __self__.round = #if !macro function(_d:Duration):Time return _jsonTime.round(_d) #else null #end;
                            __self__.second = #if !macro function():GoInt return _jsonTime.second() #else null #end;
                            __self__.string = #if !macro function():GoString return _jsonTime.string() #else null #end;
                            __self__.sub = #if !macro function(__0:Time):Duration return _jsonTime.sub(__0) #else null #end;
                            __self__.truncate = #if !macro function(_d:Duration):Time return _jsonTime.truncate(_d) #else null #end;
                            __self__.utc = #if !macro function():Time return _jsonTime.utc() #else null #end;
                            __self__.unix = #if !macro function():GoInt64 return _jsonTime.unix() #else null #end;
                            __self__.unixMicro = #if !macro function():GoInt64 return _jsonTime.unixMicro() #else null #end;
                            __self__.unixMilli = #if !macro function():GoInt64 return _jsonTime.unixMilli() #else null #end;
                            __self__.unixNano = #if !macro function():GoInt64 return _jsonTime.unixNano() #else null #end;
                            __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _jsonTime.unmarshalBinary(__0) #else null #end;
                            __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _jsonTime.unmarshalJSON(__0) #else null #end;
                            __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _jsonTime.unmarshalText(__0) #else null #end;
                            __self__.weekday = #if !macro function():Weekday return _jsonTime.weekday() #else null #end;
                            __self__.year = #if !macro function():GoInt return _jsonTime.year() #else null #end;
                            __self__.yearDay = #if !macro function():GoInt return _jsonTime.yearDay() #else null #end;
                            __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _jsonTime.zone() #else null #end;
                            __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _jsonTime.zoneBounds() #else null #end;
                            __self__._abs = #if !macro function():GoUInt64 return _jsonTime._abs() #else null #end;
                            __self__._addSec = #if !macro function(_sec:GoInt64):Void _jsonTime._addSec(_sec) #else null #end;
                            __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _jsonTime._date(__0) #else null #end;
                            __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _jsonTime._locabs() #else null #end;
                            __self__._mono = #if !macro function():GoInt64 return _jsonTime._mono() #else null #end;
                            __self__._nsec = #if !macro function():GoInt32 return _jsonTime._nsec() #else null #end;
                            __self__._sec = #if !macro function():GoInt64 return _jsonTime._sec() #else null #end;
                            __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _jsonTime._setLoc(__0) #else null #end;
                            __self__._setMono = #if !macro function(_sec:GoInt64):Void _jsonTime._setMono(_sec) #else null #end;
                            __self__._stripMono = #if !macro function():Void _jsonTime._stripMono() #else null #end;
                            __self__._unixSec = #if !macro function():GoInt64 return _jsonTime._unixSec() #else null #end;
                            __self__;
                        }), Go.toInterface({
                            final __self__ = new Time_wrapper(_tt._time);
                            __self__.add = #if !macro function(_d:Duration):Time return _tt._time.add(_d) #else null #end;
                            __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _tt._time.addDate(_years, _months, _days) #else null #end;
                            __self__.after = #if !macro function(__0:Time):Bool return _tt._time.after(__0) #else null #end;
                            __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _tt._time.appendFormat(_b, _layout) #else null #end;
                            __self__.before = #if !macro function(__0:Time):Bool return _tt._time.before(__0) #else null #end;
                            __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _tt._time.clock() #else null #end;
                            __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _tt._time.date() #else null #end;
                            __self__.day = #if !macro function():GoInt return _tt._time.day() #else null #end;
                            __self__.equal = #if !macro function(__0:Time):Bool return _tt._time.equal(__0) #else null #end;
                            __self__.format = #if !macro function(__0:GoString):GoString return _tt._time.format(__0) #else null #end;
                            __self__.goString = #if !macro function():GoString return _tt._time.goString() #else null #end;
                            __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.gobDecode(__0) #else null #end;
                            __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.gobEncode() #else null #end;
                            __self__.hour = #if !macro function():GoInt return _tt._time.hour() #else null #end;
                            __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _tt._time.isoweek() #else null #end;
                            __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _tt._time.in_(__0) #else null #end;
                            __self__.isDST = #if !macro function():Bool return _tt._time.isDST() #else null #end;
                            __self__.isZero = #if !macro function():Bool return _tt._time.isZero() #else null #end;
                            __self__.local = #if !macro function():Time return _tt._time.local() #else null #end;
                            __self__.location = #if !macro function():Ref<Location> return _tt._time.location() #else null #end;
                            __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.marshalBinary() #else null #end;
                            __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.marshalJSON() #else null #end;
                            __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.marshalText() #else null #end;
                            __self__.minute = #if !macro function():GoInt return _tt._time.minute() #else null #end;
                            __self__.month = #if !macro function():Month return _tt._time.month() #else null #end;
                            __self__.nanosecond = #if !macro function():GoInt return _tt._time.nanosecond() #else null #end;
                            __self__.round = #if !macro function(_d:Duration):Time return _tt._time.round(_d) #else null #end;
                            __self__.second = #if !macro function():GoInt return _tt._time.second() #else null #end;
                            __self__.string = #if !macro function():GoString return _tt._time.string() #else null #end;
                            __self__.sub = #if !macro function(__0:Time):Duration return _tt._time.sub(__0) #else null #end;
                            __self__.truncate = #if !macro function(_d:Duration):Time return _tt._time.truncate(_d) #else null #end;
                            __self__.utc = #if !macro function():Time return _tt._time.utc() #else null #end;
                            __self__.unix = #if !macro function():GoInt64 return _tt._time.unix() #else null #end;
                            __self__.unixMicro = #if !macro function():GoInt64 return _tt._time.unixMicro() #else null #end;
                            __self__.unixMilli = #if !macro function():GoInt64 return _tt._time.unixMilli() #else null #end;
                            __self__.unixNano = #if !macro function():GoInt64 return _tt._time.unixNano() #else null #end;
                            __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.unmarshalBinary(__0) #else null #end;
                            __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.unmarshalJSON(__0) #else null #end;
                            __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.unmarshalText(__0) #else null #end;
                            __self__.weekday = #if !macro function():Weekday return _tt._time.weekday() #else null #end;
                            __self__.year = #if !macro function():GoInt return _tt._time.year() #else null #end;
                            __self__.yearDay = #if !macro function():GoInt return _tt._time.yearDay() #else null #end;
                            __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _tt._time.zone() #else null #end;
                            __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _tt._time.zoneBounds() #else null #end;
                            __self__._abs = #if !macro function():GoUInt64 return _tt._time._abs() #else null #end;
                            __self__._addSec = #if !macro function(_sec:GoInt64):Void _tt._time._addSec(_sec) #else null #end;
                            __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _tt._time._date(__0) #else null #end;
                            __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _tt._time._locabs() #else null #end;
                            __self__._mono = #if !macro function():GoInt64 return _tt._time._mono() #else null #end;
                            __self__._nsec = #if !macro function():GoInt32 return _tt._time._nsec() #else null #end;
                            __self__._sec = #if !macro function():GoInt64 return _tt._time._sec() #else null #end;
                            __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _tt._time._setLoc(__0) #else null #end;
                            __self__._setMono = #if !macro function(_sec:GoInt64):Void _tt._time._setMono(_sec) #else null #end;
                            __self__._stripMono = #if !macro function():Void _tt._time._stripMono() #else null #end;
                            __self__._unixSec = #if !macro function():GoInt64 return _tt._time._unixSec() #else null #end;
                            __self__;
                        }));
                    };
                };
            };
        };
    }
function testInvalidTimeJSON(_t:stdgo.testing.Testing.T):Void {
        var _tt:Time = (({  } : Time));
        var _err:stdgo.Error = stdgo.encoding.json.Json.unmarshal((((("{\"now is the time\":\"buddy\"}" : GoString)) : Slice<GoByte>)), Go.toInterface(_tt));
        var __tmp__ = try {
            { value : ((((_err.__underlying__().value : Dynamic)) : ParseError)), ok : true };
        } catch(_) {
            { value : ((null : ParseError)), ok : false };
        }, _0 = __tmp__.value, _isParseErr = __tmp__.ok;
        if (!_isParseErr) {
            _t.errorf(((((("expected *time.ParseError unmarshaling JSON, got %v" : GoString))) : GoString)), Go.toInterface(_err));
        };
    }
function testNotJSONEncodableTime(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _tt in _notJSONEncodableTimes) {
            var __tmp__ = _tt._time.marshalJSON(), _1:Slice<GoUInt8> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if ((_err == null) || (_err.error() != _tt._want)) {
                _t.errorf(((((("%v MarshalJSON error = %v, want %v" : GoString))) : GoString)), Go.toInterface({
                    final __self__ = new Time_wrapper(_tt._time);
                    __self__.add = #if !macro function(_d:Duration):Time return _tt._time.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _tt._time.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _tt._time.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _tt._time.appendFormat(_b, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _tt._time.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _tt._time.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _tt._time.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _tt._time.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _tt._time.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _tt._time.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _tt._time.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _tt._time.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _tt._time.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _tt._time.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _tt._time.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _tt._time.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _tt._time.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _tt._time.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._time.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _tt._time.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _tt._time.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _tt._time.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _tt._time.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _tt._time.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _tt._time.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _tt._time.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _tt._time.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _tt._time.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _tt._time.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _tt._time.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _tt._time.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _tt._time.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._time.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _tt._time.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _tt._time.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _tt._time.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _tt._time.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _tt._time.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _tt._time._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec:GoInt64):Void _tt._time._addSec(_sec) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _tt._time._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _tt._time._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _tt._time._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _tt._time._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _tt._time._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _tt._time._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec:GoInt64):Void _tt._time._setMono(_sec) #else null #end;
                    __self__._stripMono = #if !macro function():Void _tt._time._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _tt._time._unixSec() #else null #end;
                    __self__;
                }), Go.toInterface(_err), Go.toInterface(_tt._want));
            };
        };
    }
function testParseDuration(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _tc in _parseDurationTests) {
            var __tmp__ = parseDuration(_tc._in), _d:Duration = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if ((_err != null) || (_d != _tc._want)) {
                _t.errorf(((((("ParseDuration(%q) = %v, %v, want %v, nil" : GoString))) : GoString)), Go.toInterface(_tc._in), Go.toInterface({
                    final __self__ = new Duration_wrapper(_d);
                    __self__.abs = #if !macro function():Duration return _d.abs() #else null #end;
                    __self__.hours = #if !macro function():GoFloat64 return _d.hours() #else null #end;
                    __self__.microseconds = #if !macro function():GoInt64 return _d.microseconds() #else null #end;
                    __self__.milliseconds = #if !macro function():GoInt64 return _d.milliseconds() #else null #end;
                    __self__.minutes = #if !macro function():GoFloat64 return _d.minutes() #else null #end;
                    __self__.nanoseconds = #if !macro function():GoInt64 return _d.nanoseconds() #else null #end;
                    __self__.round = #if !macro function(_d_:Duration):Duration return _d.round(_d_) #else null #end;
                    __self__.seconds = #if !macro function():GoFloat64 return _d.seconds() #else null #end;
                    __self__.string = #if !macro function():GoString return _d.string() #else null #end;
                    __self__.truncate = #if !macro function(_d__:Duration):Duration return _d.truncate(_d__) #else null #end;
                    __self__;
                }), Go.toInterface(_err), Go.toInterface({
                    final __self__ = new Duration_wrapper(_tc._want);
                    __self__.abs = #if !macro function():Duration return _tc._want.abs() #else null #end;
                    __self__.hours = #if !macro function():GoFloat64 return _tc._want.hours() #else null #end;
                    __self__.microseconds = #if !macro function():GoInt64 return _tc._want.microseconds() #else null #end;
                    __self__.milliseconds = #if !macro function():GoInt64 return _tc._want.milliseconds() #else null #end;
                    __self__.minutes = #if !macro function():GoFloat64 return _tc._want.minutes() #else null #end;
                    __self__.nanoseconds = #if !macro function():GoInt64 return _tc._want.nanoseconds() #else null #end;
                    __self__.round = #if !macro function(_d_:Duration):Duration return _tc._want.round(_d_) #else null #end;
                    __self__.seconds = #if !macro function():GoFloat64 return _tc._want.seconds() #else null #end;
                    __self__.string = #if !macro function():GoString return _tc._want.string() #else null #end;
                    __self__.truncate = #if !macro function(_d__:Duration):Duration return _tc._want.truncate(_d__) #else null #end;
                    __self__;
                }));
            };
        };
    }
function testParseDurationErrors(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _tc in _parseDurationErrorTests) {
            var __tmp__ = parseDuration(_tc._in), _1:Duration = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if (_err == null) {
                _t.errorf(((((("ParseDuration(%q) = _, nil, want _, non-nil" : GoString))) : GoString)), Go.toInterface(_tc._in));
            } else if (!stdgo.strings.Strings.contains(_err.error(), _tc._expect)) {
                _t.errorf(((((("ParseDuration(%q) = _, %q, error does not contain %q" : GoString))) : GoString)), Go.toInterface(_tc._in), Go.toInterface(_err), Go.toInterface(_tc._expect));
            };
        };
    }
function testParseDurationRoundTrip(_t:stdgo.testing.Testing.T):Void {
        var _max0:Duration = (((("9223372036854775807" : Duration)) : Duration));
        var __tmp__ = parseDuration(((_max0.string() : GoString))), _max1:Duration = __tmp__._0, _err:stdgo.Error = __tmp__._1;
        if ((_err != null) || (_max0 != _max1)) {
            _t.errorf(((((("round-trip failed: %d => %q => %d, %v" : GoString))) : GoString)), Go.toInterface({
                final __self__ = new Duration_wrapper(_max0);
                __self__.abs = #if !macro function():Duration return _max0.abs() #else null #end;
                __self__.hours = #if !macro function():GoFloat64 return _max0.hours() #else null #end;
                __self__.microseconds = #if !macro function():GoInt64 return _max0.microseconds() #else null #end;
                __self__.milliseconds = #if !macro function():GoInt64 return _max0.milliseconds() #else null #end;
                __self__.minutes = #if !macro function():GoFloat64 return _max0.minutes() #else null #end;
                __self__.nanoseconds = #if !macro function():GoInt64 return _max0.nanoseconds() #else null #end;
                __self__.round = #if !macro function(_d:Duration):Duration return _max0.round(_d) #else null #end;
                __self__.seconds = #if !macro function():GoFloat64 return _max0.seconds() #else null #end;
                __self__.string = #if !macro function():GoString return _max0.string() #else null #end;
                __self__.truncate = #if !macro function(_d:Duration):Duration return _max0.truncate(_d) #else null #end;
                __self__;
            }), Go.toInterface(((_max0.string() : GoString))), Go.toInterface({
                final __self__ = new Duration_wrapper(_max1);
                __self__.abs = #if !macro function():Duration return _max1.abs() #else null #end;
                __self__.hours = #if !macro function():GoFloat64 return _max1.hours() #else null #end;
                __self__.microseconds = #if !macro function():GoInt64 return _max1.microseconds() #else null #end;
                __self__.milliseconds = #if !macro function():GoInt64 return _max1.milliseconds() #else null #end;
                __self__.minutes = #if !macro function():GoFloat64 return _max1.minutes() #else null #end;
                __self__.nanoseconds = #if !macro function():GoInt64 return _max1.nanoseconds() #else null #end;
                __self__.round = #if !macro function(_d:Duration):Duration return _max1.round(_d) #else null #end;
                __self__.seconds = #if !macro function():GoFloat64 return _max1.seconds() #else null #end;
                __self__.string = #if !macro function():GoString return _max1.string() #else null #end;
                __self__.truncate = #if !macro function(_d:Duration):Duration return _max1.truncate(_d) #else null #end;
                __self__;
            }), Go.toInterface(_err));
        };
        var _min0:Duration = (((("-9223372036854775808" : Duration)) : Duration));
        var __tmp__ = parseDuration(((_min0.string() : GoString))), _min1:Duration = __tmp__._0, _err:stdgo.Error = __tmp__._1;
        if ((_err != null) || (_min0 != _min1)) {
            _t.errorf(((((("round-trip failed: %d => %q => %d, %v" : GoString))) : GoString)), Go.toInterface({
                final __self__ = new Duration_wrapper(_min0);
                __self__.abs = #if !macro function():Duration return _min0.abs() #else null #end;
                __self__.hours = #if !macro function():GoFloat64 return _min0.hours() #else null #end;
                __self__.microseconds = #if !macro function():GoInt64 return _min0.microseconds() #else null #end;
                __self__.milliseconds = #if !macro function():GoInt64 return _min0.milliseconds() #else null #end;
                __self__.minutes = #if !macro function():GoFloat64 return _min0.minutes() #else null #end;
                __self__.nanoseconds = #if !macro function():GoInt64 return _min0.nanoseconds() #else null #end;
                __self__.round = #if !macro function(_d:Duration):Duration return _min0.round(_d) #else null #end;
                __self__.seconds = #if !macro function():GoFloat64 return _min0.seconds() #else null #end;
                __self__.string = #if !macro function():GoString return _min0.string() #else null #end;
                __self__.truncate = #if !macro function(_d:Duration):Duration return _min0.truncate(_d) #else null #end;
                __self__;
            }), Go.toInterface(((_min0.string() : GoString))), Go.toInterface({
                final __self__ = new Duration_wrapper(_min1);
                __self__.abs = #if !macro function():Duration return _min1.abs() #else null #end;
                __self__.hours = #if !macro function():GoFloat64 return _min1.hours() #else null #end;
                __self__.microseconds = #if !macro function():GoInt64 return _min1.microseconds() #else null #end;
                __self__.milliseconds = #if !macro function():GoInt64 return _min1.milliseconds() #else null #end;
                __self__.minutes = #if !macro function():GoFloat64 return _min1.minutes() #else null #end;
                __self__.nanoseconds = #if !macro function():GoInt64 return _min1.nanoseconds() #else null #end;
                __self__.round = #if !macro function(_d:Duration):Duration return _min1.round(_d) #else null #end;
                __self__.seconds = #if !macro function():GoFloat64 return _min1.seconds() #else null #end;
                __self__.string = #if !macro function():GoString return _min1.string() #else null #end;
                __self__.truncate = #if !macro function(_d:Duration):Duration return _min1.truncate(_d) #else null #end;
                __self__;
            }), Go.toInterface(_err));
        };
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < ((100 : GoInt)), _i++, {
                var _d0:Duration = ((stdgo.math.rand.Rand.int31() : Duration)) * ((1000000 : Duration));
                var _s:GoString = ((_d0.string() : GoString));
                var __tmp__ = parseDuration(_s), _d1:Duration = __tmp__._0, _err:stdgo.Error = __tmp__._1;
                if ((_err != null) || (_d0 != _d1)) {
                    _t.errorf(((((("round-trip failed: %d => %q => %d, %v" : GoString))) : GoString)), Go.toInterface({
                        final __self__ = new Duration_wrapper(_d0);
                        __self__.abs = #if !macro function():Duration return _d0.abs() #else null #end;
                        __self__.hours = #if !macro function():GoFloat64 return _d0.hours() #else null #end;
                        __self__.microseconds = #if !macro function():GoInt64 return _d0.microseconds() #else null #end;
                        __self__.milliseconds = #if !macro function():GoInt64 return _d0.milliseconds() #else null #end;
                        __self__.minutes = #if !macro function():GoFloat64 return _d0.minutes() #else null #end;
                        __self__.nanoseconds = #if !macro function():GoInt64 return _d0.nanoseconds() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Duration return _d0.round(_d) #else null #end;
                        __self__.seconds = #if !macro function():GoFloat64 return _d0.seconds() #else null #end;
                        __self__.string = #if !macro function():GoString return _d0.string() #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Duration return _d0.truncate(_d) #else null #end;
                        __self__;
                    }), Go.toInterface(_s), Go.toInterface({
                        final __self__ = new Duration_wrapper(_d1);
                        __self__.abs = #if !macro function():Duration return _d1.abs() #else null #end;
                        __self__.hours = #if !macro function():GoFloat64 return _d1.hours() #else null #end;
                        __self__.microseconds = #if !macro function():GoInt64 return _d1.microseconds() #else null #end;
                        __self__.milliseconds = #if !macro function():GoInt64 return _d1.milliseconds() #else null #end;
                        __self__.minutes = #if !macro function():GoFloat64 return _d1.minutes() #else null #end;
                        __self__.nanoseconds = #if !macro function():GoInt64 return _d1.nanoseconds() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Duration return _d1.round(_d) #else null #end;
                        __self__.seconds = #if !macro function():GoFloat64 return _d1.seconds() #else null #end;
                        __self__.string = #if !macro function():GoString return _d1.string() #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Duration return _d1.truncate(_d) #else null #end;
                        __self__;
                    }), Go.toInterface(_err));
                };
            });
        };
    }
/**
    // golang.org/issue/4622
**/
function testLocationRace(_t:stdgo.testing.Testing.T):Void {
        resetLocalOnceForTest();
        var _c = new Chan<GoString>(((((1 : GoInt)) : GoInt)).toBasic(), () -> (("" : GoString)));
        Go.routine(() -> {
            var a = function():Void {
                _c.__send__(((now().string() : GoString)));
            };
            a();
        });
        ((now().string() : GoString));
        _c.__get__();
        sleep(((100000000 : Duration)));
        forceUSPacificForTesting();
    }
function testCountMallocs(_t:stdgo.testing.Testing.T):Void {
        if (stdgo.testing.Testing.short()) {
            _t.skip(Go.toInterface(((((("skipping malloc count in short mode" : GoString))) : GoString))));
        };
        if (stdgo.runtime.Runtime.gomaxprocs(((0 : GoInt))) > ((1 : GoInt))) {
            _t.skip(Go.toInterface(((((("skipping; GOMAXPROCS>1" : GoString))) : GoString))));
        };
        for (_0 => _mt in _mallocTest) {
            var _allocs:GoInt = ((stdgo.testing.Testing.allocsPerRun(((100 : GoInt)), _mt._fn) : GoInt));
            if (_allocs > _mt._count) {
                _t.errorf(((((("%s: %d allocs, want %d" : GoString))) : GoString)), Go.toInterface(_mt._desc), Go.toInterface(_allocs), Go.toInterface(_mt._count));
            };
        };
    }
function testLoadFixed(_t:stdgo.testing.Testing.T):Void {
        var __tmp__ = loadLocation(((((("Etc/GMT+1" : GoString))) : GoString))), _loc:Ref<Location> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
        if (_err != null) {
            _t.fatal(Go.toInterface(_err));
        };
        var __tmp__ = now().in_(_loc).zone(), _name:GoString = __tmp__._0, _offset:GoInt = __tmp__._1;
        if (!((_name == ((((("GMT+1" : GoString))) : GoString))) || (_name == ((((("-01" : GoString))) : GoString)))) || (_offset != ((-3600 : GoInt)))) {
            _t.errorf(((((("Now().In(loc).Zone() = %q, %d, want %q or %q, %d" : GoString))) : GoString)), Go.toInterface(_name), Go.toInterface(_offset), Go.toInterface(((((("GMT+1" : GoString))) : GoString))), Go.toInterface(((((("-01" : GoString))) : GoString))), Go.toInterface(((-3600 : GoInt))));
        };
    }
function testSub(_t:stdgo.testing.Testing.T):Void {
        for (_i => _st in _subTests) {
            var _got:Duration = _st._t.sub((_st._u == null ? null : _st._u.__copy__()));
            if (_got != _st._d) {
                _t.errorf(((((("#%d: Sub(%v, %v): got %v; want %v" : GoString))) : GoString)), Go.toInterface(_i), Go.toInterface({
                    final __self__ = new Time_wrapper(_st._t);
                    __self__.add = #if !macro function(_d:Duration):Time return _st._t.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _st._t.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _st._t.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _st._t.appendFormat(_b, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _st._t.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _st._t.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _st._t.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _st._t.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _st._t.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _st._t.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _st._t.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _st._t.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _st._t.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _st._t.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _st._t.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _st._t.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _st._t.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _st._t.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _st._t.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _st._t.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _st._t.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _st._t.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _st._t.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _st._t.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _st._t.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _st._t.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _st._t.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _st._t.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _st._t.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _st._t.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _st._t.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _st._t.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _st._t.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _st._t.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _st._t.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _st._t.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _st._t.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _st._t.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _st._t.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _st._t.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _st._t.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _st._t.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _st._t.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _st._t.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _st._t._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec:GoInt64):Void _st._t._addSec(_sec) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _st._t._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _st._t._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _st._t._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _st._t._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _st._t._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _st._t._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec:GoInt64):Void _st._t._setMono(_sec) #else null #end;
                    __self__._stripMono = #if !macro function():Void _st._t._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _st._t._unixSec() #else null #end;
                    __self__;
                }), Go.toInterface({
                    final __self__ = new Time_wrapper(_st._u);
                    __self__.add = #if !macro function(_d:Duration):Time return _st._u.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _st._u.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _st._u.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _st._u.appendFormat(_b, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _st._u.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _st._u.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _st._u.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _st._u.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _st._u.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _st._u.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _st._u.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _st._u.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _st._u.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _st._u.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _st._u.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _st._u.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _st._u.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _st._u.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _st._u.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _st._u.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _st._u.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _st._u.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _st._u.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _st._u.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _st._u.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _st._u.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _st._u.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _st._u.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _st._u.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _st._u.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _st._u.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _st._u.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _st._u.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _st._u.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _st._u.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _st._u.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _st._u.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _st._u.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _st._u.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _st._u.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _st._u.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _st._u.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _st._u.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _st._u.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _st._u._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec:GoInt64):Void _st._u._addSec(_sec) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _st._u._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _st._u._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _st._u._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _st._u._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _st._u._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _st._u._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec:GoInt64):Void _st._u._setMono(_sec) #else null #end;
                    __self__._stripMono = #if !macro function():Void _st._u._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _st._u._unixSec() #else null #end;
                    __self__;
                }), Go.toInterface({
                    final __self__ = new Duration_wrapper(_got);
                    __self__.abs = #if !macro function():Duration return _got.abs() #else null #end;
                    __self__.hours = #if !macro function():GoFloat64 return _got.hours() #else null #end;
                    __self__.microseconds = #if !macro function():GoInt64 return _got.microseconds() #else null #end;
                    __self__.milliseconds = #if !macro function():GoInt64 return _got.milliseconds() #else null #end;
                    __self__.minutes = #if !macro function():GoFloat64 return _got.minutes() #else null #end;
                    __self__.nanoseconds = #if !macro function():GoInt64 return _got.nanoseconds() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Duration return _got.round(_d) #else null #end;
                    __self__.seconds = #if !macro function():GoFloat64 return _got.seconds() #else null #end;
                    __self__.string = #if !macro function():GoString return _got.string() #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Duration return _got.truncate(_d) #else null #end;
                    __self__;
                }), Go.toInterface({
                    final __self__ = new Duration_wrapper(_st._d);
                    __self__.abs = #if !macro function():Duration return _st._d.abs() #else null #end;
                    __self__.hours = #if !macro function():GoFloat64 return _st._d.hours() #else null #end;
                    __self__.microseconds = #if !macro function():GoInt64 return _st._d.microseconds() #else null #end;
                    __self__.milliseconds = #if !macro function():GoInt64 return _st._d.milliseconds() #else null #end;
                    __self__.minutes = #if !macro function():GoFloat64 return _st._d.minutes() #else null #end;
                    __self__.nanoseconds = #if !macro function():GoInt64 return _st._d.nanoseconds() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Duration return _st._d.round(_d) #else null #end;
                    __self__.seconds = #if !macro function():GoFloat64 return _st._d.seconds() #else null #end;
                    __self__.string = #if !macro function():GoString return _st._d.string() #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Duration return _st._d.truncate(_d) #else null #end;
                    __self__;
                }));
            };
        };
    }
function testDurationNanoseconds(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _tt in _nsDurationTests) {
            {
                var _got:GoInt64 = _tt._d.nanoseconds();
                if (_got != _tt._want) {
                    _t.errorf(((((("Duration(%s).Nanoseconds() = %d; want: %d" : GoString))) : GoString)), Go.toInterface({
                        final __self__ = new Duration_wrapper(_tt._d);
                        __self__.abs = #if !macro function():Duration return _tt._d.abs() #else null #end;
                        __self__.hours = #if !macro function():GoFloat64 return _tt._d.hours() #else null #end;
                        __self__.microseconds = #if !macro function():GoInt64 return _tt._d.microseconds() #else null #end;
                        __self__.milliseconds = #if !macro function():GoInt64 return _tt._d.milliseconds() #else null #end;
                        __self__.minutes = #if !macro function():GoFloat64 return _tt._d.minutes() #else null #end;
                        __self__.nanoseconds = #if !macro function():GoInt64 return _tt._d.nanoseconds() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Duration return _tt._d.round(_d) #else null #end;
                        __self__.seconds = #if !macro function():GoFloat64 return _tt._d.seconds() #else null #end;
                        __self__.string = #if !macro function():GoString return _tt._d.string() #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Duration return _tt._d.truncate(_d) #else null #end;
                        __self__;
                    }), Go.toInterface(_got), Go.toInterface(_tt._want));
                };
            };
        };
    }
function testDurationMicroseconds(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _tt in _usDurationTests) {
            {
                var _got:GoInt64 = _tt._d.microseconds();
                if (_got != _tt._want) {
                    _t.errorf(((((("Duration(%s).Microseconds() = %d; want: %d" : GoString))) : GoString)), Go.toInterface({
                        final __self__ = new Duration_wrapper(_tt._d);
                        __self__.abs = #if !macro function():Duration return _tt._d.abs() #else null #end;
                        __self__.hours = #if !macro function():GoFloat64 return _tt._d.hours() #else null #end;
                        __self__.microseconds = #if !macro function():GoInt64 return _tt._d.microseconds() #else null #end;
                        __self__.milliseconds = #if !macro function():GoInt64 return _tt._d.milliseconds() #else null #end;
                        __self__.minutes = #if !macro function():GoFloat64 return _tt._d.minutes() #else null #end;
                        __self__.nanoseconds = #if !macro function():GoInt64 return _tt._d.nanoseconds() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Duration return _tt._d.round(_d) #else null #end;
                        __self__.seconds = #if !macro function():GoFloat64 return _tt._d.seconds() #else null #end;
                        __self__.string = #if !macro function():GoString return _tt._d.string() #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Duration return _tt._d.truncate(_d) #else null #end;
                        __self__;
                    }), Go.toInterface(_got), Go.toInterface(_tt._want));
                };
            };
        };
    }
function testDurationMilliseconds(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _tt in _msDurationTests) {
            {
                var _got:GoInt64 = _tt._d.milliseconds();
                if (_got != _tt._want) {
                    _t.errorf(((((("Duration(%s).Milliseconds() = %d; want: %d" : GoString))) : GoString)), Go.toInterface({
                        final __self__ = new Duration_wrapper(_tt._d);
                        __self__.abs = #if !macro function():Duration return _tt._d.abs() #else null #end;
                        __self__.hours = #if !macro function():GoFloat64 return _tt._d.hours() #else null #end;
                        __self__.microseconds = #if !macro function():GoInt64 return _tt._d.microseconds() #else null #end;
                        __self__.milliseconds = #if !macro function():GoInt64 return _tt._d.milliseconds() #else null #end;
                        __self__.minutes = #if !macro function():GoFloat64 return _tt._d.minutes() #else null #end;
                        __self__.nanoseconds = #if !macro function():GoInt64 return _tt._d.nanoseconds() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Duration return _tt._d.round(_d) #else null #end;
                        __self__.seconds = #if !macro function():GoFloat64 return _tt._d.seconds() #else null #end;
                        __self__.string = #if !macro function():GoString return _tt._d.string() #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Duration return _tt._d.truncate(_d) #else null #end;
                        __self__;
                    }), Go.toInterface(_got), Go.toInterface(_tt._want));
                };
            };
        };
    }
function testDurationSeconds(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _tt in _secDurationTests) {
            {
                var _got:GoFloat64 = _tt._d.seconds();
                if (_got != _tt._want) {
                    _t.errorf(((((("Duration(%s).Seconds() = %g; want: %g" : GoString))) : GoString)), Go.toInterface({
                        final __self__ = new Duration_wrapper(_tt._d);
                        __self__.abs = #if !macro function():Duration return _tt._d.abs() #else null #end;
                        __self__.hours = #if !macro function():GoFloat64 return _tt._d.hours() #else null #end;
                        __self__.microseconds = #if !macro function():GoInt64 return _tt._d.microseconds() #else null #end;
                        __self__.milliseconds = #if !macro function():GoInt64 return _tt._d.milliseconds() #else null #end;
                        __self__.minutes = #if !macro function():GoFloat64 return _tt._d.minutes() #else null #end;
                        __self__.nanoseconds = #if !macro function():GoInt64 return _tt._d.nanoseconds() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Duration return _tt._d.round(_d) #else null #end;
                        __self__.seconds = #if !macro function():GoFloat64 return _tt._d.seconds() #else null #end;
                        __self__.string = #if !macro function():GoString return _tt._d.string() #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Duration return _tt._d.truncate(_d) #else null #end;
                        __self__;
                    }), Go.toInterface(_got), Go.toInterface(_tt._want));
                };
            };
        };
    }
function testDurationMinutes(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _tt in _minDurationTests) {
            {
                var _got:GoFloat64 = _tt._d.minutes();
                if (_got != _tt._want) {
                    _t.errorf(((((("Duration(%s).Minutes() = %g; want: %g" : GoString))) : GoString)), Go.toInterface({
                        final __self__ = new Duration_wrapper(_tt._d);
                        __self__.abs = #if !macro function():Duration return _tt._d.abs() #else null #end;
                        __self__.hours = #if !macro function():GoFloat64 return _tt._d.hours() #else null #end;
                        __self__.microseconds = #if !macro function():GoInt64 return _tt._d.microseconds() #else null #end;
                        __self__.milliseconds = #if !macro function():GoInt64 return _tt._d.milliseconds() #else null #end;
                        __self__.minutes = #if !macro function():GoFloat64 return _tt._d.minutes() #else null #end;
                        __self__.nanoseconds = #if !macro function():GoInt64 return _tt._d.nanoseconds() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Duration return _tt._d.round(_d) #else null #end;
                        __self__.seconds = #if !macro function():GoFloat64 return _tt._d.seconds() #else null #end;
                        __self__.string = #if !macro function():GoString return _tt._d.string() #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Duration return _tt._d.truncate(_d) #else null #end;
                        __self__;
                    }), Go.toInterface(_got), Go.toInterface(_tt._want));
                };
            };
        };
    }
function testDurationHours(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _tt in _hourDurationTests) {
            {
                var _got:GoFloat64 = _tt._d.hours();
                if (_got != _tt._want) {
                    _t.errorf(((((("Duration(%s).Hours() = %g; want: %g" : GoString))) : GoString)), Go.toInterface({
                        final __self__ = new Duration_wrapper(_tt._d);
                        __self__.abs = #if !macro function():Duration return _tt._d.abs() #else null #end;
                        __self__.hours = #if !macro function():GoFloat64 return _tt._d.hours() #else null #end;
                        __self__.microseconds = #if !macro function():GoInt64 return _tt._d.microseconds() #else null #end;
                        __self__.milliseconds = #if !macro function():GoInt64 return _tt._d.milliseconds() #else null #end;
                        __self__.minutes = #if !macro function():GoFloat64 return _tt._d.minutes() #else null #end;
                        __self__.nanoseconds = #if !macro function():GoInt64 return _tt._d.nanoseconds() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Duration return _tt._d.round(_d) #else null #end;
                        __self__.seconds = #if !macro function():GoFloat64 return _tt._d.seconds() #else null #end;
                        __self__.string = #if !macro function():GoString return _tt._d.string() #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Duration return _tt._d.truncate(_d) #else null #end;
                        __self__;
                    }), Go.toInterface(_got), Go.toInterface(_tt._want));
                };
            };
        };
    }
function testDurationTruncate(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _tt in _durationTruncateTests) {
            {
                var _got:Duration = _tt._d.truncate(_tt._m);
                if (_got != _tt._want) {
                    _t.errorf(((((("Duration(%s).Truncate(%s) = %s; want: %s" : GoString))) : GoString)), Go.toInterface({
                        final __self__ = new Duration_wrapper(_tt._d);
                        __self__.abs = #if !macro function():Duration return _tt._d.abs() #else null #end;
                        __self__.hours = #if !macro function():GoFloat64 return _tt._d.hours() #else null #end;
                        __self__.microseconds = #if !macro function():GoInt64 return _tt._d.microseconds() #else null #end;
                        __self__.milliseconds = #if !macro function():GoInt64 return _tt._d.milliseconds() #else null #end;
                        __self__.minutes = #if !macro function():GoFloat64 return _tt._d.minutes() #else null #end;
                        __self__.nanoseconds = #if !macro function():GoInt64 return _tt._d.nanoseconds() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Duration return _tt._d.round(_d) #else null #end;
                        __self__.seconds = #if !macro function():GoFloat64 return _tt._d.seconds() #else null #end;
                        __self__.string = #if !macro function():GoString return _tt._d.string() #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Duration return _tt._d.truncate(_d) #else null #end;
                        __self__;
                    }), Go.toInterface({
                        final __self__ = new Duration_wrapper(_tt._m);
                        __self__.abs = #if !macro function():Duration return _tt._m.abs() #else null #end;
                        __self__.hours = #if !macro function():GoFloat64 return _tt._m.hours() #else null #end;
                        __self__.microseconds = #if !macro function():GoInt64 return _tt._m.microseconds() #else null #end;
                        __self__.milliseconds = #if !macro function():GoInt64 return _tt._m.milliseconds() #else null #end;
                        __self__.minutes = #if !macro function():GoFloat64 return _tt._m.minutes() #else null #end;
                        __self__.nanoseconds = #if !macro function():GoInt64 return _tt._m.nanoseconds() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Duration return _tt._m.round(_d) #else null #end;
                        __self__.seconds = #if !macro function():GoFloat64 return _tt._m.seconds() #else null #end;
                        __self__.string = #if !macro function():GoString return _tt._m.string() #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Duration return _tt._m.truncate(_d) #else null #end;
                        __self__;
                    }), Go.toInterface({
                        final __self__ = new Duration_wrapper(_got);
                        __self__.abs = #if !macro function():Duration return _got.abs() #else null #end;
                        __self__.hours = #if !macro function():GoFloat64 return _got.hours() #else null #end;
                        __self__.microseconds = #if !macro function():GoInt64 return _got.microseconds() #else null #end;
                        __self__.milliseconds = #if !macro function():GoInt64 return _got.milliseconds() #else null #end;
                        __self__.minutes = #if !macro function():GoFloat64 return _got.minutes() #else null #end;
                        __self__.nanoseconds = #if !macro function():GoInt64 return _got.nanoseconds() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Duration return _got.round(_d) #else null #end;
                        __self__.seconds = #if !macro function():GoFloat64 return _got.seconds() #else null #end;
                        __self__.string = #if !macro function():GoString return _got.string() #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Duration return _got.truncate(_d) #else null #end;
                        __self__;
                    }), Go.toInterface({
                        final __self__ = new Duration_wrapper(_tt._want);
                        __self__.abs = #if !macro function():Duration return _tt._want.abs() #else null #end;
                        __self__.hours = #if !macro function():GoFloat64 return _tt._want.hours() #else null #end;
                        __self__.microseconds = #if !macro function():GoInt64 return _tt._want.microseconds() #else null #end;
                        __self__.milliseconds = #if !macro function():GoInt64 return _tt._want.milliseconds() #else null #end;
                        __self__.minutes = #if !macro function():GoFloat64 return _tt._want.minutes() #else null #end;
                        __self__.nanoseconds = #if !macro function():GoInt64 return _tt._want.nanoseconds() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Duration return _tt._want.round(_d) #else null #end;
                        __self__.seconds = #if !macro function():GoFloat64 return _tt._want.seconds() #else null #end;
                        __self__.string = #if !macro function():GoString return _tt._want.string() #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Duration return _tt._want.truncate(_d) #else null #end;
                        __self__;
                    }));
                };
            };
        };
    }
function testDurationRound(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _tt in _durationRoundTests) {
            {
                var _got:Duration = _tt._d.round(_tt._m);
                if (_got != _tt._want) {
                    _t.errorf(((((("Duration(%s).Round(%s) = %s; want: %s" : GoString))) : GoString)), Go.toInterface({
                        final __self__ = new Duration_wrapper(_tt._d);
                        __self__.abs = #if !macro function():Duration return _tt._d.abs() #else null #end;
                        __self__.hours = #if !macro function():GoFloat64 return _tt._d.hours() #else null #end;
                        __self__.microseconds = #if !macro function():GoInt64 return _tt._d.microseconds() #else null #end;
                        __self__.milliseconds = #if !macro function():GoInt64 return _tt._d.milliseconds() #else null #end;
                        __self__.minutes = #if !macro function():GoFloat64 return _tt._d.minutes() #else null #end;
                        __self__.nanoseconds = #if !macro function():GoInt64 return _tt._d.nanoseconds() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Duration return _tt._d.round(_d) #else null #end;
                        __self__.seconds = #if !macro function():GoFloat64 return _tt._d.seconds() #else null #end;
                        __self__.string = #if !macro function():GoString return _tt._d.string() #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Duration return _tt._d.truncate(_d) #else null #end;
                        __self__;
                    }), Go.toInterface({
                        final __self__ = new Duration_wrapper(_tt._m);
                        __self__.abs = #if !macro function():Duration return _tt._m.abs() #else null #end;
                        __self__.hours = #if !macro function():GoFloat64 return _tt._m.hours() #else null #end;
                        __self__.microseconds = #if !macro function():GoInt64 return _tt._m.microseconds() #else null #end;
                        __self__.milliseconds = #if !macro function():GoInt64 return _tt._m.milliseconds() #else null #end;
                        __self__.minutes = #if !macro function():GoFloat64 return _tt._m.minutes() #else null #end;
                        __self__.nanoseconds = #if !macro function():GoInt64 return _tt._m.nanoseconds() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Duration return _tt._m.round(_d) #else null #end;
                        __self__.seconds = #if !macro function():GoFloat64 return _tt._m.seconds() #else null #end;
                        __self__.string = #if !macro function():GoString return _tt._m.string() #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Duration return _tt._m.truncate(_d) #else null #end;
                        __self__;
                    }), Go.toInterface({
                        final __self__ = new Duration_wrapper(_got);
                        __self__.abs = #if !macro function():Duration return _got.abs() #else null #end;
                        __self__.hours = #if !macro function():GoFloat64 return _got.hours() #else null #end;
                        __self__.microseconds = #if !macro function():GoInt64 return _got.microseconds() #else null #end;
                        __self__.milliseconds = #if !macro function():GoInt64 return _got.milliseconds() #else null #end;
                        __self__.minutes = #if !macro function():GoFloat64 return _got.minutes() #else null #end;
                        __self__.nanoseconds = #if !macro function():GoInt64 return _got.nanoseconds() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Duration return _got.round(_d) #else null #end;
                        __self__.seconds = #if !macro function():GoFloat64 return _got.seconds() #else null #end;
                        __self__.string = #if !macro function():GoString return _got.string() #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Duration return _got.truncate(_d) #else null #end;
                        __self__;
                    }), Go.toInterface({
                        final __self__ = new Duration_wrapper(_tt._want);
                        __self__.abs = #if !macro function():Duration return _tt._want.abs() #else null #end;
                        __self__.hours = #if !macro function():GoFloat64 return _tt._want.hours() #else null #end;
                        __self__.microseconds = #if !macro function():GoInt64 return _tt._want.microseconds() #else null #end;
                        __self__.milliseconds = #if !macro function():GoInt64 return _tt._want.milliseconds() #else null #end;
                        __self__.minutes = #if !macro function():GoFloat64 return _tt._want.minutes() #else null #end;
                        __self__.nanoseconds = #if !macro function():GoInt64 return _tt._want.nanoseconds() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Duration return _tt._want.round(_d) #else null #end;
                        __self__.seconds = #if !macro function():GoFloat64 return _tt._want.seconds() #else null #end;
                        __self__.string = #if !macro function():GoString return _tt._want.string() #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Duration return _tt._want.truncate(_d) #else null #end;
                        __self__;
                    }));
                };
            };
        };
    }
function testDurationAbs(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _tt in _durationAbsTests) {
            {
                var _got:Duration = _tt._d.abs();
                if (_got != _tt._want) {
                    _t.errorf(((((("Duration(%s).Abs() = %s; want: %s" : GoString))) : GoString)), Go.toInterface({
                        final __self__ = new Duration_wrapper(_tt._d);
                        __self__.abs = #if !macro function():Duration return _tt._d.abs() #else null #end;
                        __self__.hours = #if !macro function():GoFloat64 return _tt._d.hours() #else null #end;
                        __self__.microseconds = #if !macro function():GoInt64 return _tt._d.microseconds() #else null #end;
                        __self__.milliseconds = #if !macro function():GoInt64 return _tt._d.milliseconds() #else null #end;
                        __self__.minutes = #if !macro function():GoFloat64 return _tt._d.minutes() #else null #end;
                        __self__.nanoseconds = #if !macro function():GoInt64 return _tt._d.nanoseconds() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Duration return _tt._d.round(_d) #else null #end;
                        __self__.seconds = #if !macro function():GoFloat64 return _tt._d.seconds() #else null #end;
                        __self__.string = #if !macro function():GoString return _tt._d.string() #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Duration return _tt._d.truncate(_d) #else null #end;
                        __self__;
                    }), Go.toInterface({
                        final __self__ = new Duration_wrapper(_got);
                        __self__.abs = #if !macro function():Duration return _got.abs() #else null #end;
                        __self__.hours = #if !macro function():GoFloat64 return _got.hours() #else null #end;
                        __self__.microseconds = #if !macro function():GoInt64 return _got.microseconds() #else null #end;
                        __self__.milliseconds = #if !macro function():GoInt64 return _got.milliseconds() #else null #end;
                        __self__.minutes = #if !macro function():GoFloat64 return _got.minutes() #else null #end;
                        __self__.nanoseconds = #if !macro function():GoInt64 return _got.nanoseconds() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Duration return _got.round(_d) #else null #end;
                        __self__.seconds = #if !macro function():GoFloat64 return _got.seconds() #else null #end;
                        __self__.string = #if !macro function():GoString return _got.string() #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Duration return _got.truncate(_d) #else null #end;
                        __self__;
                    }), Go.toInterface({
                        final __self__ = new Duration_wrapper(_tt._want);
                        __self__.abs = #if !macro function():Duration return _tt._want.abs() #else null #end;
                        __self__.hours = #if !macro function():GoFloat64 return _tt._want.hours() #else null #end;
                        __self__.microseconds = #if !macro function():GoInt64 return _tt._want.microseconds() #else null #end;
                        __self__.milliseconds = #if !macro function():GoInt64 return _tt._want.milliseconds() #else null #end;
                        __self__.minutes = #if !macro function():GoFloat64 return _tt._want.minutes() #else null #end;
                        __self__.nanoseconds = #if !macro function():GoInt64 return _tt._want.nanoseconds() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Duration return _tt._want.round(_d) #else null #end;
                        __self__.seconds = #if !macro function():GoFloat64 return _tt._want.seconds() #else null #end;
                        __self__.string = #if !macro function():GoString return _tt._want.string() #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Duration return _tt._want.truncate(_d) #else null #end;
                        __self__;
                    }));
                };
            };
        };
    }
function testDefaultLoc(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _tt in _defaultLocTests) {
            var _t1:Time = ((new Time() : Time));
            var _t2:Time = (((new Time() : Time)).utc() == null ? null : ((new Time() : Time)).utc().__copy__());
            if (!_tt._f((_t1 == null ? null : _t1.__copy__()), (_t2 == null ? null : _t2.__copy__()))) {
                _t.errorf(((((("Time{} and Time{}.UTC() behave differently for %s" : GoString))) : GoString)), Go.toInterface(_tt._name));
            };
        };
    }
function benchmarkNow(_b:stdgo.testing.Testing.B):Void {
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < _b.n, _i++, {
                _t = (now() == null ? null : now().__copy__());
            });
        };
    }
function benchmarkNowUnixNano(_b:stdgo.testing.Testing.B):Void {
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < _b.n, _i++, {
                _u = now().unixNano();
            });
        };
    }
function benchmarkNowUnixMilli(_b:stdgo.testing.Testing.B):Void {
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < _b.n, _i++, {
                _u = now().unixMilli();
            });
        };
    }
function benchmarkNowUnixMicro(_b:stdgo.testing.Testing.B):Void {
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < _b.n, _i++, {
                _u = now().unixMicro();
            });
        };
    }
function benchmarkFormat(_b:stdgo.testing.Testing.B):Void {
        var _t:Time = (unix(((1265346057 : GoInt64)), ((0 : GoInt64))) == null ? null : unix(((1265346057 : GoInt64)), ((0 : GoInt64))).__copy__());
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < _b.n, _i++, {
                _t.format(((((("Mon Jan  2 15:04:05 2006" : GoString))) : GoString)));
            });
        };
    }
function benchmarkFormatNow(_b:stdgo.testing.Testing.B):Void {
        var _t:Time = (now() == null ? null : now().__copy__());
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < _b.n, _i++, {
                _t.format(((((("Mon Jan  2 15:04:05 2006" : GoString))) : GoString)));
            });
        };
    }
function benchmarkMarshalJSON(_b:stdgo.testing.Testing.B):Void {
        var _t:Time = (now() == null ? null : now().__copy__());
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < _b.n, _i++, {
                _t.marshalJSON();
            });
        };
    }
function benchmarkMarshalText(_b:stdgo.testing.Testing.B):Void {
        var _t:Time = (now() == null ? null : now().__copy__());
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < _b.n, _i++, {
                _t.marshalText();
            });
        };
    }
function benchmarkParse(_b:stdgo.testing.Testing.B):Void {
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < _b.n, _i++, {
                parse(((((("Mon Jan _2 15:04:05 2006" : GoString))) : GoString)), ((((("Mon Jan  2 15:04:05 2006" : GoString))) : GoString)));
            });
        };
    }
function benchmarkParseDuration(_b:stdgo.testing.Testing.B):Void {
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < _b.n, _i++, {
                parseDuration(((((("9007199254.740993ms" : GoString))) : GoString)));
                parseDuration(((((("9007199254740993ns" : GoString))) : GoString)));
            });
        };
    }
function benchmarkHour(_b:stdgo.testing.Testing.B):Void {
        var _t:Time = (now() == null ? null : now().__copy__());
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < _b.n, _i++, {
                _t.hour();
            });
        };
    }
function benchmarkSecond(_b:stdgo.testing.Testing.B):Void {
        var _t:Time = (now() == null ? null : now().__copy__());
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < _b.n, _i++, {
                _t.second();
            });
        };
    }
function benchmarkYear(_b:stdgo.testing.Testing.B):Void {
        var _t:Time = (now() == null ? null : now().__copy__());
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < _b.n, _i++, {
                _t.year();
            });
        };
    }
function benchmarkDay(_b:stdgo.testing.Testing.B):Void {
        var _t:Time = (now() == null ? null : now().__copy__());
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < _b.n, _i++, {
                _t.day();
            });
        };
    }
function benchmarkISOWeek(_b:stdgo.testing.Testing.B):Void {
        var _t:Time = (now() == null ? null : now().__copy__());
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < _b.n, _i++, {
                _t.isoweek();
            });
        };
    }
function testMarshalBinaryZeroTime(_t:stdgo.testing.Testing.T):Void {
        var _t0:Time = ((new Time() : Time));
        var __tmp__ = _t0.marshalBinary(), _enc:Slice<GoUInt8> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
        if (_err != null) {
            _t.fatal(Go.toInterface(_err));
        };
        var _t1:Time = (now() == null ? null : now().__copy__());
        {
            var _err:stdgo.Error = _t1.unmarshalBinary(_enc);
            if (_err != null) {
                _t.fatal(Go.toInterface(_err));
            };
        };
        if (_t1 != _t0) {
            _t.errorf(((((("t0=%#v\nt1=%#v\nwant identical structures" : GoString))) : GoString)), Go.toInterface({
                final __self__ = new Time_wrapper(_t0);
                __self__.add = #if !macro function(_d:Duration):Time return _t0.add(_d) #else null #end;
                __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _t0.addDate(_years, _months, _days) #else null #end;
                __self__.after = #if !macro function(__0:Time):Bool return _t0.after(__0) #else null #end;
                __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _t0.appendFormat(_b, _layout) #else null #end;
                __self__.before = #if !macro function(__0:Time):Bool return _t0.before(__0) #else null #end;
                __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _t0.clock() #else null #end;
                __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _t0.date() #else null #end;
                __self__.day = #if !macro function():GoInt return _t0.day() #else null #end;
                __self__.equal = #if !macro function(__0:Time):Bool return _t0.equal(__0) #else null #end;
                __self__.format = #if !macro function(__0:GoString):GoString return _t0.format(__0) #else null #end;
                __self__.goString = #if !macro function():GoString return _t0.goString() #else null #end;
                __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t0.gobDecode(__0) #else null #end;
                __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t0.gobEncode() #else null #end;
                __self__.hour = #if !macro function():GoInt return _t0.hour() #else null #end;
                __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _t0.isoweek() #else null #end;
                __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _t0.in_(__0) #else null #end;
                __self__.isDST = #if !macro function():Bool return _t0.isDST() #else null #end;
                __self__.isZero = #if !macro function():Bool return _t0.isZero() #else null #end;
                __self__.local = #if !macro function():Time return _t0.local() #else null #end;
                __self__.location = #if !macro function():Ref<Location> return _t0.location() #else null #end;
                __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t0.marshalBinary() #else null #end;
                __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t0.marshalJSON() #else null #end;
                __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t0.marshalText() #else null #end;
                __self__.minute = #if !macro function():GoInt return _t0.minute() #else null #end;
                __self__.month = #if !macro function():Month return _t0.month() #else null #end;
                __self__.nanosecond = #if !macro function():GoInt return _t0.nanosecond() #else null #end;
                __self__.round = #if !macro function(_d:Duration):Time return _t0.round(_d) #else null #end;
                __self__.second = #if !macro function():GoInt return _t0.second() #else null #end;
                __self__.string = #if !macro function():GoString return _t0.string() #else null #end;
                __self__.sub = #if !macro function(__0:Time):Duration return _t0.sub(__0) #else null #end;
                __self__.truncate = #if !macro function(_d:Duration):Time return _t0.truncate(_d) #else null #end;
                __self__.utc = #if !macro function():Time return _t0.utc() #else null #end;
                __self__.unix = #if !macro function():GoInt64 return _t0.unix() #else null #end;
                __self__.unixMicro = #if !macro function():GoInt64 return _t0.unixMicro() #else null #end;
                __self__.unixMilli = #if !macro function():GoInt64 return _t0.unixMilli() #else null #end;
                __self__.unixNano = #if !macro function():GoInt64 return _t0.unixNano() #else null #end;
                __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t0.unmarshalBinary(__0) #else null #end;
                __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t0.unmarshalJSON(__0) #else null #end;
                __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t0.unmarshalText(__0) #else null #end;
                __self__.weekday = #if !macro function():Weekday return _t0.weekday() #else null #end;
                __self__.year = #if !macro function():GoInt return _t0.year() #else null #end;
                __self__.yearDay = #if !macro function():GoInt return _t0.yearDay() #else null #end;
                __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _t0.zone() #else null #end;
                __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _t0.zoneBounds() #else null #end;
                __self__._abs = #if !macro function():GoUInt64 return _t0._abs() #else null #end;
                __self__._addSec = #if !macro function(_sec:GoInt64):Void _t0._addSec(_sec) #else null #end;
                __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _t0._date(__0) #else null #end;
                __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _t0._locabs() #else null #end;
                __self__._mono = #if !macro function():GoInt64 return _t0._mono() #else null #end;
                __self__._nsec = #if !macro function():GoInt32 return _t0._nsec() #else null #end;
                __self__._sec = #if !macro function():GoInt64 return _t0._sec() #else null #end;
                __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _t0._setLoc(__0) #else null #end;
                __self__._setMono = #if !macro function(_sec:GoInt64):Void _t0._setMono(_sec) #else null #end;
                __self__._stripMono = #if !macro function():Void _t0._stripMono() #else null #end;
                __self__._unixSec = #if !macro function():GoInt64 return _t0._unixSec() #else null #end;
                __self__;
            }), Go.toInterface({
                final __self__ = new Time_wrapper(_t1);
                __self__.add = #if !macro function(_d:Duration):Time return _t1.add(_d) #else null #end;
                __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _t1.addDate(_years, _months, _days) #else null #end;
                __self__.after = #if !macro function(__0:Time):Bool return _t1.after(__0) #else null #end;
                __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _t1.appendFormat(_b, _layout) #else null #end;
                __self__.before = #if !macro function(__0:Time):Bool return _t1.before(__0) #else null #end;
                __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _t1.clock() #else null #end;
                __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _t1.date() #else null #end;
                __self__.day = #if !macro function():GoInt return _t1.day() #else null #end;
                __self__.equal = #if !macro function(__0:Time):Bool return _t1.equal(__0) #else null #end;
                __self__.format = #if !macro function(__0:GoString):GoString return _t1.format(__0) #else null #end;
                __self__.goString = #if !macro function():GoString return _t1.goString() #else null #end;
                __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.gobDecode(__0) #else null #end;
                __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.gobEncode() #else null #end;
                __self__.hour = #if !macro function():GoInt return _t1.hour() #else null #end;
                __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _t1.isoweek() #else null #end;
                __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _t1.in_(__0) #else null #end;
                __self__.isDST = #if !macro function():Bool return _t1.isDST() #else null #end;
                __self__.isZero = #if !macro function():Bool return _t1.isZero() #else null #end;
                __self__.local = #if !macro function():Time return _t1.local() #else null #end;
                __self__.location = #if !macro function():Ref<Location> return _t1.location() #else null #end;
                __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalBinary() #else null #end;
                __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalJSON() #else null #end;
                __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalText() #else null #end;
                __self__.minute = #if !macro function():GoInt return _t1.minute() #else null #end;
                __self__.month = #if !macro function():Month return _t1.month() #else null #end;
                __self__.nanosecond = #if !macro function():GoInt return _t1.nanosecond() #else null #end;
                __self__.round = #if !macro function(_d:Duration):Time return _t1.round(_d) #else null #end;
                __self__.second = #if !macro function():GoInt return _t1.second() #else null #end;
                __self__.string = #if !macro function():GoString return _t1.string() #else null #end;
                __self__.sub = #if !macro function(__0:Time):Duration return _t1.sub(__0) #else null #end;
                __self__.truncate = #if !macro function(_d:Duration):Time return _t1.truncate(_d) #else null #end;
                __self__.utc = #if !macro function():Time return _t1.utc() #else null #end;
                __self__.unix = #if !macro function():GoInt64 return _t1.unix() #else null #end;
                __self__.unixMicro = #if !macro function():GoInt64 return _t1.unixMicro() #else null #end;
                __self__.unixMilli = #if !macro function():GoInt64 return _t1.unixMilli() #else null #end;
                __self__.unixNano = #if !macro function():GoInt64 return _t1.unixNano() #else null #end;
                __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalBinary(__0) #else null #end;
                __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalJSON(__0) #else null #end;
                __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalText(__0) #else null #end;
                __self__.weekday = #if !macro function():Weekday return _t1.weekday() #else null #end;
                __self__.year = #if !macro function():GoInt return _t1.year() #else null #end;
                __self__.yearDay = #if !macro function():GoInt return _t1.yearDay() #else null #end;
                __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _t1.zone() #else null #end;
                __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _t1.zoneBounds() #else null #end;
                __self__._abs = #if !macro function():GoUInt64 return _t1._abs() #else null #end;
                __self__._addSec = #if !macro function(_sec:GoInt64):Void _t1._addSec(_sec) #else null #end;
                __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _t1._date(__0) #else null #end;
                __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _t1._locabs() #else null #end;
                __self__._mono = #if !macro function():GoInt64 return _t1._mono() #else null #end;
                __self__._nsec = #if !macro function():GoInt32 return _t1._nsec() #else null #end;
                __self__._sec = #if !macro function():GoInt64 return _t1._sec() #else null #end;
                __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _t1._setLoc(__0) #else null #end;
                __self__._setMono = #if !macro function(_sec:GoInt64):Void _t1._setMono(_sec) #else null #end;
                __self__._stripMono = #if !macro function():Void _t1._stripMono() #else null #end;
                __self__._unixSec = #if !macro function():GoInt64 return _t1._unixSec() #else null #end;
                __self__;
            }));
        };
    }
function testMarshalBinaryVersion2(_t:stdgo.testing.Testing.T):Void {
        var __tmp__ = parse(((((("2006-01-02T15:04:05Z07:00" : GoString))) : GoString)), ((((("1880-01-01T00:00:00Z" : GoString))) : GoString))), _t0:Time = __tmp__._0, _err:stdgo.Error = __tmp__._1;
        if (_err != null) {
            _t.errorf(((((("Failed to parse time, error = %v" : GoString))) : GoString)), Go.toInterface(_err));
        };
        var __tmp__ = loadLocation(((((("US/Eastern" : GoString))) : GoString))), _loc:Ref<Location> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
        if (_err != null) {
            _t.errorf(((((("Failed to load location, error = %v" : GoString))) : GoString)), Go.toInterface(_err));
        };
        var _t1:Time = (_t0.in_(_loc) == null ? null : _t0.in_(_loc).__copy__());
        var __tmp__ = _t1.marshalBinary(), _b:Slice<GoUInt8> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
        if (_err != null) {
            _t.errorf(((((("Failed to Marshal, error = %v" : GoString))) : GoString)), Go.toInterface(_err));
        };
        var _t2:Time = ((new Time() : Time));
        _err = _t2.unmarshalBinary(_b);
        if (_err != null) {
            _t.errorf(((((("Failed to Unmarshal, error = %v" : GoString))) : GoString)), Go.toInterface(_err));
        };
        if (!(_t0.equal((_t1 == null ? null : _t1.__copy__())) && _t1.equal((_t2 == null ? null : _t2.__copy__())))) {
            if (!_t0.equal((_t1 == null ? null : _t1.__copy__()))) {
                _t.errorf(((((("The result t1: %+v after Marshal is not matched original t0: %+v" : GoString))) : GoString)), Go.toInterface({
                    final __self__ = new Time_wrapper(_t1);
                    __self__.add = #if !macro function(_d:Duration):Time return _t1.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _t1.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _t1.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b_:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _t1.appendFormat(_b_, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _t1.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _t1.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _t1.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _t1.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _t1.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _t1.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _t1.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _t1.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _t1.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _t1.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _t1.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _t1.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _t1.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _t1.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _t1.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _t1.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _t1.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _t1.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _t1.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _t1.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _t1.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _t1.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _t1.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _t1.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _t1.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _t1.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _t1.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _t1.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _t1.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _t1.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _t1.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _t1.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _t1._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec:GoInt64):Void _t1._addSec(_sec) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _t1._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _t1._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _t1._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _t1._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _t1._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _t1._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec:GoInt64):Void _t1._setMono(_sec) #else null #end;
                    __self__._stripMono = #if !macro function():Void _t1._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _t1._unixSec() #else null #end;
                    __self__;
                }), Go.toInterface({
                    final __self__ = new Time_wrapper(_t0);
                    __self__.add = #if !macro function(_d:Duration):Time return _t0.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _t0.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _t0.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b_:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _t0.appendFormat(_b_, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _t0.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _t0.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _t0.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _t0.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _t0.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _t0.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _t0.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t0.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t0.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _t0.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _t0.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _t0.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _t0.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _t0.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _t0.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _t0.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t0.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t0.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t0.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _t0.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _t0.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _t0.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _t0.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _t0.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _t0.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _t0.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _t0.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _t0.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _t0.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _t0.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _t0.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _t0.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t0.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t0.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t0.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _t0.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _t0.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _t0.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _t0.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _t0.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _t0._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec:GoInt64):Void _t0._addSec(_sec) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _t0._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _t0._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _t0._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _t0._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _t0._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _t0._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec:GoInt64):Void _t0._setMono(_sec) #else null #end;
                    __self__._stripMono = #if !macro function():Void _t0._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _t0._unixSec() #else null #end;
                    __self__;
                }));
            };
            if (!_t1.equal((_t2 == null ? null : _t2.__copy__()))) {
                _t.errorf(((((("The result t2: %+v after Unmarshal is not matched original t1: %+v" : GoString))) : GoString)), Go.toInterface({
                    final __self__ = new Time_wrapper(_t2);
                    __self__.add = #if !macro function(_d:Duration):Time return _t2.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _t2.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _t2.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b_:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _t2.appendFormat(_b_, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _t2.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _t2.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _t2.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _t2.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _t2.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _t2.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _t2.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _t2.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _t2.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _t2.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _t2.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _t2.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _t2.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _t2.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t2.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _t2.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _t2.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _t2.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _t2.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _t2.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _t2.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _t2.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _t2.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _t2.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _t2.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _t2.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _t2.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _t2.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t2.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _t2.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _t2.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _t2.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _t2.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _t2.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _t2._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec:GoInt64):Void _t2._addSec(_sec) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _t2._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _t2._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _t2._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _t2._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _t2._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _t2._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec:GoInt64):Void _t2._setMono(_sec) #else null #end;
                    __self__._stripMono = #if !macro function():Void _t2._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _t2._unixSec() #else null #end;
                    __self__;
                }), Go.toInterface({
                    final __self__ = new Time_wrapper(_t1);
                    __self__.add = #if !macro function(_d:Duration):Time return _t1.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _t1.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _t1.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b_:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _t1.appendFormat(_b_, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _t1.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _t1.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _t1.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _t1.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _t1.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _t1.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _t1.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _t1.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _t1.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _t1.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _t1.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _t1.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _t1.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _t1.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _t1.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _t1.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _t1.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _t1.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _t1.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _t1.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _t1.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _t1.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _t1.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _t1.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _t1.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _t1.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _t1.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _t1.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _t1.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _t1.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _t1.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _t1.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _t1.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _t1.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _t1._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec:GoInt64):Void _t1._addSec(_sec) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _t1._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _t1._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _t1._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _t1._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _t1._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _t1._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec:GoInt64):Void _t1._setMono(_sec) #else null #end;
                    __self__._stripMono = #if !macro function():Void _t1._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _t1._unixSec() #else null #end;
                    __self__;
                }));
            };
        };
    }
/**
    // Issue 17720: Zero value of time.Month fails to print
**/
function testZeroMonthString(_t:stdgo.testing.Testing.T):Void {
        {
            var _got:GoString = ((((((0 : Month)) : Month)).string() : GoString)), _want:GoString = ((((("%!Month(0)" : GoString))) : GoString));
            if (_got != _want) {
                _t.errorf(((((("zero month = %q; want %q" : GoString))) : GoString)), Go.toInterface(_got), Go.toInterface(_want));
            };
        };
    }
/**
    // Issue 24692: Out of range weekday panics
**/
function testWeekdayString(_t:stdgo.testing.Testing.T):Void {
        {
            var _got:GoString = ((((((2 : Weekday)) : Weekday)).string() : GoString)), _want:GoString = ((((("Tuesday" : GoString))) : GoString));
            if (_got != _want) {
                _t.errorf(((((("Tuesday weekday = %q; want %q" : GoString))) : GoString)), Go.toInterface(_got), Go.toInterface(_want));
            };
        };
        {
            var _got:GoString = ((((((14 : Weekday)) : Weekday)).string() : GoString)), _want:GoString = ((((("%!Weekday(14)" : GoString))) : GoString));
            if (_got != _want) {
                _t.errorf(((((("14th weekday = %q; want %q" : GoString))) : GoString)), Go.toInterface(_got), Go.toInterface(_want));
            };
        };
    }
function testReadFileLimit(_t:stdgo.testing.Testing.T):Void {
        {};
        {
            var __tmp__ = stdgo.os.Os.stat(((((("/dev/zero" : GoString))) : GoString))), _0:stdgo.io.fs.Fs.FileInfo = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if (_err != null) {
                _t.skip(Go.toInterface(((((("skipping test without a /dev/zero" : GoString))) : GoString))));
            };
        };
        var __tmp__ = readFile(((((("/dev/zero" : GoString))) : GoString))), _1:Slice<GoUInt8> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
        if ((_err == null) || !stdgo.strings.Strings.contains(_err.error(), ((((("is too large" : GoString))) : GoString)))) {
            _t.errorf(((((("readFile(%q) error = %v; want error containing \'is too large\'" : GoString))) : GoString)), Go.toInterface(((((("/dev/zero" : GoString))) : GoString))), Go.toInterface(_err));
        };
    }
/**
    // Issue 25686: hard crash on concurrent timer access.
    // Issue 37400: panic with "racy use of timers"
    // This test deliberately invokes a race condition.
    // We are testing that we don't crash with "fatal error: panic holding locks",
    // and that we also don't panic.
**/
function testConcurrentTimerReset(_t:stdgo.testing.Testing.T):Void {
        {};
        {};
        var _wg:stdgo.sync.Sync.WaitGroup = (({  } : stdgo.sync.Sync.WaitGroup));
        _wg.add(((8 : GoInt)));
        var _timer = newTimer((("3600000000000" : Duration)));
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < ((8 : GoInt)), _i++, {
                Go.routine(() -> {
                    var a = function(_i:GoInt):Void {
                        var __recover_exception__:AnyInterface = null;
                        var __deferstack__:Array<Void -> Void> = [];
                        try {
                            __deferstack__.unshift(() -> _wg.done());
                            {
                                var _j:GoInt = ((0 : GoInt));
                                Go.cfor(_j < ((1000 : GoInt)), _j++, {
                                    _timer.reset((("3600000000000" : Duration)) + (((_i * _j) : Duration)));
                                });
                            };
                            for (defer in __deferstack__) {
                                defer();
                            };
                            {
                                for (defer in __deferstack__) {
                                    defer();
                                };
                                if (__recover_exception__ != null) throw __recover_exception__;
                                return;
                            };
                        } catch(__exception__) {
                            if (!(__exception__.native is AnyInterfaceData)) throw __exception__;
                            __recover_exception__ = __exception__.native;
                            for (defer in __deferstack__) {
                                defer();
                            };
                            if (__recover_exception__ != null) throw __recover_exception__;
                            return;
                        };
                    };
                    a(_i);
                });
            });
        };
        _wg.wait_();
    }
/**
    // Issue 37400: panic with "racy use of timers".
**/
function testConcurrentTimerResetStop(_t:stdgo.testing.Testing.T):Void {
        {};
        {};
        var _wg:stdgo.sync.Sync.WaitGroup = (({  } : stdgo.sync.Sync.WaitGroup));
        _wg.add(((16 : GoInt)));
        var _timer = newTimer((("3600000000000" : Duration)));
        {
            var _i:GoInt = ((0 : GoInt));
            Go.cfor(_i < ((8 : GoInt)), _i++, {
                Go.routine(() -> {
                    var a = function(_i:GoInt):Void {
                        var __recover_exception__:AnyInterface = null;
                        var __deferstack__:Array<Void -> Void> = [];
                        try {
                            __deferstack__.unshift(() -> _wg.done());
                            {
                                var _j:GoInt = ((0 : GoInt));
                                Go.cfor(_j < ((1000 : GoInt)), _j++, {
                                    _timer.reset((("3600000000000" : Duration)) + (((_i * _j) : Duration)));
                                });
                            };
                            for (defer in __deferstack__) {
                                defer();
                            };
                            {
                                for (defer in __deferstack__) {
                                    defer();
                                };
                                if (__recover_exception__ != null) throw __recover_exception__;
                                return;
                            };
                        } catch(__exception__) {
                            if (!(__exception__.native is AnyInterfaceData)) throw __exception__;
                            __recover_exception__ = __exception__.native;
                            for (defer in __deferstack__) {
                                defer();
                            };
                            if (__recover_exception__ != null) throw __recover_exception__;
                            return;
                        };
                    };
                    a(_i);
                });
                Go.routine(() -> {
                    var a = function(_i:GoInt):Void {
                        var __recover_exception__:AnyInterface = null;
                        var __deferstack__:Array<Void -> Void> = [];
                        try {
                            __deferstack__.unshift(() -> _wg.done());
                            _timer.stop();
                            for (defer in __deferstack__) {
                                defer();
                            };
                            {
                                for (defer in __deferstack__) {
                                    defer();
                                };
                                if (__recover_exception__ != null) throw __recover_exception__;
                                return;
                            };
                        } catch(__exception__) {
                            if (!(__exception__.native is AnyInterfaceData)) throw __exception__;
                            __recover_exception__ = __exception__.native;
                            for (defer in __deferstack__) {
                                defer();
                            };
                            if (__recover_exception__ != null) throw __recover_exception__;
                            return;
                        };
                    };
                    a(_i);
                });
            });
        };
        _wg.wait_();
    }
function testTimeIsDST(_t:stdgo.testing.Testing.T):Void {
        var __recover_exception__:AnyInterface = null;
        var __deferstack__:Array<Void -> Void> = [];
        try {
            var _undo:() -> Void = disablePlatformSources();
            __deferstack__.unshift(() -> _undo());
            var __tmp__ = loadLocation(((((("Australia/Sydney" : GoString))) : GoString))), _tzWithDST:Ref<Location> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if (_err != null) {
                _t.fatalf(((((("could not load tz \'Australia/Sydney\': %v" : GoString))) : GoString)), Go.toInterface(_err));
            };
            var __tmp__ = loadLocation(((((("Australia/Brisbane" : GoString))) : GoString))), _tzWithoutDST:Ref<Location> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if (_err != null) {
                _t.fatalf(((((("could not load tz \'Australia/Brisbane\': %v" : GoString))) : GoString)), Go.toInterface(_err));
            };
            var _tzFixed = fixedZone(((((("FIXED_TIME" : GoString))) : GoString)), ((12345 : GoInt)));
            var _tests = {
                var s:GoArray<T__struct_26> = new GoArray<T__struct_26>(...[for (i in 0 ... 8) (({ _time : (({  } : Time)), _want : false } : T__struct_26))]);
                s[0] = (({ _time : (date(((2009 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((2009 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()), _want : false } : T__struct_26));
                s[1] = (({ _time : (date(((2009 : GoInt)), ((6 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((2009 : GoInt)), ((6 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()), _want : false } : T__struct_26));
                s[2] = (({ _time : (date(((2009 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _tzWithDST) == null ? null : date(((2009 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _tzWithDST).__copy__()), _want : true } : T__struct_26));
                s[3] = (({ _time : (date(((2009 : GoInt)), ((6 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _tzWithDST) == null ? null : date(((2009 : GoInt)), ((6 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _tzWithDST).__copy__()), _want : false } : T__struct_26));
                s[4] = (({ _time : (date(((2009 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _tzWithoutDST) == null ? null : date(((2009 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _tzWithoutDST).__copy__()), _want : false } : T__struct_26));
                s[5] = (({ _time : (date(((2009 : GoInt)), ((6 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _tzWithoutDST) == null ? null : date(((2009 : GoInt)), ((6 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _tzWithoutDST).__copy__()), _want : false } : T__struct_26));
                s[6] = (({ _time : (date(((2009 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _tzFixed) == null ? null : date(((2009 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _tzFixed).__copy__()), _want : false } : T__struct_26));
                s[7] = (({ _time : (date(((2009 : GoInt)), ((6 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _tzFixed) == null ? null : date(((2009 : GoInt)), ((6 : Month)), ((1 : GoInt)), ((12 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _tzFixed).__copy__()), _want : false } : T__struct_26));
                s;
            };
            for (_i => _tt in _tests) {
                var _got:Bool = _tt._time.isDST();
                if (_got != _tt._want) {
                    _t.errorf(((((("#%d:: (%#v).IsDST()=%t, want %t" : GoString))) : GoString)), Go.toInterface(_i), Go.toInterface(_tt._time.format(((((("2006-01-02T15:04:05Z07:00" : GoString))) : GoString)))), Go.toInterface(_got), Go.toInterface(_tt._want));
                };
            };
            for (defer in __deferstack__) {
                defer();
            };
            {
                for (defer in __deferstack__) {
                    defer();
                };
                if (__recover_exception__ != null) throw __recover_exception__;
                return;
            };
        } catch(__exception__) {
            if (!(__exception__.native is AnyInterfaceData)) throw __exception__;
            __recover_exception__ = __exception__.native;
            for (defer in __deferstack__) {
                defer();
            };
            if (__recover_exception__ != null) throw __recover_exception__;
            return;
        };
    }
function testTimeAddSecOverflow(_t:stdgo.testing.Testing.T):Void {
        var _maxInt64:GoInt64 = (("9223372036854775807" : GoInt64));
        var _timeExt:GoInt64 = (_maxInt64 - (("62135596800" : GoInt64))) - ((50 : GoInt64));
        var _notMonoTime:Time = (unix(_timeExt, ((0 : GoInt64))) == null ? null : unix(_timeExt, ((0 : GoInt64))).__copy__());
        {
            var _i:GoInt64 = ((((0 : GoInt64)) : GoInt64));
            Go.cfor(_i < ((100 : GoInt64)), _i++, {
                var _sec:GoInt64 = _notMonoTime.unix();
                _notMonoTime = (_notMonoTime.add((((_i * ((1e+09 : GoInt64))) : Duration))) == null ? null : _notMonoTime.add((((_i * ((1e+09 : GoInt64))) : Duration))).__copy__());
                {
                    var _newSec:GoInt64 = _notMonoTime.unix();
                    if ((_newSec != (_sec + _i)) && ((_newSec + (("62135596800" : GoInt64))) != _maxInt64)) {
                        _t.fatalf(((((("time ext: %d overflows with positive delta, overflow threshold: %d" : GoString))) : GoString)), Go.toInterface(_newSec), Go.toInterface(_maxInt64));
                    };
                };
            });
        };
        _maxInt64 = -_maxInt64;
        _notMonoTime = (notMonoNegativeTime == null ? null : notMonoNegativeTime.__copy__());
        {
            var _i:GoInt64 = ((((0 : GoInt64)) : GoInt64));
            Go.cfor(_i > ((-100 : GoInt64)), _i--, {
                var _sec:GoInt64 = _notMonoTime.unix();
                _notMonoTime = (_notMonoTime.add((((_i * ((1e+09 : GoInt64))) : Duration))) == null ? null : _notMonoTime.add((((_i * ((1e+09 : GoInt64))) : Duration))).__copy__());
                {
                    var _newSec:GoInt64 = _notMonoTime.unix();
                    if ((_newSec != (_sec + _i)) && ((_newSec + (("62135596800" : GoInt64))) != _maxInt64)) {
                        _t.fatalf(((((("time ext: %d overflows with positive delta, overflow threshold: %d" : GoString))) : GoString)), Go.toInterface(_newSec), Go.toInterface(_maxInt64));
                    };
                };
            });
        };
    }
/**
    // Issue 49284: time: ParseInLocation incorrectly because of Daylight Saving Time
**/
function testTimeWithZoneTransition(_t:stdgo.testing.Testing.T):Void {
        var __recover_exception__:AnyInterface = null;
        var __deferstack__:Array<Void -> Void> = [];
        try {
            var _undo:() -> Void = disablePlatformSources();
            __deferstack__.unshift(() -> _undo());
            var __tmp__ = loadLocation(((((("Asia/Shanghai" : GoString))) : GoString))), _loc:Ref<Location> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if (_err != null) {
                _t.fatal(Go.toInterface(_err));
            };
            var _tests = {
                var s:GoArray<T__struct_27> = new GoArray<T__struct_27>(...[for (i in 0 ... 8) (({ _give : (({  } : Time)), _want : (({  } : Time)) } : T__struct_27))]);
                s[0] = (({ _give : (date(((1991 : GoInt)), ((4 : Month)), ((13 : GoInt)), ((17 : GoInt)), ((50 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc) == null ? null : date(((1991 : GoInt)), ((4 : Month)), ((13 : GoInt)), ((17 : GoInt)), ((50 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc).__copy__()), _want : (date(((1991 : GoInt)), ((4 : Month)), ((13 : GoInt)), ((9 : GoInt)), ((50 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((1991 : GoInt)), ((4 : Month)), ((13 : GoInt)), ((9 : GoInt)), ((50 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()) } : T__struct_27));
                s[1] = (({ _give : (date(((1991 : GoInt)), ((4 : Month)), ((13 : GoInt)), ((18 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc) == null ? null : date(((1991 : GoInt)), ((4 : Month)), ((13 : GoInt)), ((18 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc).__copy__()), _want : (date(((1991 : GoInt)), ((4 : Month)), ((13 : GoInt)), ((10 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((1991 : GoInt)), ((4 : Month)), ((13 : GoInt)), ((10 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()) } : T__struct_27));
                s[2] = (({ _give : (date(((1991 : GoInt)), ((4 : Month)), ((14 : GoInt)), ((1 : GoInt)), ((50 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc) == null ? null : date(((1991 : GoInt)), ((4 : Month)), ((14 : GoInt)), ((1 : GoInt)), ((50 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc).__copy__()), _want : (date(((1991 : GoInt)), ((4 : Month)), ((13 : GoInt)), ((17 : GoInt)), ((50 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((1991 : GoInt)), ((4 : Month)), ((13 : GoInt)), ((17 : GoInt)), ((50 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()) } : T__struct_27));
                s[3] = (({ _give : (date(((1991 : GoInt)), ((4 : Month)), ((14 : GoInt)), ((3 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc) == null ? null : date(((1991 : GoInt)), ((4 : Month)), ((14 : GoInt)), ((3 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc).__copy__()), _want : (date(((1991 : GoInt)), ((4 : Month)), ((13 : GoInt)), ((18 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((1991 : GoInt)), ((4 : Month)), ((13 : GoInt)), ((18 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()) } : T__struct_27));
                s[4] = (({ _give : (date(((1991 : GoInt)), ((9 : Month)), ((14 : GoInt)), ((16 : GoInt)), ((50 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc) == null ? null : date(((1991 : GoInt)), ((9 : Month)), ((14 : GoInt)), ((16 : GoInt)), ((50 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc).__copy__()), _want : (date(((1991 : GoInt)), ((9 : Month)), ((14 : GoInt)), ((7 : GoInt)), ((50 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((1991 : GoInt)), ((9 : Month)), ((14 : GoInt)), ((7 : GoInt)), ((50 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()) } : T__struct_27));
                s[5] = (({ _give : (date(((1991 : GoInt)), ((9 : Month)), ((14 : GoInt)), ((17 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc) == null ? null : date(((1991 : GoInt)), ((9 : Month)), ((14 : GoInt)), ((17 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc).__copy__()), _want : (date(((1991 : GoInt)), ((9 : Month)), ((14 : GoInt)), ((8 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((1991 : GoInt)), ((9 : Month)), ((14 : GoInt)), ((8 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()) } : T__struct_27));
                s[6] = (({ _give : (date(((1991 : GoInt)), ((9 : Month)), ((15 : GoInt)), ((0 : GoInt)), ((50 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc) == null ? null : date(((1991 : GoInt)), ((9 : Month)), ((15 : GoInt)), ((0 : GoInt)), ((50 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc).__copy__()), _want : (date(((1991 : GoInt)), ((9 : Month)), ((14 : GoInt)), ((15 : GoInt)), ((50 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((1991 : GoInt)), ((9 : Month)), ((14 : GoInt)), ((15 : GoInt)), ((50 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()) } : T__struct_27));
                s[7] = (({ _give : (date(((1991 : GoInt)), ((9 : Month)), ((15 : GoInt)), ((2 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc) == null ? null : date(((1991 : GoInt)), ((9 : Month)), ((15 : GoInt)), ((2 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc).__copy__()), _want : (date(((1991 : GoInt)), ((9 : Month)), ((14 : GoInt)), ((18 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc) == null ? null : date(((1991 : GoInt)), ((9 : Month)), ((14 : GoInt)), ((18 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), utc).__copy__()) } : T__struct_27));
                s;
            };
            for (_i => _tt in _tests) {
                if (!_tt._give.equal((_tt._want == null ? null : _tt._want.__copy__()))) {
                    _t.errorf(((((("#%d:: %#v is not equal to %#v" : GoString))) : GoString)), Go.toInterface(_i), Go.toInterface(_tt._give.format(((((("2006-01-02T15:04:05Z07:00" : GoString))) : GoString)))), Go.toInterface(_tt._want.format(((((("2006-01-02T15:04:05Z07:00" : GoString))) : GoString)))));
                };
            };
            for (defer in __deferstack__) {
                defer();
            };
            {
                for (defer in __deferstack__) {
                    defer();
                };
                if (__recover_exception__ != null) throw __recover_exception__;
                return;
            };
        } catch(__exception__) {
            if (!(__exception__.native is AnyInterfaceData)) throw __exception__;
            __recover_exception__ = __exception__.native;
            for (defer in __deferstack__) {
                defer();
            };
            if (__recover_exception__ != null) throw __recover_exception__;
            return;
        };
    }
function testZoneBounds(_t:stdgo.testing.Testing.T):Void {
        var __recover_exception__:AnyInterface = null;
        var __deferstack__:Array<Void -> Void> = [];
        try {
            var _undo:() -> Void = disablePlatformSources();
            __deferstack__.unshift(() -> _undo());
            var __tmp__ = loadLocation(((((("Asia/Shanghai" : GoString))) : GoString))), _loc:Ref<Location> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if (_err != null) {
                _t.fatal(Go.toInterface(_err));
            };
            for (_0 => _test in _utctests) {
                var _sec:GoInt64 = _test._seconds;
                var _golden = _test._golden;
                var _tm:Time = (unix(_sec, ((0 : GoInt64))).utc() == null ? null : unix(_sec, ((0 : GoInt64))).utc().__copy__());
                var __tmp__ = _tm.zoneBounds(), _start:Time = __tmp__._0, _end:Time = __tmp__._1;
                if (!(_start.isZero() && _end.isZero())) {
                    _t.errorf(((((("ZoneBounds of %+v expects two zero Time, got:\n  start=%v\n  end=%v" : GoString))) : GoString)), Go.toInterface(_golden), Go.toInterface({
                        final __self__ = new Time_wrapper(_start);
                        __self__.add = #if !macro function(_d:Duration):Time return _start.add(_d) #else null #end;
                        __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _start.addDate(_years, _months, _days) #else null #end;
                        __self__.after = #if !macro function(__0:Time):Bool return _start.after(__0) #else null #end;
                        __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _start.appendFormat(_b, _layout) #else null #end;
                        __self__.before = #if !macro function(__0:Time):Bool return _start.before(__0) #else null #end;
                        __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _start.clock() #else null #end;
                        __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _start.date() #else null #end;
                        __self__.day = #if !macro function():GoInt return _start.day() #else null #end;
                        __self__.equal = #if !macro function(__0:Time):Bool return _start.equal(__0) #else null #end;
                        __self__.format = #if !macro function(__0:GoString):GoString return _start.format(__0) #else null #end;
                        __self__.goString = #if !macro function():GoString return _start.goString() #else null #end;
                        __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _start.gobDecode(__0) #else null #end;
                        __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _start.gobEncode() #else null #end;
                        __self__.hour = #if !macro function():GoInt return _start.hour() #else null #end;
                        __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _start.isoweek() #else null #end;
                        __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _start.in_(__0) #else null #end;
                        __self__.isDST = #if !macro function():Bool return _start.isDST() #else null #end;
                        __self__.isZero = #if !macro function():Bool return _start.isZero() #else null #end;
                        __self__.local = #if !macro function():Time return _start.local() #else null #end;
                        __self__.location = #if !macro function():Ref<Location> return _start.location() #else null #end;
                        __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _start.marshalBinary() #else null #end;
                        __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _start.marshalJSON() #else null #end;
                        __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _start.marshalText() #else null #end;
                        __self__.minute = #if !macro function():GoInt return _start.minute() #else null #end;
                        __self__.month = #if !macro function():Month return _start.month() #else null #end;
                        __self__.nanosecond = #if !macro function():GoInt return _start.nanosecond() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Time return _start.round(_d) #else null #end;
                        __self__.second = #if !macro function():GoInt return _start.second() #else null #end;
                        __self__.string = #if !macro function():GoString return _start.string() #else null #end;
                        __self__.sub = #if !macro function(__0:Time):Duration return _start.sub(__0) #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Time return _start.truncate(_d) #else null #end;
                        __self__.utc = #if !macro function():Time return _start.utc() #else null #end;
                        __self__.unix = #if !macro function():GoInt64 return _start.unix() #else null #end;
                        __self__.unixMicro = #if !macro function():GoInt64 return _start.unixMicro() #else null #end;
                        __self__.unixMilli = #if !macro function():GoInt64 return _start.unixMilli() #else null #end;
                        __self__.unixNano = #if !macro function():GoInt64 return _start.unixNano() #else null #end;
                        __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _start.unmarshalBinary(__0) #else null #end;
                        __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _start.unmarshalJSON(__0) #else null #end;
                        __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _start.unmarshalText(__0) #else null #end;
                        __self__.weekday = #if !macro function():Weekday return _start.weekday() #else null #end;
                        __self__.year = #if !macro function():GoInt return _start.year() #else null #end;
                        __self__.yearDay = #if !macro function():GoInt return _start.yearDay() #else null #end;
                        __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _start.zone() #else null #end;
                        __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _start.zoneBounds() #else null #end;
                        __self__._abs = #if !macro function():GoUInt64 return _start._abs() #else null #end;
                        __self__._addSec = #if !macro function(_sec_:GoInt64):Void _start._addSec(_sec_) #else null #end;
                        __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _start._date(__0) #else null #end;
                        __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _start._locabs() #else null #end;
                        __self__._mono = #if !macro function():GoInt64 return _start._mono() #else null #end;
                        __self__._nsec = #if !macro function():GoInt32 return _start._nsec() #else null #end;
                        __self__._sec = #if !macro function():GoInt64 return _start._sec() #else null #end;
                        __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _start._setLoc(__0) #else null #end;
                        __self__._setMono = #if !macro function(_sec__:GoInt64):Void _start._setMono(_sec__) #else null #end;
                        __self__._stripMono = #if !macro function():Void _start._stripMono() #else null #end;
                        __self__._unixSec = #if !macro function():GoInt64 return _start._unixSec() #else null #end;
                        __self__;
                    }), Go.toInterface({
                        final __self__ = new Time_wrapper(_end);
                        __self__.add = #if !macro function(_d:Duration):Time return _end.add(_d) #else null #end;
                        __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _end.addDate(_years, _months, _days) #else null #end;
                        __self__.after = #if !macro function(__0:Time):Bool return _end.after(__0) #else null #end;
                        __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _end.appendFormat(_b, _layout) #else null #end;
                        __self__.before = #if !macro function(__0:Time):Bool return _end.before(__0) #else null #end;
                        __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _end.clock() #else null #end;
                        __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _end.date() #else null #end;
                        __self__.day = #if !macro function():GoInt return _end.day() #else null #end;
                        __self__.equal = #if !macro function(__0:Time):Bool return _end.equal(__0) #else null #end;
                        __self__.format = #if !macro function(__0:GoString):GoString return _end.format(__0) #else null #end;
                        __self__.goString = #if !macro function():GoString return _end.goString() #else null #end;
                        __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _end.gobDecode(__0) #else null #end;
                        __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _end.gobEncode() #else null #end;
                        __self__.hour = #if !macro function():GoInt return _end.hour() #else null #end;
                        __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _end.isoweek() #else null #end;
                        __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _end.in_(__0) #else null #end;
                        __self__.isDST = #if !macro function():Bool return _end.isDST() #else null #end;
                        __self__.isZero = #if !macro function():Bool return _end.isZero() #else null #end;
                        __self__.local = #if !macro function():Time return _end.local() #else null #end;
                        __self__.location = #if !macro function():Ref<Location> return _end.location() #else null #end;
                        __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _end.marshalBinary() #else null #end;
                        __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _end.marshalJSON() #else null #end;
                        __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _end.marshalText() #else null #end;
                        __self__.minute = #if !macro function():GoInt return _end.minute() #else null #end;
                        __self__.month = #if !macro function():Month return _end.month() #else null #end;
                        __self__.nanosecond = #if !macro function():GoInt return _end.nanosecond() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Time return _end.round(_d) #else null #end;
                        __self__.second = #if !macro function():GoInt return _end.second() #else null #end;
                        __self__.string = #if !macro function():GoString return _end.string() #else null #end;
                        __self__.sub = #if !macro function(__0:Time):Duration return _end.sub(__0) #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Time return _end.truncate(_d) #else null #end;
                        __self__.utc = #if !macro function():Time return _end.utc() #else null #end;
                        __self__.unix = #if !macro function():GoInt64 return _end.unix() #else null #end;
                        __self__.unixMicro = #if !macro function():GoInt64 return _end.unixMicro() #else null #end;
                        __self__.unixMilli = #if !macro function():GoInt64 return _end.unixMilli() #else null #end;
                        __self__.unixNano = #if !macro function():GoInt64 return _end.unixNano() #else null #end;
                        __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _end.unmarshalBinary(__0) #else null #end;
                        __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _end.unmarshalJSON(__0) #else null #end;
                        __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _end.unmarshalText(__0) #else null #end;
                        __self__.weekday = #if !macro function():Weekday return _end.weekday() #else null #end;
                        __self__.year = #if !macro function():GoInt return _end.year() #else null #end;
                        __self__.yearDay = #if !macro function():GoInt return _end.yearDay() #else null #end;
                        __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _end.zone() #else null #end;
                        __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _end.zoneBounds() #else null #end;
                        __self__._abs = #if !macro function():GoUInt64 return _end._abs() #else null #end;
                        __self__._addSec = #if !macro function(_sec_:GoInt64):Void _end._addSec(_sec_) #else null #end;
                        __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _end._date(__0) #else null #end;
                        __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _end._locabs() #else null #end;
                        __self__._mono = #if !macro function():GoInt64 return _end._mono() #else null #end;
                        __self__._nsec = #if !macro function():GoInt32 return _end._nsec() #else null #end;
                        __self__._sec = #if !macro function():GoInt64 return _end._sec() #else null #end;
                        __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _end._setLoc(__0) #else null #end;
                        __self__._setMono = #if !macro function(_sec__:GoInt64):Void _end._setMono(_sec__) #else null #end;
                        __self__._stripMono = #if !macro function():Void _end._stripMono() #else null #end;
                        __self__._unixSec = #if !macro function():GoInt64 return _end._unixSec() #else null #end;
                        __self__;
                    }));
                };
            };
            var _beginTime:Time = (date(((-2147483648 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc) == null ? null : date(((-2147483648 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc).__copy__());
            var __tmp__ = _beginTime.zoneBounds(), _start:Time = __tmp__._0, _end:Time = __tmp__._1;
            if (!_start.isZero() || _end.isZero()) {
                _t.errorf(((((("ZoneBounds of %v expects start is zero Time, got:\n  start=%v\n  end=%v" : GoString))) : GoString)), Go.toInterface({
                    final __self__ = new Time_wrapper(_beginTime);
                    __self__.add = #if !macro function(_d:Duration):Time return _beginTime.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _beginTime.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _beginTime.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _beginTime.appendFormat(_b, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _beginTime.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _beginTime.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _beginTime.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _beginTime.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _beginTime.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _beginTime.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _beginTime.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _beginTime.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _beginTime.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _beginTime.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _beginTime.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _beginTime.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _beginTime.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _beginTime.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _beginTime.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _beginTime.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _beginTime.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _beginTime.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _beginTime.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _beginTime.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _beginTime.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _beginTime.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _beginTime.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _beginTime.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _beginTime.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _beginTime.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _beginTime.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _beginTime.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _beginTime.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _beginTime.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _beginTime.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _beginTime.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _beginTime.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _beginTime.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _beginTime.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _beginTime.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _beginTime.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _beginTime.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _beginTime.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _beginTime.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _beginTime._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec_:GoInt64):Void _beginTime._addSec(_sec_) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _beginTime._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _beginTime._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _beginTime._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _beginTime._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _beginTime._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _beginTime._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec__:GoInt64):Void _beginTime._setMono(_sec__) #else null #end;
                    __self__._stripMono = #if !macro function():Void _beginTime._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _beginTime._unixSec() #else null #end;
                    __self__;
                }), Go.toInterface({
                    final __self__ = new Time_wrapper(_start);
                    __self__.add = #if !macro function(_d:Duration):Time return _start.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _start.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _start.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _start.appendFormat(_b, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _start.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _start.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _start.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _start.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _start.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _start.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _start.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _start.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _start.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _start.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _start.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _start.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _start.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _start.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _start.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _start.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _start.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _start.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _start.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _start.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _start.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _start.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _start.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _start.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _start.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _start.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _start.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _start.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _start.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _start.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _start.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _start.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _start.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _start.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _start.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _start.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _start.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _start.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _start.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _start.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _start._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec_:GoInt64):Void _start._addSec(_sec_) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _start._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _start._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _start._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _start._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _start._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _start._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec__:GoInt64):Void _start._setMono(_sec__) #else null #end;
                    __self__._stripMono = #if !macro function():Void _start._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _start._unixSec() #else null #end;
                    __self__;
                }), Go.toInterface({
                    final __self__ = new Time_wrapper(_end);
                    __self__.add = #if !macro function(_d:Duration):Time return _end.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _end.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _end.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _end.appendFormat(_b, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _end.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _end.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _end.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _end.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _end.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _end.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _end.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _end.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _end.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _end.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _end.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _end.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _end.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _end.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _end.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _end.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _end.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _end.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _end.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _end.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _end.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _end.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _end.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _end.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _end.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _end.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _end.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _end.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _end.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _end.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _end.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _end.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _end.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _end.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _end.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _end.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _end.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _end.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _end.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _end.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _end._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec_:GoInt64):Void _end._addSec(_sec_) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _end._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _end._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _end._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _end._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _end._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _end._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec__:GoInt64):Void _end._setMono(_sec__) #else null #end;
                    __self__._stripMono = #if !macro function():Void _end._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _end._unixSec() #else null #end;
                    __self__;
                }));
            };
            var _foreverTime:Time = (date(((2147483647 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc) == null ? null : date(((2147483647 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc).__copy__());
            {
                var __tmp__ = _foreverTime.zoneBounds();
                _start = (__tmp__._0 == null ? null : __tmp__._0.__copy__());
                _end = (__tmp__._1 == null ? null : __tmp__._1.__copy__());
            };
            if (_start.isZero() || !_end.isZero()) {
                _t.errorf(((((("ZoneBounds of %v expects end is zero Time, got:\n  start=%v\n  end=%v" : GoString))) : GoString)), Go.toInterface({
                    final __self__ = new Time_wrapper(_foreverTime);
                    __self__.add = #if !macro function(_d:Duration):Time return _foreverTime.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _foreverTime.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _foreverTime.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _foreverTime.appendFormat(_b, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _foreverTime.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _foreverTime.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _foreverTime.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _foreverTime.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _foreverTime.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _foreverTime.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _foreverTime.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _foreverTime.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _foreverTime.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _foreverTime.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _foreverTime.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _foreverTime.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _foreverTime.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _foreverTime.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _foreverTime.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _foreverTime.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _foreverTime.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _foreverTime.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _foreverTime.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _foreverTime.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _foreverTime.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _foreverTime.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _foreverTime.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _foreverTime.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _foreverTime.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _foreverTime.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _foreverTime.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _foreverTime.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _foreverTime.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _foreverTime.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _foreverTime.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _foreverTime.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _foreverTime.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _foreverTime.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _foreverTime.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _foreverTime.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _foreverTime.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _foreverTime.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _foreverTime.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _foreverTime.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _foreverTime._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec_:GoInt64):Void _foreverTime._addSec(_sec_) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _foreverTime._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _foreverTime._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _foreverTime._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _foreverTime._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _foreverTime._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _foreverTime._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec__:GoInt64):Void _foreverTime._setMono(_sec__) #else null #end;
                    __self__._stripMono = #if !macro function():Void _foreverTime._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _foreverTime._unixSec() #else null #end;
                    __self__;
                }), Go.toInterface({
                    final __self__ = new Time_wrapper(_start);
                    __self__.add = #if !macro function(_d:Duration):Time return _start.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _start.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _start.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _start.appendFormat(_b, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _start.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _start.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _start.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _start.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _start.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _start.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _start.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _start.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _start.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _start.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _start.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _start.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _start.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _start.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _start.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _start.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _start.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _start.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _start.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _start.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _start.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _start.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _start.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _start.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _start.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _start.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _start.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _start.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _start.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _start.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _start.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _start.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _start.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _start.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _start.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _start.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _start.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _start.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _start.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _start.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _start._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec_:GoInt64):Void _start._addSec(_sec_) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _start._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _start._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _start._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _start._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _start._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _start._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec__:GoInt64):Void _start._setMono(_sec__) #else null #end;
                    __self__._stripMono = #if !macro function():Void _start._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _start._unixSec() #else null #end;
                    __self__;
                }), Go.toInterface({
                    final __self__ = new Time_wrapper(_end);
                    __self__.add = #if !macro function(_d:Duration):Time return _end.add(_d) #else null #end;
                    __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _end.addDate(_years, _months, _days) #else null #end;
                    __self__.after = #if !macro function(__0:Time):Bool return _end.after(__0) #else null #end;
                    __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _end.appendFormat(_b, _layout) #else null #end;
                    __self__.before = #if !macro function(__0:Time):Bool return _end.before(__0) #else null #end;
                    __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _end.clock() #else null #end;
                    __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _end.date() #else null #end;
                    __self__.day = #if !macro function():GoInt return _end.day() #else null #end;
                    __self__.equal = #if !macro function(__0:Time):Bool return _end.equal(__0) #else null #end;
                    __self__.format = #if !macro function(__0:GoString):GoString return _end.format(__0) #else null #end;
                    __self__.goString = #if !macro function():GoString return _end.goString() #else null #end;
                    __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _end.gobDecode(__0) #else null #end;
                    __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _end.gobEncode() #else null #end;
                    __self__.hour = #if !macro function():GoInt return _end.hour() #else null #end;
                    __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _end.isoweek() #else null #end;
                    __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _end.in_(__0) #else null #end;
                    __self__.isDST = #if !macro function():Bool return _end.isDST() #else null #end;
                    __self__.isZero = #if !macro function():Bool return _end.isZero() #else null #end;
                    __self__.local = #if !macro function():Time return _end.local() #else null #end;
                    __self__.location = #if !macro function():Ref<Location> return _end.location() #else null #end;
                    __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _end.marshalBinary() #else null #end;
                    __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _end.marshalJSON() #else null #end;
                    __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _end.marshalText() #else null #end;
                    __self__.minute = #if !macro function():GoInt return _end.minute() #else null #end;
                    __self__.month = #if !macro function():Month return _end.month() #else null #end;
                    __self__.nanosecond = #if !macro function():GoInt return _end.nanosecond() #else null #end;
                    __self__.round = #if !macro function(_d:Duration):Time return _end.round(_d) #else null #end;
                    __self__.second = #if !macro function():GoInt return _end.second() #else null #end;
                    __self__.string = #if !macro function():GoString return _end.string() #else null #end;
                    __self__.sub = #if !macro function(__0:Time):Duration return _end.sub(__0) #else null #end;
                    __self__.truncate = #if !macro function(_d:Duration):Time return _end.truncate(_d) #else null #end;
                    __self__.utc = #if !macro function():Time return _end.utc() #else null #end;
                    __self__.unix = #if !macro function():GoInt64 return _end.unix() #else null #end;
                    __self__.unixMicro = #if !macro function():GoInt64 return _end.unixMicro() #else null #end;
                    __self__.unixMilli = #if !macro function():GoInt64 return _end.unixMilli() #else null #end;
                    __self__.unixNano = #if !macro function():GoInt64 return _end.unixNano() #else null #end;
                    __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _end.unmarshalBinary(__0) #else null #end;
                    __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _end.unmarshalJSON(__0) #else null #end;
                    __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _end.unmarshalText(__0) #else null #end;
                    __self__.weekday = #if !macro function():Weekday return _end.weekday() #else null #end;
                    __self__.year = #if !macro function():GoInt return _end.year() #else null #end;
                    __self__.yearDay = #if !macro function():GoInt return _end.yearDay() #else null #end;
                    __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _end.zone() #else null #end;
                    __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _end.zoneBounds() #else null #end;
                    __self__._abs = #if !macro function():GoUInt64 return _end._abs() #else null #end;
                    __self__._addSec = #if !macro function(_sec_:GoInt64):Void _end._addSec(_sec_) #else null #end;
                    __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _end._date(__0) #else null #end;
                    __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _end._locabs() #else null #end;
                    __self__._mono = #if !macro function():GoInt64 return _end._mono() #else null #end;
                    __self__._nsec = #if !macro function():GoInt32 return _end._nsec() #else null #end;
                    __self__._sec = #if !macro function():GoInt64 return _end._sec() #else null #end;
                    __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _end._setLoc(__0) #else null #end;
                    __self__._setMono = #if !macro function(_sec__:GoInt64):Void _end._setMono(_sec__) #else null #end;
                    __self__._stripMono = #if !macro function():Void _end._stripMono() #else null #end;
                    __self__._unixSec = #if !macro function():GoInt64 return _end._unixSec() #else null #end;
                    __self__;
                }));
            };
            var _boundOne:Time = (date(((1990 : GoInt)), ((9 : Month)), ((16 : GoInt)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc) == null ? null : date(((1990 : GoInt)), ((9 : Month)), ((16 : GoInt)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc).__copy__());
            var _boundTwo:Time = (date(((1991 : GoInt)), ((4 : Month)), ((14 : GoInt)), ((3 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc) == null ? null : date(((1991 : GoInt)), ((4 : Month)), ((14 : GoInt)), ((3 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc).__copy__());
            var _boundThree:Time = (date(((1991 : GoInt)), ((9 : Month)), ((15 : GoInt)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc) == null ? null : date(((1991 : GoInt)), ((9 : Month)), ((15 : GoInt)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc).__copy__());
            var _makeLocalTime:GoInt64 -> Time = function(_sec:GoInt64):Time {
                return (unix(_sec, ((0 : GoInt64))) == null ? null : unix(_sec, ((0 : GoInt64))).__copy__());
            };
            var _realTests = {
                var s:GoArray<T__struct_28> = new GoArray<T__struct_28>(...[for (i in 0 ... 15) (({ _giveTime : (({  } : Time)), _wantStart : (({  } : Time)), _wantEnd : (({  } : Time)) } : T__struct_28))]);
                s[0] = (({ _giveTime : (date(((1991 : GoInt)), ((4 : Month)), ((13 : GoInt)), ((17 : GoInt)), ((50 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc) == null ? null : date(((1991 : GoInt)), ((4 : Month)), ((13 : GoInt)), ((17 : GoInt)), ((50 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc).__copy__()), _wantStart : (_boundOne == null ? null : _boundOne.__copy__()), _wantEnd : (_boundTwo == null ? null : _boundTwo.__copy__()) } : T__struct_28));
                s[1] = (({ _giveTime : (date(((1991 : GoInt)), ((4 : Month)), ((13 : GoInt)), ((18 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc) == null ? null : date(((1991 : GoInt)), ((4 : Month)), ((13 : GoInt)), ((18 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc).__copy__()), _wantStart : (_boundOne == null ? null : _boundOne.__copy__()), _wantEnd : (_boundTwo == null ? null : _boundTwo.__copy__()) } : T__struct_28));
                s[2] = (({ _giveTime : (date(((1991 : GoInt)), ((4 : Month)), ((14 : GoInt)), ((1 : GoInt)), ((50 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc) == null ? null : date(((1991 : GoInt)), ((4 : Month)), ((14 : GoInt)), ((1 : GoInt)), ((50 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc).__copy__()), _wantStart : (_boundOne == null ? null : _boundOne.__copy__()), _wantEnd : (_boundTwo == null ? null : _boundTwo.__copy__()) } : T__struct_28));
                s[3] = (({ _giveTime : (_boundTwo == null ? null : _boundTwo.__copy__()), _wantStart : (_boundTwo == null ? null : _boundTwo.__copy__()), _wantEnd : (_boundThree == null ? null : _boundThree.__copy__()) } : T__struct_28));
                s[4] = (({ _giveTime : (date(((1991 : GoInt)), ((9 : Month)), ((14 : GoInt)), ((16 : GoInt)), ((50 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc) == null ? null : date(((1991 : GoInt)), ((9 : Month)), ((14 : GoInt)), ((16 : GoInt)), ((50 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc).__copy__()), _wantStart : (_boundTwo == null ? null : _boundTwo.__copy__()), _wantEnd : (_boundThree == null ? null : _boundThree.__copy__()) } : T__struct_28));
                s[5] = (({ _giveTime : (date(((1991 : GoInt)), ((9 : Month)), ((14 : GoInt)), ((17 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc) == null ? null : date(((1991 : GoInt)), ((9 : Month)), ((14 : GoInt)), ((17 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc).__copy__()), _wantStart : (_boundTwo == null ? null : _boundTwo.__copy__()), _wantEnd : (_boundThree == null ? null : _boundThree.__copy__()) } : T__struct_28));
                s[6] = (({ _giveTime : (date(((1991 : GoInt)), ((9 : Month)), ((15 : GoInt)), ((0 : GoInt)), ((50 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc) == null ? null : date(((1991 : GoInt)), ((9 : Month)), ((15 : GoInt)), ((0 : GoInt)), ((50 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc).__copy__()), _wantStart : (_boundTwo == null ? null : _boundTwo.__copy__()), _wantEnd : (_boundThree == null ? null : _boundThree.__copy__()) } : T__struct_28));
                s[7] = (({ _giveTime : (_makeLocalTime(((0 : GoInt64))) == null ? null : _makeLocalTime(((0 : GoInt64))).__copy__()), _wantStart : (_makeLocalTime(((-5756400 : GoInt64))) == null ? null : _makeLocalTime(((-5756400 : GoInt64))).__copy__()), _wantEnd : (_makeLocalTime(((9972000 : GoInt64))) == null ? null : _makeLocalTime(((9972000 : GoInt64))).__copy__()) } : T__struct_28));
                s[8] = (({ _giveTime : (_makeLocalTime(((1221681866 : GoInt64))) == null ? null : _makeLocalTime(((1221681866 : GoInt64))).__copy__()), _wantStart : (_makeLocalTime(((1205056800 : GoInt64))) == null ? null : _makeLocalTime(((1205056800 : GoInt64))).__copy__()), _wantEnd : (_makeLocalTime(((1225616400 : GoInt64))) == null ? null : _makeLocalTime(((1225616400 : GoInt64))).__copy__()) } : T__struct_28));
                s[9] = (({ _giveTime : (_makeLocalTime((("2152173599" : GoInt64))) == null ? null : _makeLocalTime((("2152173599" : GoInt64))).__copy__()), _wantStart : (_makeLocalTime(((2145916800 : GoInt64))) == null ? null : _makeLocalTime(((2145916800 : GoInt64))).__copy__()), _wantEnd : (_makeLocalTime((("2152173600" : GoInt64))) == null ? null : _makeLocalTime((("2152173600" : GoInt64))).__copy__()) } : T__struct_28));
                s[10] = (({ _giveTime : (_makeLocalTime((("2152173600" : GoInt64))) == null ? null : _makeLocalTime((("2152173600" : GoInt64))).__copy__()), _wantStart : (_makeLocalTime((("2152173600" : GoInt64))) == null ? null : _makeLocalTime((("2152173600" : GoInt64))).__copy__()), _wantEnd : (_makeLocalTime((("2172733200" : GoInt64))) == null ? null : _makeLocalTime((("2172733200" : GoInt64))).__copy__()) } : T__struct_28));
                s[11] = (({ _giveTime : (_makeLocalTime((("2152173601" : GoInt64))) == null ? null : _makeLocalTime((("2152173601" : GoInt64))).__copy__()), _wantStart : (_makeLocalTime((("2152173600" : GoInt64))) == null ? null : _makeLocalTime((("2152173600" : GoInt64))).__copy__()), _wantEnd : (_makeLocalTime((("2172733200" : GoInt64))) == null ? null : _makeLocalTime((("2172733200" : GoInt64))).__copy__()) } : T__struct_28));
                s[12] = (({ _giveTime : (_makeLocalTime((("2159200800" : GoInt64))) == null ? null : _makeLocalTime((("2159200800" : GoInt64))).__copy__()), _wantStart : (_makeLocalTime((("2152173600" : GoInt64))) == null ? null : _makeLocalTime((("2152173600" : GoInt64))).__copy__()), _wantEnd : (_makeLocalTime((("2172733200" : GoInt64))) == null ? null : _makeLocalTime((("2172733200" : GoInt64))).__copy__()) } : T__struct_28));
                s[13] = (({ _giveTime : (_makeLocalTime((("2172733199" : GoInt64))) == null ? null : _makeLocalTime((("2172733199" : GoInt64))).__copy__()), _wantStart : (_makeLocalTime((("2152173600" : GoInt64))) == null ? null : _makeLocalTime((("2152173600" : GoInt64))).__copy__()), _wantEnd : (_makeLocalTime((("2172733200" : GoInt64))) == null ? null : _makeLocalTime((("2172733200" : GoInt64))).__copy__()) } : T__struct_28));
                s[14] = (({ _giveTime : (_makeLocalTime((("2172733200" : GoInt64))) == null ? null : _makeLocalTime((("2172733200" : GoInt64))).__copy__()), _wantStart : (_makeLocalTime((("2172733200" : GoInt64))) == null ? null : _makeLocalTime((("2172733200" : GoInt64))).__copy__()), _wantEnd : (_makeLocalTime((("2177452800" : GoInt64))) == null ? null : _makeLocalTime((("2177452800" : GoInt64))).__copy__()) } : T__struct_28));
                s;
            };
            for (_i => _tt in _realTests) {
                var __tmp__ = _tt._giveTime.zoneBounds(), _start:Time = __tmp__._0, _end:Time = __tmp__._1;
                if (!_start.equal((_tt._wantStart == null ? null : _tt._wantStart.__copy__())) || !_end.equal((_tt._wantEnd == null ? null : _tt._wantEnd.__copy__()))) {
                    _t.errorf(((((("#%d:: ZoneBounds of %v expects right bounds:\n  got start=%v\n  want start=%v\n  got end=%v\n  want end=%v" : GoString))) : GoString)), Go.toInterface(_i), Go.toInterface({
                        final __self__ = new Time_wrapper(_tt._giveTime);
                        __self__.add = #if !macro function(_d:Duration):Time return _tt._giveTime.add(_d) #else null #end;
                        __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _tt._giveTime.addDate(_years, _months, _days) #else null #end;
                        __self__.after = #if !macro function(__0:Time):Bool return _tt._giveTime.after(__0) #else null #end;
                        __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _tt._giveTime.appendFormat(_b, _layout) #else null #end;
                        __self__.before = #if !macro function(__0:Time):Bool return _tt._giveTime.before(__0) #else null #end;
                        __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _tt._giveTime.clock() #else null #end;
                        __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _tt._giveTime.date() #else null #end;
                        __self__.day = #if !macro function():GoInt return _tt._giveTime.day() #else null #end;
                        __self__.equal = #if !macro function(__0:Time):Bool return _tt._giveTime.equal(__0) #else null #end;
                        __self__.format = #if !macro function(__0:GoString):GoString return _tt._giveTime.format(__0) #else null #end;
                        __self__.goString = #if !macro function():GoString return _tt._giveTime.goString() #else null #end;
                        __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._giveTime.gobDecode(__0) #else null #end;
                        __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._giveTime.gobEncode() #else null #end;
                        __self__.hour = #if !macro function():GoInt return _tt._giveTime.hour() #else null #end;
                        __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _tt._giveTime.isoweek() #else null #end;
                        __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _tt._giveTime.in_(__0) #else null #end;
                        __self__.isDST = #if !macro function():Bool return _tt._giveTime.isDST() #else null #end;
                        __self__.isZero = #if !macro function():Bool return _tt._giveTime.isZero() #else null #end;
                        __self__.local = #if !macro function():Time return _tt._giveTime.local() #else null #end;
                        __self__.location = #if !macro function():Ref<Location> return _tt._giveTime.location() #else null #end;
                        __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._giveTime.marshalBinary() #else null #end;
                        __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._giveTime.marshalJSON() #else null #end;
                        __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._giveTime.marshalText() #else null #end;
                        __self__.minute = #if !macro function():GoInt return _tt._giveTime.minute() #else null #end;
                        __self__.month = #if !macro function():Month return _tt._giveTime.month() #else null #end;
                        __self__.nanosecond = #if !macro function():GoInt return _tt._giveTime.nanosecond() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Time return _tt._giveTime.round(_d) #else null #end;
                        __self__.second = #if !macro function():GoInt return _tt._giveTime.second() #else null #end;
                        __self__.string = #if !macro function():GoString return _tt._giveTime.string() #else null #end;
                        __self__.sub = #if !macro function(__0:Time):Duration return _tt._giveTime.sub(__0) #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Time return _tt._giveTime.truncate(_d) #else null #end;
                        __self__.utc = #if !macro function():Time return _tt._giveTime.utc() #else null #end;
                        __self__.unix = #if !macro function():GoInt64 return _tt._giveTime.unix() #else null #end;
                        __self__.unixMicro = #if !macro function():GoInt64 return _tt._giveTime.unixMicro() #else null #end;
                        __self__.unixMilli = #if !macro function():GoInt64 return _tt._giveTime.unixMilli() #else null #end;
                        __self__.unixNano = #if !macro function():GoInt64 return _tt._giveTime.unixNano() #else null #end;
                        __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._giveTime.unmarshalBinary(__0) #else null #end;
                        __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._giveTime.unmarshalJSON(__0) #else null #end;
                        __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._giveTime.unmarshalText(__0) #else null #end;
                        __self__.weekday = #if !macro function():Weekday return _tt._giveTime.weekday() #else null #end;
                        __self__.year = #if !macro function():GoInt return _tt._giveTime.year() #else null #end;
                        __self__.yearDay = #if !macro function():GoInt return _tt._giveTime.yearDay() #else null #end;
                        __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _tt._giveTime.zone() #else null #end;
                        __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _tt._giveTime.zoneBounds() #else null #end;
                        __self__._abs = #if !macro function():GoUInt64 return _tt._giveTime._abs() #else null #end;
                        __self__._addSec = #if !macro function(_sec_:GoInt64):Void _tt._giveTime._addSec(_sec_) #else null #end;
                        __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _tt._giveTime._date(__0) #else null #end;
                        __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _tt._giveTime._locabs() #else null #end;
                        __self__._mono = #if !macro function():GoInt64 return _tt._giveTime._mono() #else null #end;
                        __self__._nsec = #if !macro function():GoInt32 return _tt._giveTime._nsec() #else null #end;
                        __self__._sec = #if !macro function():GoInt64 return _tt._giveTime._sec() #else null #end;
                        __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _tt._giveTime._setLoc(__0) #else null #end;
                        __self__._setMono = #if !macro function(_sec__:GoInt64):Void _tt._giveTime._setMono(_sec__) #else null #end;
                        __self__._stripMono = #if !macro function():Void _tt._giveTime._stripMono() #else null #end;
                        __self__._unixSec = #if !macro function():GoInt64 return _tt._giveTime._unixSec() #else null #end;
                        __self__;
                    }), Go.toInterface({
                        final __self__ = new Time_wrapper(_start);
                        __self__.add = #if !macro function(_d:Duration):Time return _start.add(_d) #else null #end;
                        __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _start.addDate(_years, _months, _days) #else null #end;
                        __self__.after = #if !macro function(__0:Time):Bool return _start.after(__0) #else null #end;
                        __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _start.appendFormat(_b, _layout) #else null #end;
                        __self__.before = #if !macro function(__0:Time):Bool return _start.before(__0) #else null #end;
                        __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _start.clock() #else null #end;
                        __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _start.date() #else null #end;
                        __self__.day = #if !macro function():GoInt return _start.day() #else null #end;
                        __self__.equal = #if !macro function(__0:Time):Bool return _start.equal(__0) #else null #end;
                        __self__.format = #if !macro function(__0:GoString):GoString return _start.format(__0) #else null #end;
                        __self__.goString = #if !macro function():GoString return _start.goString() #else null #end;
                        __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _start.gobDecode(__0) #else null #end;
                        __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _start.gobEncode() #else null #end;
                        __self__.hour = #if !macro function():GoInt return _start.hour() #else null #end;
                        __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _start.isoweek() #else null #end;
                        __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _start.in_(__0) #else null #end;
                        __self__.isDST = #if !macro function():Bool return _start.isDST() #else null #end;
                        __self__.isZero = #if !macro function():Bool return _start.isZero() #else null #end;
                        __self__.local = #if !macro function():Time return _start.local() #else null #end;
                        __self__.location = #if !macro function():Ref<Location> return _start.location() #else null #end;
                        __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _start.marshalBinary() #else null #end;
                        __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _start.marshalJSON() #else null #end;
                        __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _start.marshalText() #else null #end;
                        __self__.minute = #if !macro function():GoInt return _start.minute() #else null #end;
                        __self__.month = #if !macro function():Month return _start.month() #else null #end;
                        __self__.nanosecond = #if !macro function():GoInt return _start.nanosecond() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Time return _start.round(_d) #else null #end;
                        __self__.second = #if !macro function():GoInt return _start.second() #else null #end;
                        __self__.string = #if !macro function():GoString return _start.string() #else null #end;
                        __self__.sub = #if !macro function(__0:Time):Duration return _start.sub(__0) #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Time return _start.truncate(_d) #else null #end;
                        __self__.utc = #if !macro function():Time return _start.utc() #else null #end;
                        __self__.unix = #if !macro function():GoInt64 return _start.unix() #else null #end;
                        __self__.unixMicro = #if !macro function():GoInt64 return _start.unixMicro() #else null #end;
                        __self__.unixMilli = #if !macro function():GoInt64 return _start.unixMilli() #else null #end;
                        __self__.unixNano = #if !macro function():GoInt64 return _start.unixNano() #else null #end;
                        __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _start.unmarshalBinary(__0) #else null #end;
                        __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _start.unmarshalJSON(__0) #else null #end;
                        __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _start.unmarshalText(__0) #else null #end;
                        __self__.weekday = #if !macro function():Weekday return _start.weekday() #else null #end;
                        __self__.year = #if !macro function():GoInt return _start.year() #else null #end;
                        __self__.yearDay = #if !macro function():GoInt return _start.yearDay() #else null #end;
                        __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _start.zone() #else null #end;
                        __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _start.zoneBounds() #else null #end;
                        __self__._abs = #if !macro function():GoUInt64 return _start._abs() #else null #end;
                        __self__._addSec = #if !macro function(_sec_:GoInt64):Void _start._addSec(_sec_) #else null #end;
                        __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _start._date(__0) #else null #end;
                        __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _start._locabs() #else null #end;
                        __self__._mono = #if !macro function():GoInt64 return _start._mono() #else null #end;
                        __self__._nsec = #if !macro function():GoInt32 return _start._nsec() #else null #end;
                        __self__._sec = #if !macro function():GoInt64 return _start._sec() #else null #end;
                        __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _start._setLoc(__0) #else null #end;
                        __self__._setMono = #if !macro function(_sec__:GoInt64):Void _start._setMono(_sec__) #else null #end;
                        __self__._stripMono = #if !macro function():Void _start._stripMono() #else null #end;
                        __self__._unixSec = #if !macro function():GoInt64 return _start._unixSec() #else null #end;
                        __self__;
                    }), Go.toInterface({
                        final __self__ = new Time_wrapper(_tt._wantStart);
                        __self__.add = #if !macro function(_d:Duration):Time return _tt._wantStart.add(_d) #else null #end;
                        __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _tt._wantStart.addDate(_years, _months, _days) #else null #end;
                        __self__.after = #if !macro function(__0:Time):Bool return _tt._wantStart.after(__0) #else null #end;
                        __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _tt._wantStart.appendFormat(_b, _layout) #else null #end;
                        __self__.before = #if !macro function(__0:Time):Bool return _tt._wantStart.before(__0) #else null #end;
                        __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _tt._wantStart.clock() #else null #end;
                        __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _tt._wantStart.date() #else null #end;
                        __self__.day = #if !macro function():GoInt return _tt._wantStart.day() #else null #end;
                        __self__.equal = #if !macro function(__0:Time):Bool return _tt._wantStart.equal(__0) #else null #end;
                        __self__.format = #if !macro function(__0:GoString):GoString return _tt._wantStart.format(__0) #else null #end;
                        __self__.goString = #if !macro function():GoString return _tt._wantStart.goString() #else null #end;
                        __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._wantStart.gobDecode(__0) #else null #end;
                        __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._wantStart.gobEncode() #else null #end;
                        __self__.hour = #if !macro function():GoInt return _tt._wantStart.hour() #else null #end;
                        __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _tt._wantStart.isoweek() #else null #end;
                        __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _tt._wantStart.in_(__0) #else null #end;
                        __self__.isDST = #if !macro function():Bool return _tt._wantStart.isDST() #else null #end;
                        __self__.isZero = #if !macro function():Bool return _tt._wantStart.isZero() #else null #end;
                        __self__.local = #if !macro function():Time return _tt._wantStart.local() #else null #end;
                        __self__.location = #if !macro function():Ref<Location> return _tt._wantStart.location() #else null #end;
                        __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._wantStart.marshalBinary() #else null #end;
                        __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._wantStart.marshalJSON() #else null #end;
                        __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._wantStart.marshalText() #else null #end;
                        __self__.minute = #if !macro function():GoInt return _tt._wantStart.minute() #else null #end;
                        __self__.month = #if !macro function():Month return _tt._wantStart.month() #else null #end;
                        __self__.nanosecond = #if !macro function():GoInt return _tt._wantStart.nanosecond() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Time return _tt._wantStart.round(_d) #else null #end;
                        __self__.second = #if !macro function():GoInt return _tt._wantStart.second() #else null #end;
                        __self__.string = #if !macro function():GoString return _tt._wantStart.string() #else null #end;
                        __self__.sub = #if !macro function(__0:Time):Duration return _tt._wantStart.sub(__0) #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Time return _tt._wantStart.truncate(_d) #else null #end;
                        __self__.utc = #if !macro function():Time return _tt._wantStart.utc() #else null #end;
                        __self__.unix = #if !macro function():GoInt64 return _tt._wantStart.unix() #else null #end;
                        __self__.unixMicro = #if !macro function():GoInt64 return _tt._wantStart.unixMicro() #else null #end;
                        __self__.unixMilli = #if !macro function():GoInt64 return _tt._wantStart.unixMilli() #else null #end;
                        __self__.unixNano = #if !macro function():GoInt64 return _tt._wantStart.unixNano() #else null #end;
                        __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._wantStart.unmarshalBinary(__0) #else null #end;
                        __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._wantStart.unmarshalJSON(__0) #else null #end;
                        __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._wantStart.unmarshalText(__0) #else null #end;
                        __self__.weekday = #if !macro function():Weekday return _tt._wantStart.weekday() #else null #end;
                        __self__.year = #if !macro function():GoInt return _tt._wantStart.year() #else null #end;
                        __self__.yearDay = #if !macro function():GoInt return _tt._wantStart.yearDay() #else null #end;
                        __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _tt._wantStart.zone() #else null #end;
                        __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _tt._wantStart.zoneBounds() #else null #end;
                        __self__._abs = #if !macro function():GoUInt64 return _tt._wantStart._abs() #else null #end;
                        __self__._addSec = #if !macro function(_sec_:GoInt64):Void _tt._wantStart._addSec(_sec_) #else null #end;
                        __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _tt._wantStart._date(__0) #else null #end;
                        __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _tt._wantStart._locabs() #else null #end;
                        __self__._mono = #if !macro function():GoInt64 return _tt._wantStart._mono() #else null #end;
                        __self__._nsec = #if !macro function():GoInt32 return _tt._wantStart._nsec() #else null #end;
                        __self__._sec = #if !macro function():GoInt64 return _tt._wantStart._sec() #else null #end;
                        __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _tt._wantStart._setLoc(__0) #else null #end;
                        __self__._setMono = #if !macro function(_sec__:GoInt64):Void _tt._wantStart._setMono(_sec__) #else null #end;
                        __self__._stripMono = #if !macro function():Void _tt._wantStart._stripMono() #else null #end;
                        __self__._unixSec = #if !macro function():GoInt64 return _tt._wantStart._unixSec() #else null #end;
                        __self__;
                    }), Go.toInterface({
                        final __self__ = new Time_wrapper(_end);
                        __self__.add = #if !macro function(_d:Duration):Time return _end.add(_d) #else null #end;
                        __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _end.addDate(_years, _months, _days) #else null #end;
                        __self__.after = #if !macro function(__0:Time):Bool return _end.after(__0) #else null #end;
                        __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _end.appendFormat(_b, _layout) #else null #end;
                        __self__.before = #if !macro function(__0:Time):Bool return _end.before(__0) #else null #end;
                        __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _end.clock() #else null #end;
                        __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _end.date() #else null #end;
                        __self__.day = #if !macro function():GoInt return _end.day() #else null #end;
                        __self__.equal = #if !macro function(__0:Time):Bool return _end.equal(__0) #else null #end;
                        __self__.format = #if !macro function(__0:GoString):GoString return _end.format(__0) #else null #end;
                        __self__.goString = #if !macro function():GoString return _end.goString() #else null #end;
                        __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _end.gobDecode(__0) #else null #end;
                        __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _end.gobEncode() #else null #end;
                        __self__.hour = #if !macro function():GoInt return _end.hour() #else null #end;
                        __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _end.isoweek() #else null #end;
                        __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _end.in_(__0) #else null #end;
                        __self__.isDST = #if !macro function():Bool return _end.isDST() #else null #end;
                        __self__.isZero = #if !macro function():Bool return _end.isZero() #else null #end;
                        __self__.local = #if !macro function():Time return _end.local() #else null #end;
                        __self__.location = #if !macro function():Ref<Location> return _end.location() #else null #end;
                        __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _end.marshalBinary() #else null #end;
                        __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _end.marshalJSON() #else null #end;
                        __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _end.marshalText() #else null #end;
                        __self__.minute = #if !macro function():GoInt return _end.minute() #else null #end;
                        __self__.month = #if !macro function():Month return _end.month() #else null #end;
                        __self__.nanosecond = #if !macro function():GoInt return _end.nanosecond() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Time return _end.round(_d) #else null #end;
                        __self__.second = #if !macro function():GoInt return _end.second() #else null #end;
                        __self__.string = #if !macro function():GoString return _end.string() #else null #end;
                        __self__.sub = #if !macro function(__0:Time):Duration return _end.sub(__0) #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Time return _end.truncate(_d) #else null #end;
                        __self__.utc = #if !macro function():Time return _end.utc() #else null #end;
                        __self__.unix = #if !macro function():GoInt64 return _end.unix() #else null #end;
                        __self__.unixMicro = #if !macro function():GoInt64 return _end.unixMicro() #else null #end;
                        __self__.unixMilli = #if !macro function():GoInt64 return _end.unixMilli() #else null #end;
                        __self__.unixNano = #if !macro function():GoInt64 return _end.unixNano() #else null #end;
                        __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _end.unmarshalBinary(__0) #else null #end;
                        __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _end.unmarshalJSON(__0) #else null #end;
                        __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _end.unmarshalText(__0) #else null #end;
                        __self__.weekday = #if !macro function():Weekday return _end.weekday() #else null #end;
                        __self__.year = #if !macro function():GoInt return _end.year() #else null #end;
                        __self__.yearDay = #if !macro function():GoInt return _end.yearDay() #else null #end;
                        __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _end.zone() #else null #end;
                        __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _end.zoneBounds() #else null #end;
                        __self__._abs = #if !macro function():GoUInt64 return _end._abs() #else null #end;
                        __self__._addSec = #if !macro function(_sec_:GoInt64):Void _end._addSec(_sec_) #else null #end;
                        __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _end._date(__0) #else null #end;
                        __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _end._locabs() #else null #end;
                        __self__._mono = #if !macro function():GoInt64 return _end._mono() #else null #end;
                        __self__._nsec = #if !macro function():GoInt32 return _end._nsec() #else null #end;
                        __self__._sec = #if !macro function():GoInt64 return _end._sec() #else null #end;
                        __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _end._setLoc(__0) #else null #end;
                        __self__._setMono = #if !macro function(_sec__:GoInt64):Void _end._setMono(_sec__) #else null #end;
                        __self__._stripMono = #if !macro function():Void _end._stripMono() #else null #end;
                        __self__._unixSec = #if !macro function():GoInt64 return _end._unixSec() #else null #end;
                        __self__;
                    }), Go.toInterface({
                        final __self__ = new Time_wrapper(_tt._wantEnd);
                        __self__.add = #if !macro function(_d:Duration):Time return _tt._wantEnd.add(_d) #else null #end;
                        __self__.addDate = #if !macro function(_years:GoInt, _months:GoInt, _days:GoInt):Time return _tt._wantEnd.addDate(_years, _months, _days) #else null #end;
                        __self__.after = #if !macro function(__0:Time):Bool return _tt._wantEnd.after(__0) #else null #end;
                        __self__.appendFormat = #if !macro function(_b:Slice<GoUInt8>, _layout:GoString):Slice<GoUInt8> return _tt._wantEnd.appendFormat(_b, _layout) #else null #end;
                        __self__.before = #if !macro function(__0:Time):Bool return _tt._wantEnd.before(__0) #else null #end;
                        __self__.clock = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; var _2 : GoInt; } return _tt._wantEnd.clock() #else null #end;
                        __self__.date = #if !macro function():{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; } return _tt._wantEnd.date() #else null #end;
                        __self__.day = #if !macro function():GoInt return _tt._wantEnd.day() #else null #end;
                        __self__.equal = #if !macro function(__0:Time):Bool return _tt._wantEnd.equal(__0) #else null #end;
                        __self__.format = #if !macro function(__0:GoString):GoString return _tt._wantEnd.format(__0) #else null #end;
                        __self__.goString = #if !macro function():GoString return _tt._wantEnd.goString() #else null #end;
                        __self__.gobDecode = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._wantEnd.gobDecode(__0) #else null #end;
                        __self__.gobEncode = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._wantEnd.gobEncode() #else null #end;
                        __self__.hour = #if !macro function():GoInt return _tt._wantEnd.hour() #else null #end;
                        __self__.isoweek = #if !macro function():{ var _0 : GoInt; var _1 : GoInt; } return _tt._wantEnd.isoweek() #else null #end;
                        __self__.in_ = #if !macro function(__0:Ref<Location>):Time return _tt._wantEnd.in_(__0) #else null #end;
                        __self__.isDST = #if !macro function():Bool return _tt._wantEnd.isDST() #else null #end;
                        __self__.isZero = #if !macro function():Bool return _tt._wantEnd.isZero() #else null #end;
                        __self__.local = #if !macro function():Time return _tt._wantEnd.local() #else null #end;
                        __self__.location = #if !macro function():Ref<Location> return _tt._wantEnd.location() #else null #end;
                        __self__.marshalBinary = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._wantEnd.marshalBinary() #else null #end;
                        __self__.marshalJSON = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._wantEnd.marshalJSON() #else null #end;
                        __self__.marshalText = #if !macro function():{ var _0 : Slice<GoUInt8>; var _1 : stdgo.Error; } return _tt._wantEnd.marshalText() #else null #end;
                        __self__.minute = #if !macro function():GoInt return _tt._wantEnd.minute() #else null #end;
                        __self__.month = #if !macro function():Month return _tt._wantEnd.month() #else null #end;
                        __self__.nanosecond = #if !macro function():GoInt return _tt._wantEnd.nanosecond() #else null #end;
                        __self__.round = #if !macro function(_d:Duration):Time return _tt._wantEnd.round(_d) #else null #end;
                        __self__.second = #if !macro function():GoInt return _tt._wantEnd.second() #else null #end;
                        __self__.string = #if !macro function():GoString return _tt._wantEnd.string() #else null #end;
                        __self__.sub = #if !macro function(__0:Time):Duration return _tt._wantEnd.sub(__0) #else null #end;
                        __self__.truncate = #if !macro function(_d:Duration):Time return _tt._wantEnd.truncate(_d) #else null #end;
                        __self__.utc = #if !macro function():Time return _tt._wantEnd.utc() #else null #end;
                        __self__.unix = #if !macro function():GoInt64 return _tt._wantEnd.unix() #else null #end;
                        __self__.unixMicro = #if !macro function():GoInt64 return _tt._wantEnd.unixMicro() #else null #end;
                        __self__.unixMilli = #if !macro function():GoInt64 return _tt._wantEnd.unixMilli() #else null #end;
                        __self__.unixNano = #if !macro function():GoInt64 return _tt._wantEnd.unixNano() #else null #end;
                        __self__.unmarshalBinary = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._wantEnd.unmarshalBinary(__0) #else null #end;
                        __self__.unmarshalJSON = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._wantEnd.unmarshalJSON(__0) #else null #end;
                        __self__.unmarshalText = #if !macro function(__0:Slice<GoUInt8>):stdgo.Error return _tt._wantEnd.unmarshalText(__0) #else null #end;
                        __self__.weekday = #if !macro function():Weekday return _tt._wantEnd.weekday() #else null #end;
                        __self__.year = #if !macro function():GoInt return _tt._wantEnd.year() #else null #end;
                        __self__.yearDay = #if !macro function():GoInt return _tt._wantEnd.yearDay() #else null #end;
                        __self__.zone = #if !macro function():{ var _0 : GoString; var _1 : GoInt; } return _tt._wantEnd.zone() #else null #end;
                        __self__.zoneBounds = #if !macro function():{ var _0 : Time; var _1 : Time; } return _tt._wantEnd.zoneBounds() #else null #end;
                        __self__._abs = #if !macro function():GoUInt64 return _tt._wantEnd._abs() #else null #end;
                        __self__._addSec = #if !macro function(_sec_:GoInt64):Void _tt._wantEnd._addSec(_sec_) #else null #end;
                        __self__._date = #if !macro function(__0:Bool):{ var _0 : GoInt; var _1 : Month; var _2 : GoInt; var _3 : GoInt; } return _tt._wantEnd._date(__0) #else null #end;
                        __self__._locabs = #if !macro function():{ var _0 : GoString; var _1 : GoInt; var _2 : GoUInt64; } return _tt._wantEnd._locabs() #else null #end;
                        __self__._mono = #if !macro function():GoInt64 return _tt._wantEnd._mono() #else null #end;
                        __self__._nsec = #if !macro function():GoInt32 return _tt._wantEnd._nsec() #else null #end;
                        __self__._sec = #if !macro function():GoInt64 return _tt._wantEnd._sec() #else null #end;
                        __self__._setLoc = #if !macro function(__0:Ref<Location>):Void _tt._wantEnd._setLoc(__0) #else null #end;
                        __self__._setMono = #if !macro function(_sec__:GoInt64):Void _tt._wantEnd._setMono(_sec__) #else null #end;
                        __self__._stripMono = #if !macro function():Void _tt._wantEnd._stripMono() #else null #end;
                        __self__._unixSec = #if !macro function():GoInt64 return _tt._wantEnd._unixSec() #else null #end;
                        __self__;
                    }));
                };
            };
            for (defer in __deferstack__) {
                defer();
            };
            {
                for (defer in __deferstack__) {
                    defer();
                };
                if (__recover_exception__ != null) throw __recover_exception__;
                return;
            };
        } catch(__exception__) {
            if (!(__exception__.native is AnyInterfaceData)) throw __exception__;
            __recover_exception__ = __exception__.native;
            for (defer in __deferstack__) {
                defer();
            };
            if (__recover_exception__ != null) throw __recover_exception__;
            return;
        };
    }
function testEmbeddedTZData(_t:stdgo.testing.Testing.T):Void {
        var __recover_exception__:AnyInterface = null;
        var __deferstack__:Array<Void -> Void> = [];
        try {
            var _undo:() -> Void = stdgo.time.Time.disablePlatformSources();
            __deferstack__.unshift(() -> _undo());
            for (_0 => _zone in _zones) {
                var __tmp__ = stdgo.time.Time.loadLocation(_zone), _ref:Ref<Location> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
                if (_err != null) {
                    _t.errorf(((((("LoadLocation(%q): %v" : GoString))) : GoString)), Go.toInterface(_zone), Go.toInterface(_err));
                    continue;
                };
                var __tmp__ = stdgo.time.Time.loadFromEmbeddedTZData(_zone), _embedded:GoString = __tmp__._0, _err:stdgo.Error = __tmp__._1;
                if (_err != null) {
                    _t.errorf(((((("LoadFromEmbeddedTZData(%q): %v" : GoString))) : GoString)), Go.toInterface(_zone), Go.toInterface(_err));
                    continue;
                };
                var __tmp__ = stdgo.time.Time.loadLocationFromTZData(_zone, ((_embedded : Slice<GoByte>))), _sample:Ref<Location> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
                if (_err != null) {
                    _t.errorf(((((("LoadLocationFromTZData failed for %q: %v" : GoString))) : GoString)), Go.toInterface(_zone), Go.toInterface(_err));
                    continue;
                };
                var _v1:stdgo.reflect.Reflect.Value = (stdgo.reflect.Reflect.valueOf(Go.toInterface(_ref)).elem() == null ? null : stdgo.reflect.Reflect.valueOf(Go.toInterface(_ref)).elem().__copy__());
                var _v2:stdgo.reflect.Reflect.Value = (stdgo.reflect.Reflect.valueOf(Go.toInterface(_sample)).elem() == null ? null : stdgo.reflect.Reflect.valueOf(Go.toInterface(_sample)).elem().__copy__());
                var _typ:stdgo.reflect.Reflect.Type = _v1.type();
                var _nf:GoInt = _typ.numField();
                var _found:GoInt = ((0 : GoInt));
                {
                    var _i:GoInt = ((0 : GoInt));
                    Go.cfor(_i < _nf, _i++, {
                        var _ft:stdgo.reflect.Reflect.StructField = (_typ.field(_i) == null ? null : _typ.field(_i).__copy__());
                        if ((_ft.name != ((((("name" : GoString))) : GoString))) && (_ft.name != ((((("zone" : GoString))) : GoString)))) {
                            continue;
                        };
                        _found++;
                        if (!_equal(_t, (_v1.field(_i) == null ? null : _v1.field(_i).__copy__()), (_v2.field(_i) == null ? null : _v2.field(_i).__copy__()))) {
                            _t.errorf(((((("zone %s: system and embedded tzdata field %s differs" : GoString))) : GoString)), Go.toInterface(_zone), Go.toInterface(_ft.name));
                        };
                    });
                };
                if (_found != ((2 : GoInt))) {
                    _t.errorf(((((("test must be updated for change to time.Location struct" : GoString))) : GoString)));
                };
            };
            for (defer in __deferstack__) {
                defer();
            };
            {
                for (defer in __deferstack__) {
                    defer();
                };
                if (__recover_exception__ != null) throw __recover_exception__;
                return;
            };
        } catch(__exception__) {
            if (!(__exception__.native is AnyInterfaceData)) throw __exception__;
            __recover_exception__ = __exception__.native;
            for (defer in __deferstack__) {
                defer();
            };
            if (__recover_exception__ != null) throw __recover_exception__;
            return;
        };
    }
/**
    // equal is a small version of reflect.DeepEqual that we use to
    // compare the values of zoneinfo unexported fields.
**/
function _equal(_t:stdgo.testing.Testing.T, _f1:stdgo.reflect.Reflect.Value, _f2:stdgo.reflect.Reflect.Value):Bool {
        if (_f1.type().kind() == ((23 : stdgo.reflect.Reflect.Kind))) {
            if (_f1.len() != _f2.len()) {
                return false;
            };
            {
                var _i:GoInt = ((0 : GoInt));
                Go.cfor(_i < _f1.len(), _i++, {
                    if (!_equal(_t, (_f1.index(_i) == null ? null : _f1.index(_i).__copy__()), (_f2.index(_i) == null ? null : _f2.index(_i).__copy__()))) {
                        return false;
                    };
                });
            };
            return true;
        } else if (_f1.type().kind() == ((25 : stdgo.reflect.Reflect.Kind))) {
            var _nf:GoInt = _f1.type().numField();
            {
                var _i:GoInt = ((0 : GoInt));
                Go.cfor(_i < _nf, _i++, {
                    if (!_equal(_t, (_f1.field(_i) == null ? null : _f1.field(_i).__copy__()), (_f2.field(_i) == null ? null : _f2.field(_i).__copy__()))) {
                        return false;
                    };
                });
            };
            return true;
        } else if (_f1.type().kind() == ((24 : stdgo.reflect.Reflect.Kind))) {
            return ((_f1.string() : GoString)) == ((_f2.string() : GoString));
        } else if (_f1.type().kind() == ((1 : stdgo.reflect.Reflect.Kind))) {
            return _f1.bool() == _f2.bool();
        } else if (_f1.type().kind() == ((2 : stdgo.reflect.Reflect.Kind)) || _f1.type().kind() == ((3 : stdgo.reflect.Reflect.Kind)) || _f1.type().kind() == ((4 : stdgo.reflect.Reflect.Kind)) || _f1.type().kind() == ((5 : stdgo.reflect.Reflect.Kind)) || _f1.type().kind() == ((6 : stdgo.reflect.Reflect.Kind))) {
            return _f1.int() == _f2.int();
        } else if (_f1.type().kind() == ((7 : stdgo.reflect.Reflect.Kind)) || _f1.type().kind() == ((8 : stdgo.reflect.Reflect.Kind)) || _f1.type().kind() == ((9 : stdgo.reflect.Reflect.Kind)) || _f1.type().kind() == ((10 : stdgo.reflect.Reflect.Kind)) || _f1.type().kind() == ((11 : stdgo.reflect.Reflect.Kind)) || _f1.type().kind() == ((12 : stdgo.reflect.Reflect.Kind))) {
            return _f1.uint() == _f2.uint();
        } else {
            _t.errorf(((((("test internal error: unsupported kind %v" : GoString))) : GoString)), Go.toInterface({
                final __self__ = new stdgo.reflect.Reflect.Kind_wrapper(_f1.type().kind());
                __self__.string = #if !macro function():GoString return _f1.type().kind().string() #else null #end;
                __self__;
            }));
            return true;
        };
    }
function testEnvVarUsage(_t:stdgo.testing.Testing.T):Void {
        var __recover_exception__:AnyInterface = null;
        var __deferstack__:Array<Void -> Void> = [];
        try {
            stdgo.time.Time.resetZoneinfoForTesting();
            {};
            {};
            _t.setenv(((((("ZONEINFO" : GoString))) : GoString)), ((((("foo.zip" : GoString))) : GoString)));
            stdgo.time.Time.loadLocation(((((("Asia/Jerusalem" : GoString))) : GoString)));
            __deferstack__.unshift(() -> stdgo.time.Time.resetZoneinfoForTesting());
            {
                var _zoneinfo = stdgo.time.Time.zoneinfoForTesting();
                if (((((("foo.zip" : GoString))) : GoString)) != _zoneinfo.value) {
                    _t.errorf(((((("zoneinfo does not match env variable: got %q want %q" : GoString))) : GoString)), Go.toInterface(_zoneinfo.value), Go.toInterface(((((("foo.zip" : GoString))) : GoString))));
                };
            };
            for (defer in __deferstack__) {
                defer();
            };
            {
                for (defer in __deferstack__) {
                    defer();
                };
                if (__recover_exception__ != null) throw __recover_exception__;
                return;
            };
        } catch(__exception__) {
            if (!(__exception__.native is AnyInterfaceData)) throw __exception__;
            __recover_exception__ = __exception__.native;
            for (defer in __deferstack__) {
                defer();
            };
            if (__recover_exception__ != null) throw __recover_exception__;
            return;
        };
    }
function testBadLocationErrMsg(_t:stdgo.testing.Testing.T):Void {
        stdgo.time.Time.resetZoneinfoForTesting();
        var _loc:GoString = ((((("Asia/SomethingNotExist" : GoString))) : GoString));
        var _want:stdgo.Error = stdgo.errors.Errors.new_(((((("unknown time zone " : GoString))) : GoString)) + _loc);
        var __tmp__ = stdgo.time.Time.loadLocation(_loc), _0:Ref<Location> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
        if (_err.error() != _want.error()) {
            _t.errorf(((((("LoadLocation(%q) error = %v; want %v" : GoString))) : GoString)), Go.toInterface(_loc), Go.toInterface(_err), Go.toInterface(_want));
        };
    }
function testLoadLocationValidatesNames(_t:stdgo.testing.Testing.T):Void {
        stdgo.time.Time.resetZoneinfoForTesting();
        {};
        _t.setenv(((((("ZONEINFO" : GoString))) : GoString)), ((((("" : GoString))) : GoString)));
        var _bad = ((new Slice<GoString>(((((("/usr/foo/Foo" : GoString))) : GoString)), ((((("\\UNC\x0Coo" : GoString))) : GoString)), (((((".." : GoString))) : GoString)), ((((("a.." : GoString))) : GoString))) : Slice<GoString>));
        for (_0 => _v in _bad) {
            var __tmp__ = stdgo.time.Time.loadLocation(_v), _1:Ref<Location> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if (_err != stdgo.time.Time.errLocation) {
                _t.errorf(((((("LoadLocation(%q) error = %v; want ErrLocation" : GoString))) : GoString)), Go.toInterface(_v), Go.toInterface(_err));
            };
        };
    }
function testVersion3(_t:stdgo.testing.Testing.T):Void {
        var __recover_exception__:AnyInterface = null;
        var __deferstack__:Array<Void -> Void> = [];
        try {
            var _undo:() -> Void = stdgo.time.Time.disablePlatformSources();
            __deferstack__.unshift(() -> _undo());
            var __tmp__ = stdgo.time.Time.loadLocation(((((("Asia/Jerusalem" : GoString))) : GoString))), _0:Ref<Location> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if (_err != null) {
                _t.fatal(Go.toInterface(_err));
            };
            for (defer in __deferstack__) {
                defer();
            };
            {
                for (defer in __deferstack__) {
                    defer();
                };
                if (__recover_exception__ != null) throw __recover_exception__;
                return;
            };
        } catch(__exception__) {
            if (!(__exception__.native is AnyInterfaceData)) throw __exception__;
            __recover_exception__ = __exception__.native;
            for (defer in __deferstack__) {
                defer();
            };
            if (__recover_exception__ != null) throw __recover_exception__;
            return;
        };
    }
/**
    // Test that we get the correct results for times before the first
    // transition time. To do this we explicitly check early dates in a
    // couple of specific timezones.
**/
function testFirstZone(_t:stdgo.testing.Testing.T):Void {
        var __recover_exception__:AnyInterface = null;
        var __deferstack__:Array<Void -> Void> = [];
        try {
            var _undo:() -> Void = stdgo.time.Time.disablePlatformSources();
            __deferstack__.unshift(() -> _undo());
            {};
            var _tests:Slice<T__struct_29> = ((new Slice<T__struct_29>((({ _zone : ((((("PST8PDT" : GoString))) : GoString)), _unix : ((-1633269601 : GoInt64)), _want1 : ((((("Sun, 31 Mar 1918 01:59:59 -0800 (PST)" : GoString))) : GoString)), _want2 : ((((("Sun, 31 Mar 1918 03:00:00 -0700 (PDT)" : GoString))) : GoString)) } : T__struct_29)), (({ _zone : ((((("Pacific/Fakaofo" : GoString))) : GoString)), _unix : ((1325242799 : GoInt64)), _want1 : ((((("Thu, 29 Dec 2011 23:59:59 -1100 (-11)" : GoString))) : GoString)), _want2 : ((((("Sat, 31 Dec 2011 00:00:00 +1300 (+13)" : GoString))) : GoString)) } : T__struct_29))) : Slice<T__struct_29>));
            for (_0 => _test in _tests) {
                var __tmp__ = stdgo.time.Time.loadLocation(_test._zone), _z:Ref<Location> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
                if (_err != null) {
                    _t.fatal(Go.toInterface(_err));
                };
                var _s:GoString = stdgo.time.Time.unix(_test._unix, ((0 : GoInt64))).in_(_z).format(((((("Mon, 02 Jan 2006 15:04:05 -0700 (MST)" : GoString))) : GoString)));
                if (_s != _test._want1) {
                    _t.errorf(((((("for %s %d got %q want %q" : GoString))) : GoString)), Go.toInterface(_test._zone), Go.toInterface(_test._unix), Go.toInterface(_s), Go.toInterface(_test._want1));
                };
                _s = stdgo.time.Time.unix(_test._unix + ((1 : GoInt64)), ((0 : GoInt64))).in_(_z).format(((((("Mon, 02 Jan 2006 15:04:05 -0700 (MST)" : GoString))) : GoString)));
                if (_s != _test._want2) {
                    _t.errorf(((((("for %s %d got %q want %q" : GoString))) : GoString)), Go.toInterface(_test._zone), Go.toInterface(_test._unix), Go.toInterface(_s), Go.toInterface(_test._want2));
                };
            };
            for (defer in __deferstack__) {
                defer();
            };
            {
                for (defer in __deferstack__) {
                    defer();
                };
                if (__recover_exception__ != null) throw __recover_exception__;
                return;
            };
        } catch(__exception__) {
            if (!(__exception__.native is AnyInterfaceData)) throw __exception__;
            __recover_exception__ = __exception__.native;
            for (defer in __deferstack__) {
                defer();
            };
            if (__recover_exception__ != null) throw __recover_exception__;
            return;
        };
    }
function testLocationNames(_t:stdgo.testing.Testing.T):Void {
        if (((stdgo.time.Time.local.string() : GoString)) != ((((("Local" : GoString))) : GoString))) {
            _t.errorf((("invalid Local location name: got %q want \"Local\"" : GoString)), Go.toInterface(stdgo.time.Time.local));
        };
        if (((stdgo.time.Time.utc.string() : GoString)) != ((((("UTC" : GoString))) : GoString))) {
            _t.errorf((("invalid UTC location name: got %q want \"UTC\"" : GoString)), Go.toInterface(stdgo.time.Time.utc));
        };
    }
function testLoadLocationFromTZData(_t:stdgo.testing.Testing.T):Void {
        var __recover_exception__:AnyInterface = null;
        var __deferstack__:Array<Void -> Void> = [];
        try {
            var _undo:() -> Void = stdgo.time.Time.disablePlatformSources();
            __deferstack__.unshift(() -> _undo());
            {};
            var __tmp__ = stdgo.time.Time.loadLocation(((((("Asia/Jerusalem" : GoString))) : GoString))), _reference:Ref<Location> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if (_err != null) {
                _t.fatal(Go.toInterface(_err));
            };
            var __tmp__ = stdgo.time.Time.gorootZoneSource(stdgo.internal.testenv.Testenv.goroot({
                final __self__ = new stdgo.testing.Testing.T_wrapper(_t);
                __self__.cleanup = #if !macro function(_f:() -> Void):Void _t.cleanup(_f) #else null #end;
                __self__.deadline = #if !macro function():{ var _0 : Time; var _1 : Bool; } return _t.deadline() #else null #end;
                __self__.error = #if !macro function(_args:Slice<AnyInterface>):Void _t.error(_args) #else null #end;
                __self__.errorf = #if !macro function(_m:GoString, _args:Slice<AnyInterface>):Void _t.errorf(_m, _args) #else null #end;
                __self__.fail = #if !macro function():Void _t.fail() #else null #end;
                __self__.failNow = #if !macro function():Void _t.failNow() #else null #end;
                __self__.failed = #if !macro function():Bool return _t.failed() #else null #end;
                __self__.fatal = #if !macro function(_args:Slice<AnyInterface>):Void _t.fatal(_args) #else null #end;
                __self__.fatalf = #if !macro function(_m:GoString, _args:Slice<AnyInterface>):Void _t.fatalf(_m, _args) #else null #end;
                __self__.helper = #if !macro function():Void _t.helper() #else null #end;
                __self__.log = #if !macro function(_args:Slice<AnyInterface>):Void _t.log(_args) #else null #end;
                __self__.logf = #if !macro function(_m:GoString, _args:Slice<AnyInterface>):Void _t.logf(_m, _args) #else null #end;
                __self__.name = #if !macro function():GoString return _t.name() #else null #end;
                __self__.parallel = #if !macro function():Void _t.parallel() #else null #end;
                __self__.run = #if !macro function(_name:GoString, _f:Ref<stdgo.testing.Testing.T> -> Void):Bool return _t.run(_name, _f) #else null #end;
                __self__.setenv = #if !macro function(_name:GoString, _source:GoString):Void _t.setenv(_name, _source) #else null #end;
                __self__.skip = #if !macro function(_args:Slice<AnyInterface>):Void _t.skip(_args) #else null #end;
                __self__.skipNow = #if !macro function():Void _t.skipNow() #else null #end;
                __self__.skipf = #if !macro function(_m:GoString, _args:Slice<AnyInterface>):Void _t.skipf(_m, _args) #else null #end;
                __self__.skipped = #if !macro function():Bool return _t.skipped() #else null #end;
                __self__.tempDir = #if !macro function():GoString return _t.tempDir() #else null #end;
                __self__._checkFuzzFn = #if !macro function(__0:GoString):Void _t._checkFuzzFn(__0) #else null #end;
                __self__._decorate = #if !macro function(_name:GoString, _offset:GoInt):GoString return _t._decorate(_name, _offset) #else null #end;
                __self__._flushToParent = #if !macro function(_testName:GoString, _format:GoString, _args:Slice<AnyInterface>):Void _t._flushToParent(_testName, _format, _args) #else null #end;
                __self__._frameSkip = #if !macro function(__0:GoInt):stdgo.runtime.Runtime.Frame return _t._frameSkip(__0) #else null #end;
                __self__._log = #if !macro function(__0:GoString):Void _t._log(__0) #else null #end;
                __self__._logDepth = #if !macro function(_name:GoString, _offset:GoInt):Void _t._logDepth(_name, _offset) #else null #end;
                __self__._private = #if !macro function():Void _t._private() #else null #end;
                __self__._report = #if !macro function():Void _t._report() #else null #end;
                __self__._runCleanup = #if !macro function(_ph:stdgo.testing.Testing.T_panicHandling):AnyInterface return _t._runCleanup(_ph) #else null #end;
                __self__._setRan = #if !macro function():Void _t._setRan() #else null #end;
                __self__;
            })), _gorootSource:GoString = __tmp__._0, _ok:Bool = __tmp__._1;
            if (!_ok) {
                _t.fatal(Go.toInterface(((((("Failed to locate tzinfo source in GOROOT." : GoString))) : GoString))));
            };
            var __tmp__ = stdgo.time.Time.loadTzinfo(((((("Asia/Jerusalem" : GoString))) : GoString)), _gorootSource), _tzinfo:Slice<GoUInt8> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if (_err != null) {
                _t.fatal(Go.toInterface(_err));
            };
            var __tmp__ = stdgo.time.Time.loadLocationFromTZData(((((("Asia/Jerusalem" : GoString))) : GoString)), _tzinfo), _sample:Ref<Location> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if (_err != null) {
                _t.fatal(Go.toInterface(_err));
            };
            if (!stdgo.reflect.Reflect.deepEqual(Go.toInterface(_reference), Go.toInterface(_sample))) {
                _t.errorf(((((("return values of LoadLocationFromTZData and LoadLocation don\'t match" : GoString))) : GoString)));
            };
            for (defer in __deferstack__) {
                defer();
            };
            {
                for (defer in __deferstack__) {
                    defer();
                };
                if (__recover_exception__ != null) throw __recover_exception__;
                return;
            };
        } catch(__exception__) {
            if (!(__exception__.native is AnyInterfaceData)) throw __exception__;
            __recover_exception__ = __exception__.native;
            for (defer in __deferstack__) {
                defer();
            };
            if (__recover_exception__ != null) throw __recover_exception__;
            return;
        };
    }
/**
    // Issue 30099.
**/
function testEarlyLocation(_t:stdgo.testing.Testing.T):Void {
        var __recover_exception__:AnyInterface = null;
        var __deferstack__:Array<Void -> Void> = [];
        try {
            var _undo:() -> Void = stdgo.time.Time.disablePlatformSources();
            __deferstack__.unshift(() -> _undo());
            {};
            var __tmp__ = stdgo.time.Time.loadLocation(((((("America/New_York" : GoString))) : GoString))), _loc:Ref<Location> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if (_err != null) {
                _t.fatal(Go.toInterface(_err));
            };
            var _d:Time = (stdgo.time.Time.date(((1900 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc) == null ? null : stdgo.time.Time.date(((1900 : GoInt)), ((1 : Month)), ((1 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), ((0 : GoInt)), _loc).__copy__());
            var __tmp__ = _d.zone(), _tzName:GoString = __tmp__._0, _tzOffset:GoInt = __tmp__._1;
            {
                var _want:GoString = ((((("EST" : GoString))) : GoString));
                if (_tzName != _want) {
                    _t.errorf(((((("Zone name == %s, want %s" : GoString))) : GoString)), Go.toInterface(_tzName), Go.toInterface(_want));
                };
            };
            {
                var _want:GoInt = ((-18000 : GoInt));
                if (_tzOffset != _want) {
                    _t.errorf(((((("Zone offset == %d, want %d" : GoString))) : GoString)), Go.toInterface(_tzOffset), Go.toInterface(_want));
                };
            };
            for (defer in __deferstack__) {
                defer();
            };
            {
                for (defer in __deferstack__) {
                    defer();
                };
                if (__recover_exception__ != null) throw __recover_exception__;
                return;
            };
        } catch(__exception__) {
            if (!(__exception__.native is AnyInterfaceData)) throw __exception__;
            __recover_exception__ = __exception__.native;
            for (defer in __deferstack__) {
                defer();
            };
            if (__recover_exception__ != null) throw __recover_exception__;
            return;
        };
    }
function testMalformedTZData(_t:stdgo.testing.Testing.T):Void {
        var _issue29437:GoString = ((((("TZif" : GoString)) + ((haxe.io.Bytes.ofHex("00") : GoString)) + (("000000000000000" : GoString)) + ((haxe.io.Bytes.ofHex("00") : GoString)) + ((haxe.io.Bytes.ofHex("00") : GoString)) + ((haxe.io.Bytes.ofHex("00") : GoString)) + ((haxe.io.Bytes.ofHex("01") : GoString)) + ((haxe.io.Bytes.ofHex("00") : GoString)) + ((haxe.io.Bytes.ofHex("00") : GoString)) + ((haxe.io.Bytes.ofHex("00") : GoString)) + ((haxe.io.Bytes.ofHex("00") : GoString)) + ((haxe.io.Bytes.ofHex("00") : GoString)) + ((haxe.io.Bytes.ofHex("00") : GoString)) + ((haxe.io.Bytes.ofHex("00") : GoString)) + ((haxe.io.Bytes.ofHex("00") : GoString)) + ((haxe.io.Bytes.ofHex("00") : GoString)) + ((haxe.io.Bytes.ofHex("00") : GoString)) + ((haxe.io.Bytes.ofHex("00") : GoString)) + ((haxe.io.Bytes.ofHex("00") : GoString)) + ((haxe.io.Bytes.ofHex("00") : GoString)) + ((haxe.io.Bytes.ofHex("00") : GoString)) + ((haxe.io.Bytes.ofHex("00") : GoString)) + ((haxe.io.Bytes.ofHex("00") : GoString)) + ((haxe.io.Bytes.ofHex("00") : GoString)) + ((haxe.io.Bytes.ofHex("00") : GoString)) + ((haxe.io.Bytes.ofHex("00") : GoString)) + ((haxe.io.Bytes.ofHex("00") : GoString)) + (("00" : GoString))) : GoString));
        var __tmp__ = stdgo.time.Time.loadLocationFromTZData(((((("abc" : GoString))) : GoString)), ((_issue29437 : Slice<GoByte>))), _0:Ref<Location> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
        if (_err == null) {
            _t.error(Go.toInterface(((((("expected error, got none" : GoString))) : GoString))));
        };
    }
function testLoadLocationFromTZDataSlim(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _test in _slimTests) {
            var __tmp__ = stdgo.os.Os.readFile(((((("testdata/" : GoString))) : GoString)) + _test._fileName), _tzData:Slice<GoUInt8> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if (_err != null) {
                _t.error(Go.toInterface(_err));
                continue;
            };
            var __tmp__ = stdgo.time.Time.loadLocationFromTZData(_test._zoneName, _tzData), _reference:Ref<Location> = __tmp__._0, _err:stdgo.Error = __tmp__._1;
            if (_err != null) {
                _t.error(Go.toInterface(_err));
                continue;
            };
            var _d:Time = (_test._date(_reference) == null ? null : _test._date(_reference).__copy__());
            var __tmp__ = _d.zone(), _tzName:GoString = __tmp__._0, _tzOffset:GoInt = __tmp__._1;
            if (_tzName != _test._wantName) {
                _t.errorf(((((("Zone name == %s, want %s" : GoString))) : GoString)), Go.toInterface(_tzName), Go.toInterface(_test._wantName));
            };
            if (_tzOffset != _test._wantOffset) {
                _t.errorf(((((("Zone offset == %d, want %d" : GoString))) : GoString)), Go.toInterface(_tzOffset), Go.toInterface(_test._wantOffset));
            };
        };
    }
function testTzset(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _test in ((new Slice<T__struct_31>((({ _inStr : ((((("" : GoString))) : GoString)), _inEnd : ((0 : GoInt64)), _inSec : ((0 : GoInt64)), _name : ((((("" : GoString))) : GoString)), _off : ((0 : GoInt)), _start : ((0 : GoInt64)), _end : ((0 : GoInt64)), _isDST : false, _ok : false } : T__struct_31)), (({ _inStr : ((((("PST8PDT,M3.2.0,M11.1.0" : GoString))) : GoString)), _inEnd : ((0 : GoInt64)), _inSec : (("2159200800" : GoInt64)), _name : ((((("PDT" : GoString))) : GoString)), _off : ((-25200 : GoInt)), _start : (("2152173600" : GoInt64)), _end : (("2172733200" : GoInt64)), _isDST : true, _ok : true } : T__struct_31)), (({ _inStr : ((((("PST8PDT,M3.2.0,M11.1.0" : GoString))) : GoString)), _inEnd : ((0 : GoInt64)), _inSec : (("2152173599" : GoInt64)), _name : ((((("PST" : GoString))) : GoString)), _off : ((-28800 : GoInt)), _start : ((2145916800 : GoInt64)), _end : (("2152173600" : GoInt64)), _isDST : false, _ok : true } : T__struct_31)), (({ _inStr : ((((("PST8PDT,M3.2.0,M11.1.0" : GoString))) : GoString)), _inEnd : ((0 : GoInt64)), _inSec : (("2152173600" : GoInt64)), _name : ((((("PDT" : GoString))) : GoString)), _off : ((-25200 : GoInt)), _start : (("2152173600" : GoInt64)), _end : (("2172733200" : GoInt64)), _isDST : true, _ok : true } : T__struct_31)), (({ _inStr : ((((("PST8PDT,M3.2.0,M11.1.0" : GoString))) : GoString)), _inEnd : ((0 : GoInt64)), _inSec : (("2152173601" : GoInt64)), _name : ((((("PDT" : GoString))) : GoString)), _off : ((-25200 : GoInt)), _start : (("2152173600" : GoInt64)), _end : (("2172733200" : GoInt64)), _isDST : true, _ok : true } : T__struct_31)), (({ _inStr : ((((("PST8PDT,M3.2.0,M11.1.0" : GoString))) : GoString)), _inEnd : ((0 : GoInt64)), _inSec : (("2172733199" : GoInt64)), _name : ((((("PDT" : GoString))) : GoString)), _off : ((-25200 : GoInt)), _start : (("2152173600" : GoInt64)), _end : (("2172733200" : GoInt64)), _isDST : true, _ok : true } : T__struct_31)), (({ _inStr : ((((("PST8PDT,M3.2.0,M11.1.0" : GoString))) : GoString)), _inEnd : ((0 : GoInt64)), _inSec : (("2172733200" : GoInt64)), _name : ((((("PST" : GoString))) : GoString)), _off : ((-28800 : GoInt)), _start : (("2172733200" : GoInt64)), _end : (("2177452800" : GoInt64)), _isDST : false, _ok : true } : T__struct_31)), (({ _inStr : ((((("PST8PDT,M3.2.0,M11.1.0" : GoString))) : GoString)), _inEnd : ((0 : GoInt64)), _inSec : (("2172733201" : GoInt64)), _name : ((((("PST" : GoString))) : GoString)), _off : ((-28800 : GoInt)), _start : (("2172733200" : GoInt64)), _end : (("2177452800" : GoInt64)), _isDST : false, _ok : true } : T__struct_31))) : Slice<T__struct_31>))) {
            var __tmp__ = stdgo.time.Time.tzset(_test._inStr, _test._inEnd, _test._inSec), _name:GoString = __tmp__._0, _off:GoInt = __tmp__._1, _start:GoInt64 = __tmp__._2, _end:GoInt64 = __tmp__._3, _isDST:Bool = __tmp__._4, _ok:Bool = __tmp__._5;
            if ((((((_name != _test._name) || (_off != _test._off)) || (_start != _test._start)) || (_end != _test._end)) || (_isDST != _test._isDST)) || (_ok != _test._ok)) {
                _t.errorf(((((("tzset(%q, %d, %d) = %q, %d, %d, %d, %t, %t, want %q, %d, %d, %d, %t, %t" : GoString))) : GoString)),
Go.toInterface(_test._inStr),
Go.toInterface(_test._inEnd),
Go.toInterface(_test._inSec),
Go.toInterface(_name),
Go.toInterface(_off),
Go.toInterface(_start),
Go.toInterface(_end),
Go.toInterface(_isDST),
Go.toInterface(_ok),
Go.toInterface(_test._name),
Go.toInterface(_test._off),
Go.toInterface(_test._start),
Go.toInterface(_test._end),
Go.toInterface(_test._isDST),
Go.toInterface(_test._ok));
            };
        };
    }
function testTzsetName(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _test in ((new Slice<T__struct_32>((({ _in : ((((("" : GoString))) : GoString)), _name : ((((("" : GoString))) : GoString)), _out : ((((("" : GoString))) : GoString)), _ok : false } : T__struct_32)), (({ _in : ((((("X" : GoString))) : GoString)), _name : ((((("" : GoString))) : GoString)), _out : ((((("" : GoString))) : GoString)), _ok : false } : T__struct_32)), (({ _in : ((((("PST" : GoString))) : GoString)), _name : ((((("PST" : GoString))) : GoString)), _out : ((((("" : GoString))) : GoString)), _ok : true } : T__struct_32)), (({ _in : ((((("PST8PDT" : GoString))) : GoString)), _name : ((((("PST" : GoString))) : GoString)), _out : ((((("8PDT" : GoString))) : GoString)), _ok : true } : T__struct_32)), (({ _in : ((((("PST-08" : GoString))) : GoString)), _name : ((((("PST" : GoString))) : GoString)), _out : ((((("-08" : GoString))) : GoString)), _ok : true } : T__struct_32)), (({ _in : ((((("<A+B>+08" : GoString))) : GoString)), _name : ((((("A+B" : GoString))) : GoString)), _out : ((((("+08" : GoString))) : GoString)), _ok : true } : T__struct_32))) : Slice<T__struct_32>))) {
            var __tmp__ = stdgo.time.Time.tzsetName(_test._in), _name:GoString = __tmp__._0, _out:GoString = __tmp__._1, _ok:Bool = __tmp__._2;
            if (((_name != _test._name) || (_out != _test._out)) || (_ok != _test._ok)) {
                _t.errorf(((((("tzsetName(%q) = %q, %q, %t, want %q, %q, %t" : GoString))) : GoString)), Go.toInterface(_test._in), Go.toInterface(_name), Go.toInterface(_out), Go.toInterface(_ok), Go.toInterface(_test._name), Go.toInterface(_test._out), Go.toInterface(_test._ok));
            };
        };
    }
function testTzsetOffset(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _test in ((new Slice<T__struct_33>((({ _in : ((((("" : GoString))) : GoString)), _off : ((0 : GoInt)), _out : ((((("" : GoString))) : GoString)), _ok : false } : T__struct_33)), (({ _in : ((((("X" : GoString))) : GoString)), _off : ((0 : GoInt)), _out : ((((("" : GoString))) : GoString)), _ok : false } : T__struct_33)), (({ _in : ((((("+" : GoString))) : GoString)), _off : ((0 : GoInt)), _out : ((((("" : GoString))) : GoString)), _ok : false } : T__struct_33)), (({ _in : ((((("+08" : GoString))) : GoString)), _off : ((28800 : GoInt)), _out : ((((("" : GoString))) : GoString)), _ok : true } : T__struct_33)), (({ _in : ((((("-01:02:03" : GoString))) : GoString)), _off : ((-3723 : GoInt)), _out : ((((("" : GoString))) : GoString)), _ok : true } : T__struct_33)), (({ _in : ((((("01" : GoString))) : GoString)), _off : ((3600 : GoInt)), _out : ((((("" : GoString))) : GoString)), _ok : true } : T__struct_33)), (({ _in : ((((("100" : GoString))) : GoString)), _off : ((360000 : GoInt)), _out : ((((("" : GoString))) : GoString)), _ok : true } : T__struct_33)), (({ _in : ((((("1000" : GoString))) : GoString)), _off : ((0 : GoInt)), _out : ((((("" : GoString))) : GoString)), _ok : false } : T__struct_33)), (({ _in : ((((("8PDT" : GoString))) : GoString)), _off : ((28800 : GoInt)), _out : ((((("PDT" : GoString))) : GoString)), _ok : true } : T__struct_33))) : Slice<T__struct_33>))) {
            var __tmp__ = stdgo.time.Time.tzsetOffset(_test._in), _off:GoInt = __tmp__._0, _out:GoString = __tmp__._1, _ok:Bool = __tmp__._2;
            if (((_off != _test._off) || (_out != _test._out)) || (_ok != _test._ok)) {
                _t.errorf(((((("tzsetName(%q) = %d, %q, %t, want %d, %q, %t" : GoString))) : GoString)), Go.toInterface(_test._in), Go.toInterface(_off), Go.toInterface(_out), Go.toInterface(_ok), Go.toInterface(_test._off), Go.toInterface(_test._out), Go.toInterface(_test._ok));
            };
        };
    }
function testTzsetRule(_t:stdgo.testing.Testing.T):Void {
        for (_0 => _test in ((new Slice<T__struct_34>((({ _in : ((((("" : GoString))) : GoString)), _r : ((new Rule() : Rule)), _out : ((((("" : GoString))) : GoString)), _ok : false } : T__struct_34)), (({ _in : ((((("X" : GoString))) : GoString)), _r : ((new Rule() : Rule)), _out : ((((("" : GoString))) : GoString)), _ok : false } : T__struct_34)), (({ _in : ((((("J10" : GoString))) : GoString)), _r : (({ kind : ((0 : RuleKind)), day : ((10 : GoInt)), time : ((7200 : GoInt)) } : Rule)), _out : ((((("" : GoString))) : GoString)), _ok : true } : T__struct_34)), (({ _in : ((((("20" : GoString))) : GoString)), _r : (({ kind : ((1 : RuleKind)), day : ((20 : GoInt)), time : ((7200 : GoInt)) } : Rule)), _out : ((((("" : GoString))) : GoString)), _ok : true } : T__struct_34)), (({ _in : ((((("M1.2.3" : GoString))) : GoString)), _r : (({ kind : ((2 : RuleKind)), mon : ((1 : GoInt)), week : ((2 : GoInt)), day : ((3 : GoInt)), time : ((7200 : GoInt)) } : Rule)), _out : ((((("" : GoString))) : GoString)), _ok : true } : T__struct_34)), (({ _in : ((((("30/03:00:00" : GoString))) : GoString)), _r : (({ kind : ((1 : RuleKind)), day : ((30 : GoInt)), time : ((10800 : GoInt)) } : Rule)), _out : ((((("" : GoString))) : GoString)), _ok : true } : T__struct_34)), (({ _in : ((((("M4.5.6/03:00:00" : GoString))) : GoString)), _r : (({ kind : ((2 : RuleKind)), mon : ((4 : GoInt)), week : ((5 : GoInt)), day : ((6 : GoInt)), time : ((10800 : GoInt)) } : Rule)), _out : ((((("" : GoString))) : GoString)), _ok : true } : T__struct_34)), (({ _in : ((((("M4.5.7/03:00:00" : GoString))) : GoString)), _r : ((new Rule() : Rule)), _out : ((((("" : GoString))) : GoString)), _ok : false } : T__struct_34)), (({ _in : ((((("M4.5.6/-04" : GoString))) : GoString)), _r : (({ kind : ((2 : RuleKind)), mon : ((4 : GoInt)), week : ((5 : GoInt)), day : ((6 : GoInt)), time : ((-14400 : GoInt)) } : Rule)), _out : ((((("" : GoString))) : GoString)), _ok : true } : T__struct_34))) : Slice<T__struct_34>))) {
            var __tmp__ = stdgo.time.Time.tzsetRule(_test._in), _r:Rule = __tmp__._0, _out:GoString = __tmp__._1, _ok:Bool = __tmp__._2;
            if (((_r != _test._r) || (_out != _test._out)) || (_ok != _test._ok)) {
                _t.errorf(((((("tzsetName(%q) = %#v, %q, %t, want %#v, %q, %t" : GoString))) : GoString)), Go.toInterface(_test._in), Go.toInterface(_r), Go.toInterface(_out), Go.toInterface(_ok), Go.toInterface(_test._r), Go.toInterface(_test._out), Go.toInterface(_test._ok));
            };
        };
    }
@:keep var _ = {
        try {
            if (stdgo.time.Time.zoneinfoForTesting() != null) {
                throw Go.toInterface(stdgo.fmt.Fmt.errorf(((((("zoneinfo initialized before first LoadLocation" : GoString))) : GoString))));
            };
        } catch(__exception__) if (__exception__.message != "__return__") throw __exception__;
        true;
    };
